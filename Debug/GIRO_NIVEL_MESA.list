
GIRO_NIVEL_MESA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001018  0800c7b8  0800c7b8  0001c7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7d0  0800d7d0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7d0  0800d7d0  0001d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7d8  0800d7d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7d8  0800d7d8  0001d7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7dc  0800d7dc  0001d7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d7e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001f0  0800d9d0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800d9d0  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d48  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd9  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241df  00000000  00000000  0003f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185f3  00000000  00000000  000636af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8857  00000000  00000000  0007bca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001544f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d48  00000000  00000000  0015454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c79c 	.word	0x0800c79c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c79c 	.word	0x0800c79c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MPU6050_init>:
#include <math.h>
//#include "Arduino.h"

//MPU6050::MPU6050(TwoWire &w){
void MPU6050_init(I2C_HandleTypeDef *hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  //wire = &w;
  HI2C = hi2c;
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <MPU6050_init+0x28>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  accCoef = 1.0-DEFAULT_GYRO_COEFF;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MPU6050_init+0x2c>)
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <MPU6050_init+0x30>)
 8000f92:	601a      	str	r2, [r3, #0]
  gyroCoef = DEFAULT_GYRO_COEFF;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MPU6050_init+0x34>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <MPU6050_init+0x38>)
 8000f98:	601a      	str	r2, [r3, #0]

  MPU6050_begin();
 8000f9a:	f000 f80f 	bl	8000fbc <MPU6050_begin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000234 	.word	0x20000234
 8000fac:	2000023c 	.word	0x2000023c
 8000fb0:	3ca3d70a 	.word	0x3ca3d70a
 8000fb4:	2000024c 	.word	0x2000024c
 8000fb8:	3f7ae148 	.word	0x3f7ae148

08000fbc <MPU6050_begin>:
  MPU6050_begin();
}

//void MPU6050::begin(){
void MPU6050_begin()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  writeMPU6050(MPU6050_SMPLRT_DIV, 0x00);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f000 f82e 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_CONFIG, 0x00);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201a      	movs	r0, #26
 8000fcc:	f000 f82a 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_GYRO_CONFIG, 0x08);
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	201b      	movs	r0, #27
 8000fd4:	f000 f826 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_ACCEL_CONFIG, 0x00);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 f822 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_PWR_MGMT_1, 0x01);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	206b      	movs	r0, #107	; 0x6b
 8000fe4:	f000 f81e 	bl	8001024 <writeMPU6050>
  MPU6050_update();
 8000fe8:	f000 f8fe 	bl	80011e8 <MPU6050_update>
  angleX = MPU6050_getAccAngleX();
 8000fec:	f000 fb66 	bl	80016bc <MPU6050_getAccAngleX>
 8000ff0:	eef0 7a40 	vmov.f32	s15, s0
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MPU6050_begin+0x5c>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
  angleY = MPU6050_getAccAngleY();
 8000ffa:	f000 fb6d 	bl	80016d8 <MPU6050_getAccAngleY>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MPU6050_begin+0x60>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
  preInterval = HAL_GetTick();
 8001008:	f005 f884 	bl	8006114 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <MPU6050_begin+0x64>)
 8001012:	601a      	str	r2, [r3, #0]
  /*this->update();
  angleX = this->getAccAngleX();
  angleY = this->getAccAngleY();
  preInterval = millis();*/
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000244 	.word	0x20000244
 800101c:	20000260 	.word	0x20000260
 8001020:	20000220 	.word	0x20000220

08001024 <writeMPU6050>:

//void MPU6050::writeMPU6050(byte reg, byte data){
void writeMPU6050(uint8_t reg, uint8_t data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	uint8_t pacote[2];
	pacote[0] = reg;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	733b      	strb	r3, [r7, #12]
	pacote[1] = data;
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout)
	if(HAL_I2C_Master_Transmit(HI2C, MPU6050_ADDR<<1, pacote, 2, 5) == HAL_ERROR)
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <writeMPU6050+0x40>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	2305      	movs	r3, #5
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	f005 fc84 	bl	8006958 <HAL_I2C_Master_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <writeMPU6050+0x36>
	{
		error_led();
 8001056:	f000 fb17 	bl	8001688 <error_led>
	}
//HAL_Delay(1); //Estava no código original, mas se mostrou desnecessário
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000234 	.word	0x20000234

08001068 <readMPU6050_n>:
  wire->requestFrom(MPU6050_ADDR, 1);
  byte data =  wire->read();
  return data;*/

uint8_t readMPU6050_n(uint8_t reg, uint8_t *data, uint8_t size)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(HI2C, (MPU6050_ADDR<<1)|1, &reg, 1, 5);
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <readMPU6050_n+0x4c>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	1dfa      	adds	r2, r7, #7
 800107e:	2305      	movs	r3, #5
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	21d1      	movs	r1, #209	; 0xd1
 8001086:	f005 fc67 	bl	8006958 <HAL_I2C_Master_Transmit>
	if(HAL_I2C_Master_Receive(HI2C, (MPU6050_ADDR<<1)|1, data, size, 5) == HAL_ERROR)
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <readMPU6050_n+0x4c>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b29b      	uxth	r3, r3
 8001092:	2205      	movs	r2, #5
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	21d1      	movs	r1, #209	; 0xd1
 800109a:	f005 fd5b 	bl	8006b54 <HAL_I2C_Master_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <readMPU6050_n+0x40>
	error_led();
 80010a4:	f000 faf0 	bl	8001688 <error_led>
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000234 	.word	0x20000234

080010b8 <MPU6050_calcGyroOffsets>:
  gyroZoffset = z;
}

//void MPU6050::calcGyroOffsets(){
void MPU6050_calcGyroOffsets()
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
  float xyz[3] = {0,0,0};
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  int8_t offset[6];
  int16_t b;
  
  for(int i = 0; i < GYRO_OFFSET_NB_MES; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	e055      	b.n	8001182 <MPU6050_calcGyroOffsets+0xca>
  {
	  readMPU6050_n(0x43, offset, 6);
 80010d6:	463b      	mov	r3, r7
 80010d8:	2206      	movs	r2, #6
 80010da:	4619      	mov	r1, r3
 80010dc:	2043      	movs	r0, #67	; 0x43
 80010de:	f7ff ffc3 	bl	8001068 <readMPU6050_n>

	  for(int j=0;j<3;j++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	e046      	b.n	8001176 <MPU6050_calcGyroOffsets+0xbe>
  	  {
		  b = offset[j*2] << 8;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	f107 0220 	add.w	r2, r7, #32
 80010f0:	4413      	add	r3, r2
 80010f2:	f913 3c20 	ldrsb.w	r3, [r3, #-32]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	82fb      	strh	r3, [r7, #22]
		  b |= offset[j*2+1];
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	3301      	adds	r3, #1
 8001100:	f107 0220 	add.w	r2, r7, #32
 8001104:	4413      	add	r3, r2
 8001106:	f913 3c20 	ldrsb.w	r3, [r3, #-32]
 800110a:	b21a      	sxth	r2, r3
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	4313      	orrs	r3, r2
 8001110:	82fb      	strh	r3, [r7, #22]
		  xyz[j] += ((float)b) / GYRO_LSB_2_DEGSEC;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f107 0220 	add.w	r2, r7, #32
 800111a:	4413      	add	r3, r2
 800111c:	3b18      	subs	r3, #24
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa31 	bl	8000588 <__aeabi_f2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee17 0a90 	vmov	r0, s15
 800113a:	f7ff fa25 	bl	8000588 <__aeabi_f2d>
 800113e:	a328      	add	r3, pc, #160	; (adr r3, 80011e0 <MPU6050_calcGyroOffsets+0x128>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fba2 	bl	800088c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f8bc 	bl	80002cc <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd44 	bl	8000be8 <__aeabi_d2f>
 8001160:	4602      	mov	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f107 0120 	add.w	r1, r7, #32
 800116a:	440b      	add	r3, r1
 800116c:	3b18      	subs	r3, #24
 800116e:	601a      	str	r2, [r3, #0]
	  for(int j=0;j<3;j++)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b02      	cmp	r3, #2
 800117a:	ddb5      	ble.n	80010e8 <MPU6050_calcGyroOffsets+0x30>
  for(int i = 0; i < GYRO_OFFSET_NB_MES; i++)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001188:	4293      	cmp	r3, r2
 800118a:	dda4      	ble.n	80010d6 <MPU6050_calcGyroOffsets+0x1e>
  	  }
   }
  gyroXoffset = xyz[0] / GYRO_OFFSET_NB_MES;
 800118c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001190:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MPU6050_calcGyroOffsets+0x11c>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
  gyroYoffset = xyz[1] / GYRO_OFFSET_NB_MES;
 800119e:	ed97 7a03 	vldr	s14, [r7, #12]
 80011a2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MPU6050_calcGyroOffsets+0x120>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
  gyroZoffset = xyz[2] / GYRO_OFFSET_NB_MES;
 80011b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MPU6050_calcGyroOffsets+0x124>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
		b  = wire->read() << 8;
		b |= wire->read();
		xyz[j] += ((float)b) / GYRO_LSB_2_DEGSEC;
	}
  }*/
}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	453b8000 	.word	0x453b8000
 80011d4:	20000268 	.word	0x20000268
 80011d8:	20000238 	.word	0x20000238
 80011dc:	20000224 	.word	0x20000224
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40506000 	.word	0x40506000

080011e8 <MPU6050_update>:

//void MPU6050::update(){
void MPU6050_update()
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b08c      	sub	sp, #48	; 0x30
 80011ee:	af00      	add	r7, sp, #0

  uint8_t raw[14];
  int16_t rawData[7]; // [ax,ay,az,temp,gx,gy,gz]

  //Lê todos os parâmetros byte a byte
  readMPU6050_n(0x3B, raw, 14);// 0x3B é o endereço do ACCEL_XOUT_H, os demais parâmetros vem na
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	220e      	movs	r2, #14
 80011f6:	4619      	mov	r1, r3
 80011f8:	203b      	movs	r0, #59	; 0x3b
 80011fa:	f7ff ff35 	bl	8001068 <readMPU6050_n>

  //Combina o LSB com o MSB, todos os valores são de 16 bits
  for(int i=0;i<7;i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e02b      	b.n	800125c <MPU6050_update+0x74>
  {
	rawData[i]  = raw[i*2] << 8;
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800120c:	4413      	add	r3, r2
 800120e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800121e:	440b      	add	r3, r1
 8001220:	f823 2c30 	strh.w	r2, [r3, #-48]
    rawData[i] |= raw[i*2+1];
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800122c:	4413      	add	r3, r2
 800122e:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	3301      	adds	r3, #1
 8001238:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800123c:	440b      	add	r3, r1
 800123e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001250:	440b      	add	r3, r1
 8001252:	f823 2c30 	strh.w	r2, [r3, #-48]
  for(int i=0;i<7;i++)
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	3301      	adds	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	2b06      	cmp	r3, #6
 8001260:	ddd0      	ble.n	8001204 <MPU6050_update+0x1c>
  }

  accX = ((float)rawData[0]) / ACC_LSB_2_G;
 8001262:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	eddf 6ad6 	vldr	s13, [pc, #856]	; 80015c8 <MPU6050_update+0x3e0>
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	4bd5      	ldr	r3, [pc, #852]	; (80015cc <MPU6050_update+0x3e4>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
  accY = ((float)rawData[1]) / ACC_LSB_2_G;
 800127c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	eddf 6acf 	vldr	s13, [pc, #828]	; 80015c8 <MPU6050_update+0x3e0>
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	4bcf      	ldr	r3, [pc, #828]	; (80015d0 <MPU6050_update+0x3e8>)
 8001292:	edc3 7a00 	vstr	s15, [r3]
  accZ = ((float)rawData[2]) / ACC_LSB_2_G;
 8001296:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	eddf 6ac9 	vldr	s13, [pc, #804]	; 80015c8 <MPU6050_update+0x3e0>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4bca      	ldr	r3, [pc, #808]	; (80015d4 <MPU6050_update+0x3ec>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
  temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f955 	bl	8000564 <__aeabi_i2d>
 80012ba:	a3bb      	add	r3, pc, #748	; (adr r3, 80015a8 <MPU6050_update+0x3c0>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f804 	bl	80002cc <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4bc1      	ldr	r3, [pc, #772]	; (80015d8 <MPU6050_update+0x3f0>)
 80012d2:	f7ff fadb 	bl	800088c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc83 	bl	8000be8 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4abd      	ldr	r2, [pc, #756]	; (80015dc <MPU6050_update+0x3f4>)
 80012e6:	6013      	str	r3, [r2, #0]
  gyroX = ((float)rawData[4]) / GYRO_LSB_2_DEGSEC - gyroXoffset;
 80012e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ee17 0a90 	vmov	r0, s15
 80012f8:	f7ff f946 	bl	8000588 <__aeabi_f2d>
 80012fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff fac3 	bl	800088c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4690      	mov	r8, r2
 800130c:	4699      	mov	r9, r3
 800130e:	4bb4      	ldr	r3, [pc, #720]	; (80015e0 <MPU6050_update+0x3f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f938 	bl	8000588 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7fe ffd2 	bl	80002c8 <__aeabi_dsub>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc5c 	bl	8000be8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4aac      	ldr	r2, [pc, #688]	; (80015e4 <MPU6050_update+0x3fc>)
 8001334:	6013      	str	r3, [r2, #0]
  gyroY = ((float)rawData[5]) / GYRO_LSB_2_DEGSEC - gyroYoffset;
 8001336:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	a399      	add	r3, pc, #612	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa9c 	bl	800088c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4690      	mov	r8, r2
 800135a:	4699      	mov	r9, r3
 800135c:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <MPU6050_update+0x400>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4640      	mov	r0, r8
 800136c:	4649      	mov	r1, r9
 800136e:	f7fe ffab 	bl	80002c8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fc35 	bl	8000be8 <__aeabi_d2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4a9a      	ldr	r2, [pc, #616]	; (80015ec <MPU6050_update+0x404>)
 8001382:	6013      	str	r3, [r2, #0]
  gyroZ = ((float)rawData[6]) / GYRO_LSB_2_DEGSEC - gyroZoffset;
 8001384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ee17 0a90 	vmov	r0, s15
 8001394:	f7ff f8f8 	bl	8000588 <__aeabi_f2d>
 8001398:	a385      	add	r3, pc, #532	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa75 	bl	800088c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4690      	mov	r8, r2
 80013a8:	4699      	mov	r9, r3
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <MPU6050_update+0x408>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4640      	mov	r0, r8
 80013ba:	4649      	mov	r1, r9
 80013bc:	f7fe ff84 	bl	80002c8 <__aeabi_dsub>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fc0e 	bl	8000be8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a89      	ldr	r2, [pc, #548]	; (80015f4 <MPU6050_update+0x40c>)
 80013d0:	6013      	str	r3, [r2, #0]
  
  float sgZ = (accZ>=0)-(accZ<0);
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <MPU6050_update+0x3ec>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	bfac      	ite	ge
 80013e2:	2301      	movge	r3, #1
 80013e4:	2300      	movlt	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <MPU6050_update+0x3ec>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	bf4c      	ite	mi
 80013fa:	2301      	movmi	r3, #1
 80013fc:	2300      	movpl	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  angleAccX = atan2(accY, sgZ*sqrt(accZ*accZ + accX*accX)) * RAD_2_DEG;
 800140e:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <MPU6050_update+0x3e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8b8 	bl	8000588 <__aeabi_f2d>
 8001418:	4682      	mov	sl, r0
 800141a:	468b      	mov	fp, r1
 800141c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800141e:	f7ff f8b3 	bl	8000588 <__aeabi_f2d>
 8001422:	4680      	mov	r8, r0
 8001424:	4689      	mov	r9, r1
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <MPU6050_update+0x3ec>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <MPU6050_update+0x3ec>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <MPU6050_update+0x3e4>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b63      	ldr	r3, [pc, #396]	; (80015cc <MPU6050_update+0x3e4>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f89b 	bl	8000588 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	ec43 2b10 	vmov	d0, r2, r3
 800145a:	f00a fe41 	bl	800c0e0 <sqrt>
 800145e:	ec53 2b10 	vmov	r2, r3, d0
 8001462:	4640      	mov	r0, r8
 8001464:	4649      	mov	r1, r9
 8001466:	f7ff f8e7 	bl	8000638 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ec43 2b17 	vmov	d7, r2, r3
 8001472:	eeb0 1a47 	vmov.f32	s2, s14
 8001476:	eef0 1a67 	vmov.f32	s3, s15
 800147a:	ec4b ab10 	vmov	d0, sl, fp
 800147e:	f00a fe2d 	bl	800c0dc <atan2>
 8001482:	ec51 0b10 	vmov	r0, r1, d0
 8001486:	a34c      	add	r3, pc, #304	; (adr r3, 80015b8 <MPU6050_update+0x3d0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fba6 	bl	8000be8 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <MPU6050_update+0x410>)
 80014a0:	6013      	str	r3, [r2, #0]
  angleAccY = - atan2(accX, sqrt(accZ*accZ + accY*accY)) * RAD_2_DEG;
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <MPU6050_update+0x3e4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f86e 	bl	8000588 <__aeabi_f2d>
 80014ac:	4680      	mov	r8, r0
 80014ae:	4689      	mov	r9, r1
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <MPU6050_update+0x3ec>)
 80014b2:	ed93 7a00 	vldr	s14, [r3]
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <MPU6050_update+0x3ec>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <MPU6050_update+0x3e8>)
 80014c2:	edd3 6a00 	vldr	s13, [r3]
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <MPU6050_update+0x3e8>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f856 	bl	8000588 <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b10 	vmov	d0, r2, r3
 80014e4:	f00a fdfc 	bl	800c0e0 <sqrt>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	eef0 7a60 	vmov.f32	s15, s1
 80014f0:	eeb0 1a47 	vmov.f32	s2, s14
 80014f4:	eef0 1a67 	vmov.f32	s3, s15
 80014f8:	ec49 8b10 	vmov	d0, r8, r9
 80014fc:	f00a fdee 	bl	800c0dc <atan2>
 8001500:	ec53 2b10 	vmov	r2, r3, d0
 8001504:	4614      	mov	r4, r2
 8001506:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800150a:	a32b      	add	r3, pc, #172	; (adr r3, 80015b8 <MPU6050_update+0x3d0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f890 	bl	8000638 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb62 	bl	8000be8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	4a35      	ldr	r2, [pc, #212]	; (80015fc <MPU6050_update+0x414>)
 8001528:	6013      	str	r3, [r2, #0]

  unsigned long Tnew = HAL_GetTick();
 800152a:	f004 fdf3 	bl	8006114 <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24
  float dt = (Tnew - preInterval) * 1e-3;
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MPU6050_update+0x418>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f802 	bl	8000544 <__aeabi_ui2d>
 8001540:	a31f      	add	r3, pc, #124	; (adr r3, 80015c0 <MPU6050_update+0x3d8>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f877 	bl	8000638 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb49 	bl	8000be8 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	623b      	str	r3, [r7, #32]
  preInterval = Tnew;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <MPU6050_update+0x418>)
 800155e:	6013      	str	r3, [r2, #0]

  angleX = (gyroCoef * (angleX + gyroX*dt)) + (accCoef * angleAccX);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MPU6050_update+0x3fc>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	edd7 7a08 	vldr	s15, [r7, #32]
 800156a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MPU6050_update+0x41c>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MPU6050_update+0x420>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MPU6050_update+0x424>)
 8001584:	edd3 6a00 	vldr	s13, [r3]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MPU6050_update+0x410>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MPU6050_update+0x41c>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
  angleY = (gyroCoef * (angleY + gyroY*dt)) + (accCoef * angleAccY);
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MPU6050_update+0x404>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	e035      	b.n	8001610 <MPU6050_update+0x428>
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40c83e00 	.word	0x40c83e00
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40506000 	.word	0x40506000
 80015b8:	1e7967cb 	.word	0x1e7967cb
 80015bc:	404ca5dc 	.word	0x404ca5dc
 80015c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015c4:	3f50624d 	.word	0x3f50624d
 80015c8:	46800000 	.word	0x46800000
 80015cc:	20000264 	.word	0x20000264
 80015d0:	2000025c 	.word	0x2000025c
 80015d4:	2000022c 	.word	0x2000022c
 80015d8:	40754000 	.word	0x40754000
 80015dc:	20000230 	.word	0x20000230
 80015e0:	20000268 	.word	0x20000268
 80015e4:	20000228 	.word	0x20000228
 80015e8:	20000238 	.word	0x20000238
 80015ec:	20000254 	.word	0x20000254
 80015f0:	20000224 	.word	0x20000224
 80015f4:	20000240 	.word	0x20000240
 80015f8:	20000258 	.word	0x20000258
 80015fc:	20000248 	.word	0x20000248
 8001600:	20000220 	.word	0x20000220
 8001604:	20000244 	.word	0x20000244
 8001608:	2000024c 	.word	0x2000024c
 800160c:	2000023c 	.word	0x2000023c
 8001610:	edd7 7a08 	vldr	s15, [r7, #32]
 8001614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MPU6050_update+0x488>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MPU6050_update+0x48c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MPU6050_update+0x490>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <MPU6050_update+0x494>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MPU6050_update+0x488>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
  angleZ += gyroZ*dt;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MPU6050_update+0x498>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MPU6050_update+0x49c>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MPU6050_update+0x49c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]

}
 8001664:	bf00      	nop
 8001666:	3730      	adds	r7, #48	; 0x30
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166e:	bf00      	nop
 8001670:	20000260 	.word	0x20000260
 8001674:	2000024c 	.word	0x2000024c
 8001678:	2000023c 	.word	0x2000023c
 800167c:	20000248 	.word	0x20000248
 8001680:	20000240 	.word	0x20000240
 8001684:	20000250 	.word	0x20000250

08001688 <error_led>:

void error_led(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
while (1)
{
//Espera por um reset
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800168c:	2120      	movs	r1, #32
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <error_led+0x14>)
 8001690:	f005 f803 	bl	800669a <HAL_GPIO_TogglePin>
HAL_Delay(100);
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f004 fd49 	bl	800612c <HAL_Delay>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800169a:	e7f7      	b.n	800168c <error_led+0x4>
 800169c:	40020000 	.word	0x40020000

080016a0 <MPU6050_getAngleY>:
float MPU6050_getGyroX(){ return gyroX; };
float MPU6050_getGyroY(){ return gyroY; };
float MPU6050_getGyroZ(){ return gyroZ; };

float MPU6050_getAngleX()	{return angleX;};
float MPU6050_getAngleY()	{return angleY;};
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <MPU6050_getAngleY+0x18>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	20000260 	.word	0x20000260

080016bc <MPU6050_getAccAngleX>:
float MPU6050_getAngleZ()	{return angleZ;};

//void calcGyroOffsets();

float MPU6050_getAccAngleX(){return angleAccX;};
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <MPU6050_getAccAngleX+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000258 	.word	0x20000258

080016d8 <MPU6050_getAccAngleY>:
float MPU6050_getAccAngleY(){return angleAccY;};
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <MPU6050_getAccAngleY+0x18>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000248 	.word	0x20000248

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f004 fca5 	bl	8006048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f8dd 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8001702:	f000 fa9d 	bl	8001c40 <MX_GPIO_Init>
   MX_USART2_UART_Init();
 8001706:	f000 fa71 	bl	8001bec <MX_USART2_UART_Init>
   MX_TIM1_Init();
 800170a:	f000 f9a9 	bl	8001a60 <MX_TIM1_Init>
   MX_I2C1_Init();
 800170e:	f000 f943 	bl	8001998 <MX_I2C1_Init>
   MX_SPI2_Init();
 8001712:	f000 f96f 	bl	80019f4 <MX_SPI2_Init>
   MX_TIM3_Init();
 8001716:	f000 f9f3 	bl	8001b00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

   tft_gpio_init(); 				// Inicializa os GPIOs conectados ao LCD;
 800171a:	f004 fbf9 	bl	8005f10 <tft_gpio_init>
   HAL_TIM_Base_Start(&htim1); 	// Inicializa o Timer1;
 800171e:	485c      	ldr	r0, [pc, #368]	; (8001890 <main+0x19c>)
 8001720:	f006 fdae 	bl	8008280 <HAL_TIM_Base_Start>
   uint16_t ID = tft_readID(); 	// Lê o ID do LCD, que é "37697";
 8001724:	f002 fa00 	bl	8003b28 <readID>
 8001728:	4603      	mov	r3, r0
 800172a:	80bb      	strh	r3, [r7, #4]
   tft_init(ID);					// Inicializa o LCD de acordo com o ID;
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fe74 	bl	800341c <tft_init>
   setRotation(0);				// Coloca e rotação como RETRATO;
 8001734:	2000      	movs	r0, #0
 8001736:	f003 f927 	bl	8004988 <setRotation>
   HAL_Delay(100);				// Delay para evitar aquele erro de não preencher a tela corretamente;
 800173a:	2064      	movs	r0, #100	; 0x64
 800173c:	f004 fcf6 	bl	800612c <HAL_Delay>
   fillScreen(BLACK);			// Nome já diz tudo;
 8001740:	2000      	movs	r0, #0
 8001742:	f003 fef7 	bl	8005534 <fillScreen>

   //Inicialização do MPU6050
    MPU6050_init(&hi2c1);
 8001746:	4853      	ldr	r0, [pc, #332]	; (8001894 <main+0x1a0>)
 8001748:	f7ff fc1a 	bl	8000f80 <MPU6050_init>


    printnewtstr(50, YELLOW, &mono9x7, 1, (uint8_t *)"Nao mexa na placa");
 800174c:	4b52      	ldr	r3, [pc, #328]	; (8001898 <main+0x1a4>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	4a52      	ldr	r2, [pc, #328]	; (800189c <main+0x1a8>)
 8001754:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001758:	2032      	movs	r0, #50	; 0x32
 800175a:	f004 fb73 	bl	8005e44 <printnewtstr>
    printf("Calculating gyro offset, do not move MPU6050\r\n");
 800175e:	4850      	ldr	r0, [pc, #320]	; (80018a0 <main+0x1ac>)
 8001760:	f008 fc4e 	bl	800a000 <puts>
    HAL_Delay(1000);
 8001764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001768:	f004 fce0 	bl	800612c <HAL_Delay>
    MPU6050_calcGyroOffsets();
 800176c:	f7ff fca4 	bl	80010b8 <MPU6050_calcGyroOffsets>
    printnewtstr(50, BLACK, &mono9x7, 1, (uint8_t *)"Nao mexa na placa");
 8001770:	4b49      	ldr	r3, [pc, #292]	; (8001898 <main+0x1a4>)
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	4a49      	ldr	r2, [pc, #292]	; (800189c <main+0x1a8>)
 8001778:	2100      	movs	r1, #0
 800177a:	2032      	movs	r0, #50	; 0x32
 800177c:	f004 fb62 	bl	8005e44 <printnewtstr>
    printf("Done!\r\n");
 8001780:	4848      	ldr	r0, [pc, #288]	; (80018a4 <main+0x1b0>)
 8001782:	f008 fc3d 	bl	800a000 <puts>
    printnewtstr(150, GREEN, &mono9x7, 2, (uint8_t *)"Pronto!" );
 8001786:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <main+0x1b4>)
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	4a43      	ldr	r2, [pc, #268]	; (800189c <main+0x1a8>)
 800178e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001792:	2096      	movs	r0, #150	; 0x96
 8001794:	f004 fb56 	bl	8005e44 <printnewtstr>

    //Inicia o PWM do servo
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001798:	210c      	movs	r1, #12
 800179a:	4844      	ldr	r0, [pc, #272]	; (80018ac <main+0x1b8>)
 800179c:	f006 fe32 	bl	8008404 <HAL_TIM_PWM_Start>
    htim3.Instance->CCR4 = 1500;
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <main+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
    uint16_t Servo = htim3.Instance->CCR4;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <main+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	80fb      	strh	r3, [r7, #6]

    // Calibra o Zero: O zero é o angulo inicial da mesa
    MPU6050_update();
 80017b2:	f7ff fd19 	bl	80011e8 <MPU6050_update>
    timer = HAL_GetTick();
 80017b6:	f004 fcad 	bl	8006114 <HAL_GetTick>
 80017ba:	6038      	str	r0, [r7, #0]
    while ((HAL_GetTick() - timer) < 5000)
 80017bc:	e006      	b.n	80017cc <main+0xd8>
    	AngAtu = MPU6050_getAngleY();
 80017be:	f7ff ff6f 	bl	80016a0 <MPU6050_getAngleY>
 80017c2:	eef0 7a40 	vmov.f32	s15, s0
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <main+0x1bc>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
    while ((HAL_GetTick() - timer) < 5000)
 80017cc:	f004 fca2 	bl	8006114 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80017da:	4293      	cmp	r3, r2
 80017dc:	d9ef      	bls.n	80017be <main+0xca>

    Zero = AngAtu;
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <main+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <main+0x1c0>)
 80017e4:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
	  {
	  //Servo na posição inicial
	  htim3.Instance->CCR4 = 1500;
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <main+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
	  Servo = htim3.Instance->CCR4;
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <main+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	80fb      	strh	r3, [r7, #6]

	  while((Servo >= 1400) && (Servo <= 2600))
 80017f8:	e03f      	b.n	800187a <main+0x186>
	  {

	  //Lê ângulo por 5 segundos antes de tomar a decisão
	  timer = HAL_GetTick();
 80017fa:	f004 fc8b 	bl	8006114 <HAL_GetTick>
 80017fe:	6038      	str	r0, [r7, #0]
	  while((HAL_GetTick() - timer) < 500)
 8001800:	e008      	b.n	8001814 <main+0x120>
		  {
		  	  MPU6050_update();
 8001802:	f7ff fcf1 	bl	80011e8 <MPU6050_update>
		  	  AngAtu = MPU6050_getAngleY();
 8001806:	f7ff ff4b 	bl	80016a0 <MPU6050_getAngleY>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <main+0x1bc>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
	  while((HAL_GetTick() - timer) < 500)
 8001814:	f004 fc7e 	bl	8006114 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001822:	d3ee      	bcc.n	8001802 <main+0x10e>
		  }



		  if(AngAtu > (Zero + Offset ))
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <main+0x1c0>)
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <main+0x1c4>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <main+0x1bc>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d503      	bpl.n	800184c <main+0x158>
		  			  Servo += 50;
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3332      	adds	r3, #50	; 0x32
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	e012      	b.n	8001872 <main+0x17e>
  		  else if (AngAtu < (Zero - Offset ))
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <main+0x1c0>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <main+0x1c4>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <main+0x1bc>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd02      	ble.n	8001872 <main+0x17e>
		  		  	  Servo -= 50;
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	3b32      	subs	r3, #50	; 0x32
 8001870:	80fb      	strh	r3, [r7, #6]
		  htim3.Instance->CCR4 = Servo;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <main+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	88fa      	ldrh	r2, [r7, #6]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
	  while((Servo >= 1400) && (Servo <= 2600))
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001880:	d3b1      	bcc.n	80017e6 <main+0xf2>
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	f640 2228 	movw	r2, #2600	; 0xa28
 8001888:	4293      	cmp	r3, r2
 800188a:	d9b6      	bls.n	80017fa <main+0x106>
	  htim3.Instance->CCR4 = 1500;
 800188c:	e7ab      	b.n	80017e6 <main+0xf2>
 800188e:	bf00      	nop
 8001890:	2000036c 	.word	0x2000036c
 8001894:	200002cc 	.word	0x200002cc
 8001898:	0800c7b8 	.word	0x0800c7b8
 800189c:	0800ce54 	.word	0x0800ce54
 80018a0:	0800c7cc 	.word	0x0800c7cc
 80018a4:	0800c7fc 	.word	0x0800c7fc
 80018a8:	0800c804 	.word	0x0800c804
 80018ac:	20000320 	.word	0x20000320
 80018b0:	200002c8 	.word	0x200002c8
 80018b4:	20000368 	.word	0x20000368
 80018b8:	20000000 	.word	0x20000000

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	; 0x50
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	2234      	movs	r2, #52	; 0x34
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f007 feb8 	bl	8009640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <SystemClock_Config+0xd4>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a29      	ldr	r2, [pc, #164]	; (8001990 <SystemClock_Config+0xd4>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <SystemClock_Config+0xd4>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018fc:	2300      	movs	r3, #0
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <SystemClock_Config+0xd8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001908:	4a22      	ldr	r2, [pc, #136]	; (8001994 <SystemClock_Config+0xd8>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <SystemClock_Config+0xd8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001924:	2310      	movs	r3, #16
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001928:	2302      	movs	r3, #2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192c:	2300      	movs	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001930:	2310      	movs	r3, #16
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001938:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800193a:	2304      	movs	r3, #4
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800193e:	2302      	movs	r3, #2
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001942:	2302      	movs	r3, #2
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4618      	mov	r0, r3
 800194c:	f006 f922 	bl	8007b94 <HAL_RCC_OscConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001956:	f000 f9f3 	bl	8001d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2302      	movs	r3, #2
 8001960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f005 fe40 	bl	80075fc <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001982:	f000 f9dd 	bl	8001d40 <Error_Handler>
  }
}
 8001986:	bf00      	nop
 8001988:	3750      	adds	r7, #80	; 0x50
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000

08001998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d6:	f004 fe7b 	bl	80066d0 <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f000 f9ae 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002cc 	.word	0x200002cc
 80019ec:	40005400 	.word	0x40005400
 80019f0:	00061a80 	.word	0x00061a80

080019f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_SPI2_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_SPI2_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a46:	f006 fb43 	bl	80080d0 <HAL_SPI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a50:	f000 f976 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000270 	.word	0x20000270
 8001a5c:	40003800 	.word	0x40003800

08001a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <MX_TIM1_Init+0x9c>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a84:	2253      	movs	r2, #83	; 0x53
 8001a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001aaa:	f006 fb9a 	bl	80081e2 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f000 f944 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001ac6:	f006 fe27 	bl	8008718 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ad0:	f000 f936 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001ae2:	f007 f9f1 	bl	8008ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aec:	f000 f928 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000036c 	.word	0x2000036c
 8001afc:	40010000 	.word	0x40010000

08001b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_TIM3_Init+0xe8>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b38:	2253      	movs	r2, #83	; 0x53
 8001b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b44:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b58:	f006 fb43 	bl	80081e2 <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b62:	f000 f8ed 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b70:	4619      	mov	r1, r3
 8001b72:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b74:	f006 fdd0 	bl	8008718 <HAL_TIM_ConfigClockSource>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b7e:	f000 f8df 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b82:	4818      	ldr	r0, [pc, #96]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001b84:	f006 fbe4 	bl	8008350 <HAL_TIM_PWM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b8e:	f000 f8d7 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001ba2:	f007 f991 	bl	8008ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001bac:	f000 f8c8 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb0:	2360      	movs	r3, #96	; 0x60
 8001bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001bc8:	f006 fce4 	bl	8008594 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001bd2:	f000 f8b5 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM3_Init+0xe4>)
 8001bd8:	f000 f9d8 	bl	8001f8c <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3738      	adds	r7, #56	; 0x38
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000320 	.word	0x20000320
 8001be8:	40000400 	.word	0x40000400

08001bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART2_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f007 f9cc 	bl	8008fc0 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f887 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200003b4 	.word	0x200003b4
 8001c3c:	40004400 	.word	0x40004400

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a2c      	ldr	r2, [pc, #176]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_GPIO_Init+0xd0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2120      	movs	r1, #32
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <MX_GPIO_Init+0xd4>)
 8001ccc:	f004 fccc 	bl	8006668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0xd8>)
 8001ce8:	f004 fb2a 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cec:	2320      	movs	r3, #32
 8001cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_GPIO_Init+0xd4>)
 8001d04:	f004 fb1c 	bl	8006340 <HAL_GPIO_Init>

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020800 	.word	0x40020800

08001d1c <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d24:	1d39      	adds	r1, r7, #4
 8001d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <__io_putchar+0x20>)
 8001d2e:	f007 f994 	bl	800905a <HAL_UART_Transmit>
return ch;
 8001d32:	687b      	ldr	r3, [r7, #4]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200003b4 	.word	0x200003b4

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f004 faa4 	bl	80062d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_I2C_MspInit+0x84>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dec:	2304      	movs	r3, #4
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <HAL_I2C_MspInit+0x8c>)
 8001df8:	f004 faa2 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400

08001e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <HAL_SPI_MspInit+0xe0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d15a      	bne.n	8001f04 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_SPI_MspInit+0xe4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4815      	ldr	r0, [pc, #84]	; (8001f14 <HAL_SPI_MspInit+0xe8>)
 8001ebe:	f004 fa3f 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <HAL_SPI_MspInit+0xe8>)
 8001ede:	f004 fa2f 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <HAL_SPI_MspInit+0xec>)
 8001f00:	f004 fa1e 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40003800 	.word	0x40003800
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_TIM_Base_MspInit+0x64>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f4a:	e012      	b.n	8001f72 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_TIM_Base_MspInit+0x6c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10d      	bne.n	8001f72 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_TIM_Base_MspInit+0x68>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40000400 	.word	0x40000400

08001f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_TIM_MspPostInit+0x68>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d11d      	bne.n	8001fea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_TIM_MspPostInit+0x70>)
 8001fe6:	f004 f9ab 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_UART_MspInit+0x84>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12b      	bne.n	800207a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_MspInit+0x88>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_UART_MspInit+0x88>)
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x88>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_UART_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_UART_MspInit+0x88>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_UART_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800205a:	230c      	movs	r3, #12
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206a:	2307      	movs	r3, #7
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_UART_MspInit+0x8c>)
 8002076:	f004 f963 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40004400 	.word	0x40004400
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020dc:	f004 f806 	bl	80060ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
	return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_kill>:

int _kill(int pid, int sig)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020fe:	f007 fa75 	bl	80095ec <__errno>
 8002102:	4603      	mov	r3, r0
 8002104:	2216      	movs	r2, #22
 8002106:	601a      	str	r2, [r3, #0]
	return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_exit>:

void _exit (int status)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ffe7 	bl	80020f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002126:	e7fe      	b.n	8002126 <_exit+0x12>

08002128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e00a      	b.n	8002150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213a:	f3af 8000 	nop.w
 800213e:	4601      	mov	r1, r0
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf0      	blt.n	800213a <_read+0x12>
	}

return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e009      	b.n	8002188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdcd 	bl	8001d1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf1      	blt.n	8002174 <_write+0x12>
	}
	return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_close>:

int _close(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return -1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	605a      	str	r2, [r3, #4]
	return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_isatty>:

int _isatty(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <_sbrk+0x5c>)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <_sbrk+0x60>)
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <_sbrk+0x64>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <_sbrk+0x68>)
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002234:	f007 f9da 	bl	80095ec <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20020000 	.word	0x20020000
 8002264:	00000400 	.word	0x00000400
 8002268:	2000020c 	.word	0x2000020c
 800226c:	20000428 	.word	0x20000428

08002270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <SystemInit+0x20>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <SystemInit+0x20>)
 800227c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	2200      	movs	r2, #0
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f004 f9de 	bl	8006668 <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f004 f9ce 	bl	8006668 <HAL_GPIO_WritePin>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f004 f824 	bl	8006340 <HAL_GPIO_Init>
}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f004 f80c 	bl	8006340 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <width+0x14>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000008 	.word	0x20000008

08002348 <height>:

uint16_t height(void)
{ return _height; }
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <height+0x14>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000000a 	.word	0x2000000a

08002360 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 800236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002372:	b21a      	sxth	r2, r3
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	b21b      	sxth	r3, r3
 800237a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	b21b      	sxth	r3, r3
 800238e:	4313      	orrs	r3, r2
 8002390:	b21b      	sxth	r3, r3
 8002392:	b29b      	uxth	r3, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80023aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	115b      	asrs	r3, r3, #5
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	b21b      	sxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	105b      	asrs	r3, r3, #1
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	b29b      	uxth	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	121b      	asrs	r3, r3, #8
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	10db      	asrs	r3, r3, #3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f023 0303 	bic.w	r3, r3, #3
 8002418:	b2db      	uxtb	r3, r3
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	b2db      	uxtb	r3, r3
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
 800244c:	460b      	mov	r3, r1
 800244e:	71bb      	strb	r3, [r7, #6]
 8002450:	4613      	mov	r3, r2
 8002452:	717b      	strb	r3, [r7, #5]
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b21b      	sxth	r3, r3
 800245a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800245e:	f023 0307 	bic.w	r3, r3, #7
 8002462:	b21a      	sxth	r2, r3
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	b21b      	sxth	r3, r3
 800246a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800246e:	b21b      	sxth	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	b21a      	sxth	r2, r3
 8002474:	797b      	ldrb	r3, [r7, #5]
 8002476:	08db      	lsrs	r3, r3, #3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	b21b      	sxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b21b      	sxth	r3, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af02      	add	r7, sp, #8
 8002494:	4603      	mov	r3, r0
 8002496:	460a      	mov	r2, r1
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	4613      	mov	r3, r2
 800249c:	80bb      	strh	r3, [r7, #4]
 800249e:	f107 020e 	add.w	r2, r7, #14
 80024a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80024a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	f001 fc7a 	bl	8003da8 <readGRAM>
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	460a      	mov	r2, r1
 80024c8:	80fb      	strh	r3, [r7, #6]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80bb      	strh	r3, [r7, #4]
 80024ce:	88ba      	ldrh	r2, [r7, #4]
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f973 	bl	80027c0 <writecmddata>
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	6039      	str	r1, [r7, #0]
 80024ec:	80fb      	strh	r3, [r7, #6]
 80024ee:	4613      	mov	r3, r2
 80024f0:	717b      	strb	r3, [r7, #5]
 80024f2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fab6 	bl	8002a6c <WriteCmdParamN>
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800250c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002510:	4811      	ldr	r0, [pc, #68]	; (8002558 <setReadDir+0x50>)
 8002512:	f7ff fedf 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	4810      	ldr	r0, [pc, #64]	; (800255c <setReadDir+0x54>)
 800251a:	f7ff fedb 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800251e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <setReadDir+0x50>)
 8002524:	f7ff fed6 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8002528:	2108      	movs	r1, #8
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <setReadDir+0x58>)
 800252c:	f7ff fed2 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8002530:	2120      	movs	r1, #32
 8002532:	480b      	ldr	r0, [pc, #44]	; (8002560 <setReadDir+0x58>)
 8002534:	f7ff fece 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8002538:	2110      	movs	r1, #16
 800253a:	4809      	ldr	r0, [pc, #36]	; (8002560 <setReadDir+0x58>)
 800253c:	f7ff feca 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8002540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002544:	4806      	ldr	r0, [pc, #24]	; (8002560 <setReadDir+0x58>)
 8002546:	f7ff fec5 	bl	80022d4 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800254a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800254e:	4802      	ldr	r0, [pc, #8]	; (8002558 <setReadDir+0x50>)
 8002550:	f7ff fec0 	bl	80022d4 <PIN_INPUT>
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40020000 	.word	0x40020000
 800255c:	40020800 	.word	0x40020800
 8002560:	40020400 	.word	0x40020400

08002564 <setWriteDir>:

void setWriteDir (void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8002568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256c:	4811      	ldr	r0, [pc, #68]	; (80025b4 <setWriteDir+0x50>)
 800256e:	f7ff fec7 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	4810      	ldr	r0, [pc, #64]	; (80025b8 <setWriteDir+0x54>)
 8002576:	f7ff fec3 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800257a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257e:	480d      	ldr	r0, [pc, #52]	; (80025b4 <setWriteDir+0x50>)
 8002580:	f7ff febe 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8002584:	2108      	movs	r1, #8
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <setWriteDir+0x58>)
 8002588:	f7ff feba 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 800258c:	2120      	movs	r1, #32
 800258e:	480b      	ldr	r0, [pc, #44]	; (80025bc <setWriteDir+0x58>)
 8002590:	f7ff feb6 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8002594:	2110      	movs	r1, #16
 8002596:	4809      	ldr	r0, [pc, #36]	; (80025bc <setWriteDir+0x58>)
 8002598:	f7ff feb2 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800259c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a0:	4806      	ldr	r0, [pc, #24]	; (80025bc <setWriteDir+0x58>)
 80025a2:	f7ff fead 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80025a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025aa:	4802      	ldr	r0, [pc, #8]	; (80025b4 <setWriteDir+0x50>)
 80025ac:	f7ff fea8 	bl	8002300 <PIN_OUTPUT>
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020400 	.word	0x40020400

080025c0 <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff08 	bl	80023e2 <color565_to_r>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff13 	bl	8002404 <color565_to_g>
 80025de:	4603      	mov	r3, r0
 80025e0:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff1e 	bl	8002426 <color565_to_b>
 80025ea:	4603      	mov	r3, r0
 80025ec:	737b      	strb	r3, [r7, #13]
    write8(r);
 80025ee:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <write24+0x1f4>)
 80025f0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <write24+0x1f8>)
 80025f8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	4b6f      	ldr	r3, [pc, #444]	; (80027bc <write24+0x1fc>)
 8002600:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	431a      	orrs	r2, r3
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	431a      	orrs	r2, r3
 8002622:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <write24+0x1f4>)
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	105b      	asrs	r3, r3, #1
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	431a      	orrs	r2, r3
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	431a      	orrs	r2, r3
 800264a:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <write24+0x1f8>)
 800264c:	619a      	str	r2, [r3, #24]
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <write24+0x1fc>)
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	6193      	str	r3, [r2, #24]
 800265a:	2102      	movs	r1, #2
 800265c:	4855      	ldr	r0, [pc, #340]	; (80027b4 <write24+0x1f4>)
 800265e:	f7ff fe19 	bl	8002294 <PIN_LOW>
 8002662:	2102      	movs	r1, #2
 8002664:	4853      	ldr	r0, [pc, #332]	; (80027b4 <write24+0x1f4>)
 8002666:	f7ff fe15 	bl	8002294 <PIN_LOW>
 800266a:	2102      	movs	r1, #2
 800266c:	4851      	ldr	r0, [pc, #324]	; (80027b4 <write24+0x1f4>)
 800266e:	f7ff fe11 	bl	8002294 <PIN_LOW>
 8002672:	2102      	movs	r1, #2
 8002674:	484f      	ldr	r0, [pc, #316]	; (80027b4 <write24+0x1f4>)
 8002676:	f7ff fe1d 	bl	80022b4 <PIN_HIGH>
 800267a:	2102      	movs	r1, #2
 800267c:	484d      	ldr	r0, [pc, #308]	; (80027b4 <write24+0x1f4>)
 800267e:	f7ff fe19 	bl	80022b4 <PIN_HIGH>
    write8(g);
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <write24+0x1f4>)
 8002684:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002688:	619a      	str	r2, [r3, #24]
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <write24+0x1f8>)
 800268c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <write24+0x1fc>)
 8002694:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002698:	619a      	str	r2, [r3, #24]
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80026a2:	7bbb      	ldrb	r3, [r7, #14]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	431a      	orrs	r2, r3
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	431a      	orrs	r2, r3
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <write24+0x1f4>)
 80026b8:	619a      	str	r2, [r3, #24]
 80026ba:	7bbb      	ldrb	r3, [r7, #14]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	105b      	asrs	r3, r3, #1
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	431a      	orrs	r2, r3
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	431a      	orrs	r2, r3
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <write24+0x1f8>)
 80026e0:	619a      	str	r2, [r3, #24]
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	4a35      	ldr	r2, [pc, #212]	; (80027bc <write24+0x1fc>)
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	6193      	str	r3, [r2, #24]
 80026ee:	2102      	movs	r1, #2
 80026f0:	4830      	ldr	r0, [pc, #192]	; (80027b4 <write24+0x1f4>)
 80026f2:	f7ff fdcf 	bl	8002294 <PIN_LOW>
 80026f6:	2102      	movs	r1, #2
 80026f8:	482e      	ldr	r0, [pc, #184]	; (80027b4 <write24+0x1f4>)
 80026fa:	f7ff fdcb 	bl	8002294 <PIN_LOW>
 80026fe:	2102      	movs	r1, #2
 8002700:	482c      	ldr	r0, [pc, #176]	; (80027b4 <write24+0x1f4>)
 8002702:	f7ff fdc7 	bl	8002294 <PIN_LOW>
 8002706:	2102      	movs	r1, #2
 8002708:	482a      	ldr	r0, [pc, #168]	; (80027b4 <write24+0x1f4>)
 800270a:	f7ff fdd3 	bl	80022b4 <PIN_HIGH>
 800270e:	2102      	movs	r1, #2
 8002710:	4828      	ldr	r0, [pc, #160]	; (80027b4 <write24+0x1f4>)
 8002712:	f7ff fdcf 	bl	80022b4 <PIN_HIGH>
    write8(b);
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <write24+0x1f4>)
 8002718:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <write24+0x1f8>)
 8002720:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002724:	619a      	str	r2, [r3, #24]
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <write24+0x1fc>)
 8002728:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800272c:	619a      	str	r2, [r3, #24]
 800272e:	7b7b      	ldrb	r3, [r7, #13]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002736:	7b7b      	ldrb	r3, [r7, #13]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	431a      	orrs	r2, r3
 8002740:	7b7b      	ldrb	r3, [r7, #13]
 8002742:	025b      	lsls	r3, r3, #9
 8002744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002748:	431a      	orrs	r2, r3
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <write24+0x1f4>)
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002756:	7b7b      	ldrb	r3, [r7, #13]
 8002758:	105b      	asrs	r3, r3, #1
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	431a      	orrs	r2, r3
 800276a:	7b7b      	ldrb	r3, [r7, #13]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	431a      	orrs	r2, r3
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <write24+0x1f8>)
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	7b7b      	ldrb	r3, [r7, #13]
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <write24+0x1fc>)
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	6193      	str	r3, [r2, #24]
 8002782:	2102      	movs	r1, #2
 8002784:	480b      	ldr	r0, [pc, #44]	; (80027b4 <write24+0x1f4>)
 8002786:	f7ff fd85 	bl	8002294 <PIN_LOW>
 800278a:	2102      	movs	r1, #2
 800278c:	4809      	ldr	r0, [pc, #36]	; (80027b4 <write24+0x1f4>)
 800278e:	f7ff fd81 	bl	8002294 <PIN_LOW>
 8002792:	2102      	movs	r1, #2
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <write24+0x1f4>)
 8002796:	f7ff fd7d 	bl	8002294 <PIN_LOW>
 800279a:	2102      	movs	r1, #2
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <write24+0x1f4>)
 800279e:	f7ff fd89 	bl	80022b4 <PIN_HIGH>
 80027a2:	2102      	movs	r1, #2
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <write24+0x1f4>)
 80027a6:	f7ff fd85 	bl	80022b4 <PIN_HIGH>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800

080027c0 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80027d0:	2101      	movs	r1, #1
 80027d2:	48a3      	ldr	r0, [pc, #652]	; (8002a60 <writecmddata+0x2a0>)
 80027d4:	f7ff fd5e 	bl	8002294 <PIN_LOW>
    WriteCmd(cmd);
 80027d8:	2110      	movs	r1, #16
 80027da:	48a2      	ldr	r0, [pc, #648]	; (8002a64 <writecmddata+0x2a4>)
 80027dc:	f7ff fd5a 	bl	8002294 <PIN_LOW>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	73bb      	strb	r3, [r7, #14]
 80027ec:	4b9d      	ldr	r3, [pc, #628]	; (8002a64 <writecmddata+0x2a4>)
 80027ee:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80027f2:	619a      	str	r2, [r3, #24]
 80027f4:	4b9a      	ldr	r3, [pc, #616]	; (8002a60 <writecmddata+0x2a0>)
 80027f6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80027fa:	619a      	str	r2, [r3, #24]
 80027fc:	4b9a      	ldr	r3, [pc, #616]	; (8002a68 <writecmddata+0x2a8>)
 80027fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	431a      	orrs	r2, r3
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	025b      	lsls	r3, r3, #9
 800281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281e:	431a      	orrs	r2, r3
 8002820:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <writecmddata+0x2a4>)
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	105b      	asrs	r3, r3, #1
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	431a      	orrs	r2, r3
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	431a      	orrs	r2, r3
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <writecmddata+0x2a0>)
 800284a:	619a      	str	r2, [r3, #24]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	019b      	lsls	r3, r3, #6
 8002850:	4a85      	ldr	r2, [pc, #532]	; (8002a68 <writecmddata+0x2a8>)
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	2102      	movs	r1, #2
 800285a:	4882      	ldr	r0, [pc, #520]	; (8002a64 <writecmddata+0x2a4>)
 800285c:	f7ff fd1a 	bl	8002294 <PIN_LOW>
 8002860:	2102      	movs	r1, #2
 8002862:	4880      	ldr	r0, [pc, #512]	; (8002a64 <writecmddata+0x2a4>)
 8002864:	f7ff fd16 	bl	8002294 <PIN_LOW>
 8002868:	2102      	movs	r1, #2
 800286a:	487e      	ldr	r0, [pc, #504]	; (8002a64 <writecmddata+0x2a4>)
 800286c:	f7ff fd12 	bl	8002294 <PIN_LOW>
 8002870:	2102      	movs	r1, #2
 8002872:	487c      	ldr	r0, [pc, #496]	; (8002a64 <writecmddata+0x2a4>)
 8002874:	f7ff fd1e 	bl	80022b4 <PIN_HIGH>
 8002878:	2102      	movs	r1, #2
 800287a:	487a      	ldr	r0, [pc, #488]	; (8002a64 <writecmddata+0x2a4>)
 800287c:	f7ff fd1a 	bl	80022b4 <PIN_HIGH>
 8002880:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <writecmddata+0x2a4>)
 8002882:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002886:	619a      	str	r2, [r3, #24]
 8002888:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <writecmddata+0x2a0>)
 800288a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800288e:	619a      	str	r2, [r3, #24]
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <writecmddata+0x2a8>)
 8002892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002896:	619a      	str	r2, [r3, #24]
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	431a      	orrs	r2, r3
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b2:	431a      	orrs	r2, r3
 80028b4:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <writecmddata+0x2a4>)
 80028b6:	619a      	str	r2, [r3, #24]
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80028c0:	7bbb      	ldrb	r3, [r7, #14]
 80028c2:	105b      	asrs	r3, r3, #1
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	431a      	orrs	r2, r3
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	431a      	orrs	r2, r3
 80028dc:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <writecmddata+0x2a0>)
 80028de:	619a      	str	r2, [r3, #24]
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	019b      	lsls	r3, r3, #6
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <writecmddata+0x2a8>)
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	2102      	movs	r1, #2
 80028ee:	485d      	ldr	r0, [pc, #372]	; (8002a64 <writecmddata+0x2a4>)
 80028f0:	f7ff fcd0 	bl	8002294 <PIN_LOW>
 80028f4:	2102      	movs	r1, #2
 80028f6:	485b      	ldr	r0, [pc, #364]	; (8002a64 <writecmddata+0x2a4>)
 80028f8:	f7ff fccc 	bl	8002294 <PIN_LOW>
 80028fc:	2102      	movs	r1, #2
 80028fe:	4859      	ldr	r0, [pc, #356]	; (8002a64 <writecmddata+0x2a4>)
 8002900:	f7ff fcc8 	bl	8002294 <PIN_LOW>
 8002904:	2102      	movs	r1, #2
 8002906:	4857      	ldr	r0, [pc, #348]	; (8002a64 <writecmddata+0x2a4>)
 8002908:	f7ff fcd4 	bl	80022b4 <PIN_HIGH>
 800290c:	2102      	movs	r1, #2
 800290e:	4855      	ldr	r0, [pc, #340]	; (8002a64 <writecmddata+0x2a4>)
 8002910:	f7ff fcd0 	bl	80022b4 <PIN_HIGH>
 8002914:	2110      	movs	r1, #16
 8002916:	4853      	ldr	r0, [pc, #332]	; (8002a64 <writecmddata+0x2a4>)
 8002918:	f7ff fccc 	bl	80022b4 <PIN_HIGH>
    WriteData(dat);
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	737b      	strb	r3, [r7, #13]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	733b      	strb	r3, [r7, #12]
 8002928:	4b4e      	ldr	r3, [pc, #312]	; (8002a64 <writecmddata+0x2a4>)
 800292a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <writecmddata+0x2a0>)
 8002932:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <writecmddata+0x2a8>)
 800293a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800293e:	619a      	str	r2, [r3, #24]
 8002940:	7b7b      	ldrb	r3, [r7, #13]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002948:	7b7b      	ldrb	r3, [r7, #13]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	431a      	orrs	r2, r3
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	025b      	lsls	r3, r3, #9
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	431a      	orrs	r2, r3
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <writecmddata+0x2a4>)
 800295e:	619a      	str	r2, [r3, #24]
 8002960:	7b7b      	ldrb	r3, [r7, #13]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	105b      	asrs	r3, r3, #1
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	431a      	orrs	r2, r3
 800297c:	7b7b      	ldrb	r3, [r7, #13]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	431a      	orrs	r2, r3
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <writecmddata+0x2a0>)
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	7b7b      	ldrb	r3, [r7, #13]
 800298a:	019b      	lsls	r3, r3, #6
 800298c:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <writecmddata+0x2a8>)
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	2102      	movs	r1, #2
 8002996:	4833      	ldr	r0, [pc, #204]	; (8002a64 <writecmddata+0x2a4>)
 8002998:	f7ff fc7c 	bl	8002294 <PIN_LOW>
 800299c:	2102      	movs	r1, #2
 800299e:	4831      	ldr	r0, [pc, #196]	; (8002a64 <writecmddata+0x2a4>)
 80029a0:	f7ff fc78 	bl	8002294 <PIN_LOW>
 80029a4:	2102      	movs	r1, #2
 80029a6:	482f      	ldr	r0, [pc, #188]	; (8002a64 <writecmddata+0x2a4>)
 80029a8:	f7ff fc74 	bl	8002294 <PIN_LOW>
 80029ac:	2102      	movs	r1, #2
 80029ae:	482d      	ldr	r0, [pc, #180]	; (8002a64 <writecmddata+0x2a4>)
 80029b0:	f7ff fc80 	bl	80022b4 <PIN_HIGH>
 80029b4:	2102      	movs	r1, #2
 80029b6:	482b      	ldr	r0, [pc, #172]	; (8002a64 <writecmddata+0x2a4>)
 80029b8:	f7ff fc7c 	bl	80022b4 <PIN_HIGH>
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <writecmddata+0x2a4>)
 80029be:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <writecmddata+0x2a0>)
 80029c6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80029ca:	619a      	str	r2, [r3, #24]
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <writecmddata+0x2a8>)
 80029ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029d2:	619a      	str	r2, [r3, #24]
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80029dc:	7b3b      	ldrb	r3, [r7, #12]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	431a      	orrs	r2, r3
 80029e6:	7b3b      	ldrb	r3, [r7, #12]
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ee:	431a      	orrs	r2, r3
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <writecmddata+0x2a4>)
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	7b3b      	ldrb	r3, [r7, #12]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80029fc:	7b3b      	ldrb	r3, [r7, #12]
 80029fe:	105b      	asrs	r3, r3, #1
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	7b3b      	ldrb	r3, [r7, #12]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	7b3b      	ldrb	r3, [r7, #12]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <writecmddata+0x2a0>)
 8002a1a:	619a      	str	r2, [r3, #24]
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <writecmddata+0x2a8>)
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	2102      	movs	r1, #2
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <writecmddata+0x2a4>)
 8002a2c:	f7ff fc32 	bl	8002294 <PIN_LOW>
 8002a30:	2102      	movs	r1, #2
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <writecmddata+0x2a4>)
 8002a34:	f7ff fc2e 	bl	8002294 <PIN_LOW>
 8002a38:	2102      	movs	r1, #2
 8002a3a:	480a      	ldr	r0, [pc, #40]	; (8002a64 <writecmddata+0x2a4>)
 8002a3c:	f7ff fc2a 	bl	8002294 <PIN_LOW>
 8002a40:	2102      	movs	r1, #2
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <writecmddata+0x2a4>)
 8002a44:	f7ff fc36 	bl	80022b4 <PIN_HIGH>
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4806      	ldr	r0, [pc, #24]	; (8002a64 <writecmddata+0x2a4>)
 8002a4c:	f7ff fc32 	bl	80022b4 <PIN_HIGH>
    CS_IDLE;
 8002a50:	2101      	movs	r1, #1
 8002a52:	4803      	ldr	r0, [pc, #12]	; (8002a60 <writecmddata+0x2a0>)
 8002a54:	f7ff fc2e 	bl	80022b4 <PIN_HIGH>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020800 	.word	0x40020800

08002a6c <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	603a      	str	r2, [r7, #0]
 8002a76:	80fb      	strh	r3, [r7, #6]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4853      	ldr	r0, [pc, #332]	; (8002bcc <WriteCmdParamN+0x160>)
 8002a80:	f7ff fc08 	bl	8002294 <PIN_LOW>
    WriteCmd(cmd);
 8002a84:	2110      	movs	r1, #16
 8002a86:	4852      	ldr	r0, [pc, #328]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002a88:	f7ff fc04 	bl	8002294 <PIN_LOW>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	73bb      	strb	r3, [r7, #14]
 8002a98:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002a9a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <WriteCmdParamN+0x160>)
 8002aa2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <WriteCmdParamN+0x168>)
 8002aaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	025b      	lsls	r3, r3, #9
 8002ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aca:	431a      	orrs	r2, r3
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002ace:	619a      	str	r2, [r3, #24]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	105b      	asrs	r3, r3, #1
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	431a      	orrs	r2, r3
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	431a      	orrs	r2, r3
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <WriteCmdParamN+0x160>)
 8002af6:	619a      	str	r2, [r3, #24]
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <WriteCmdParamN+0x168>)
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	2102      	movs	r1, #2
 8002b06:	4832      	ldr	r0, [pc, #200]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b08:	f7ff fbc4 	bl	8002294 <PIN_LOW>
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4830      	ldr	r0, [pc, #192]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b10:	f7ff fbc0 	bl	8002294 <PIN_LOW>
 8002b14:	2102      	movs	r1, #2
 8002b16:	482e      	ldr	r0, [pc, #184]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b18:	f7ff fbbc 	bl	8002294 <PIN_LOW>
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	482c      	ldr	r0, [pc, #176]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b20:	f7ff fbc8 	bl	80022b4 <PIN_HIGH>
 8002b24:	2102      	movs	r1, #2
 8002b26:	482a      	ldr	r0, [pc, #168]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b28:	f7ff fbc4 	bl	80022b4 <PIN_HIGH>
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b2e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <WriteCmdParamN+0x160>)
 8002b36:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002b3a:	619a      	str	r2, [r3, #24]
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <WriteCmdParamN+0x168>)
 8002b3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b42:	619a      	str	r2, [r3, #24]
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	431a      	orrs	r2, r3
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	025b      	lsls	r3, r3, #9
 8002b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b62:	619a      	str	r2, [r3, #24]
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
 8002b6e:	105b      	asrs	r3, r3, #1
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	431a      	orrs	r2, r3
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <WriteCmdParamN+0x160>)
 8002b8a:	619a      	str	r2, [r3, #24]
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <WriteCmdParamN+0x168>)
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	2102      	movs	r1, #2
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002b9c:	f7ff fb7a 	bl	8002294 <PIN_LOW>
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002ba4:	f7ff fb76 	bl	8002294 <PIN_LOW>
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002bac:	f7ff fb72 	bl	8002294 <PIN_LOW>
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002bb4:	f7ff fb7e 	bl	80022b4 <PIN_HIGH>
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002bbc:	f7ff fb7a 	bl	80022b4 <PIN_HIGH>
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <WriteCmdParamN+0x164>)
 8002bc4:	f7ff fb76 	bl	80022b4 <PIN_HIGH>
    while (N-- > 0) {
 8002bc8:	e104      	b.n	8002dd4 <WriteCmdParamN+0x368>
 8002bca:	bf00      	nop
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	603a      	str	r2, [r7, #0]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002be4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	4b84      	ldr	r3, [pc, #528]	; (8002dfc <WriteCmdParamN+0x390>)
 8002bec:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <WriteCmdParamN+0x394>)
 8002bf4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	7b7b      	ldrb	r3, [r7, #13]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002c02:	7b7b      	ldrb	r3, [r7, #13]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	7b7b      	ldrb	r3, [r7, #13]
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c14:	431a      	orrs	r2, r3
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c18:	619a      	str	r2, [r3, #24]
 8002c1a:	7b7b      	ldrb	r3, [r7, #13]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002c22:	7b7b      	ldrb	r3, [r7, #13]
 8002c24:	105b      	asrs	r3, r3, #1
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	7b7b      	ldrb	r3, [r7, #13]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	431a      	orrs	r2, r3
 8002c36:	7b7b      	ldrb	r3, [r7, #13]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <WriteCmdParamN+0x390>)
 8002c40:	619a      	str	r2, [r3, #24]
 8002c42:	7b7b      	ldrb	r3, [r7, #13]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <WriteCmdParamN+0x394>)
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	6193      	str	r3, [r2, #24]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4869      	ldr	r0, [pc, #420]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c52:	f7ff fb1f 	bl	8002294 <PIN_LOW>
 8002c56:	2102      	movs	r1, #2
 8002c58:	4867      	ldr	r0, [pc, #412]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c5a:	f7ff fb1b 	bl	8002294 <PIN_LOW>
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4865      	ldr	r0, [pc, #404]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c62:	f7ff fb17 	bl	8002294 <PIN_LOW>
 8002c66:	2102      	movs	r1, #2
 8002c68:	4863      	ldr	r0, [pc, #396]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c6a:	f7ff fb23 	bl	80022b4 <PIN_HIGH>
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4861      	ldr	r0, [pc, #388]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c72:	f7ff fb1f 	bl	80022b4 <PIN_HIGH>
        if (N && is8347) {
 8002c76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80aa 	beq.w	8002dd4 <WriteCmdParamN+0x368>
 8002c80:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <WriteCmdParamN+0x398>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a5 	beq.w	8002dd4 <WriteCmdParamN+0x368>
            cmd++;
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8002c90:	2110      	movs	r1, #16
 8002c92:	4859      	ldr	r0, [pc, #356]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002c94:	f7ff fafe 	bl	8002294 <PIN_LOW>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	733b      	strb	r3, [r7, #12]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	72fb      	strb	r3, [r7, #11]
 8002ca4:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002ca6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <WriteCmdParamN+0x390>)
 8002cae:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	4b52      	ldr	r3, [pc, #328]	; (8002e00 <WriteCmdParamN+0x394>)
 8002cb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cba:	619a      	str	r2, [r3, #24]
 8002cbc:	7b3b      	ldrb	r3, [r7, #12]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002cc4:	7b3b      	ldrb	r3, [r7, #12]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	7b3b      	ldrb	r3, [r7, #12]
 8002cd0:	025b      	lsls	r3, r3, #9
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	7b3b      	ldrb	r3, [r7, #12]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002ce4:	7b3b      	ldrb	r3, [r7, #12]
 8002ce6:	105b      	asrs	r3, r3, #1
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	7b3b      	ldrb	r3, [r7, #12]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	7b3b      	ldrb	r3, [r7, #12]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <WriteCmdParamN+0x390>)
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	7b3b      	ldrb	r3, [r7, #12]
 8002d06:	019b      	lsls	r3, r3, #6
 8002d08:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <WriteCmdParamN+0x394>)
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	2102      	movs	r1, #2
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d14:	f7ff fabe 	bl	8002294 <PIN_LOW>
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4837      	ldr	r0, [pc, #220]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d1c:	f7ff faba 	bl	8002294 <PIN_LOW>
 8002d20:	2102      	movs	r1, #2
 8002d22:	4835      	ldr	r0, [pc, #212]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d24:	f7ff fab6 	bl	8002294 <PIN_LOW>
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4833      	ldr	r0, [pc, #204]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d2c:	f7ff fac2 	bl	80022b4 <PIN_HIGH>
 8002d30:	2102      	movs	r1, #2
 8002d32:	4831      	ldr	r0, [pc, #196]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d34:	f7ff fabe 	bl	80022b4 <PIN_HIGH>
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d3a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002d3e:	619a      	str	r2, [r3, #24]
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <WriteCmdParamN+0x390>)
 8002d42:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <WriteCmdParamN+0x394>)
 8002d4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d4e:	619a      	str	r2, [r3, #24]
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	431a      	orrs	r2, r3
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002d6e:	619a      	str	r2, [r3, #24]
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	105b      	asrs	r3, r3, #1
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	431a      	orrs	r2, r3
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <WriteCmdParamN+0x390>)
 8002d96:	619a      	str	r2, [r3, #24]
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	019b      	lsls	r3, r3, #6
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <WriteCmdParamN+0x394>)
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	2102      	movs	r1, #2
 8002da6:	4814      	ldr	r0, [pc, #80]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002da8:	f7ff fa74 	bl	8002294 <PIN_LOW>
 8002dac:	2102      	movs	r1, #2
 8002dae:	4812      	ldr	r0, [pc, #72]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002db0:	f7ff fa70 	bl	8002294 <PIN_LOW>
 8002db4:	2102      	movs	r1, #2
 8002db6:	4810      	ldr	r0, [pc, #64]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002db8:	f7ff fa6c 	bl	8002294 <PIN_LOW>
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	480e      	ldr	r0, [pc, #56]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002dc0:	f7ff fa78 	bl	80022b4 <PIN_HIGH>
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	480c      	ldr	r0, [pc, #48]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002dc8:	f7ff fa74 	bl	80022b4 <PIN_HIGH>
 8002dcc:	2110      	movs	r1, #16
 8002dce:	480a      	ldr	r0, [pc, #40]	; (8002df8 <WriteCmdParamN+0x38c>)
 8002dd0:	f7ff fa70 	bl	80022b4 <PIN_HIGH>
    while (N-- > 0) {
 8002dd4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	717a      	strb	r2, [r7, #5]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f73f aef9 	bgt.w	8002bd8 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 8002de6:	2101      	movs	r1, #1
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <WriteCmdParamN+0x390>)
 8002dea:	f7ff fa63 	bl	80022b4 <PIN_HIGH>
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40020800 	.word	0x40020800
 8002e04:	20000211 	.word	0x20000211

08002e08 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	71fb      	strb	r3, [r7, #7]
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71bb      	strb	r3, [r7, #6]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	717b      	strb	r3, [r7, #5]
 8002e22:	4613      	mov	r3, r2
 8002e24:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8002e26:	79bb      	ldrb	r3, [r7, #6]
 8002e28:	733b      	strb	r3, [r7, #12]
 8002e2a:	797b      	ldrb	r3, [r7, #5]
 8002e2c:	737b      	strb	r3, [r7, #13]
 8002e2e:	793b      	ldrb	r3, [r7, #4]
 8002e30:	73bb      	strb	r3, [r7, #14]
 8002e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e36:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f107 020c 	add.w	r2, r7, #12
 8002e40:	2104      	movs	r1, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe12 	bl	8002a6c <WriteCmdParamN>
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8002e60:	e046      	b.n	8002ef0 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	627a      	str	r2, [r7, #36]	; 0x24
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	627a      	str	r2, [r7, #36]	; 0x24
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8002e7a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e80:	d108      	bne.n	8002e94 <init_table+0x44>
        {
            delay(len);
 8002e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 f82a 	bl	8005ee0 <delay>
            len = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e024      	b.n	8002ede <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e9a:	e010      	b.n	8002ebe <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ea2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002ea6:	7819      	ldrb	r1, [r3, #0]
 8002ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eac:	4413      	add	r3, r2
 8002eae:	460a      	mov	r2, r1
 8002eb0:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ebe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3e8      	bcc.n	8002e9c <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8002eca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002ed4:	f107 0208 	add.w	r2, r7, #8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fdc7 	bl	8002a6c <WriteCmdParamN>
        }
        size -= len + 2;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b02      	subs	r3, #2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002ef0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dcb4      	bgt.n	8002e62 <init_table+0x12>
    }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002f12:	e01d      	b.n	8002f50 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	60fa      	str	r2, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	60fa      	str	r2, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d104      	bne.n	8002f3c <init_table16+0x3a>
            delay(d);
 8002f32:	893b      	ldrh	r3, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 ffd3 	bl	8005ee0 <delay>
 8002f3a:	e005      	b.n	8002f48 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fc3c 	bl	80027c0 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8002f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	dcdd      	bgt.n	8002f14 <init_table16+0x12>
    }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <reset>:


void reset(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
    done_reset = 1;
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <reset+0x88>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8002f6e:	f7ff faf9 	bl	8002564 <setWriteDir>
    CTL_INIT();
 8002f72:	2101      	movs	r1, #1
 8002f74:	481e      	ldr	r0, [pc, #120]	; (8002ff0 <reset+0x8c>)
 8002f76:	f7ff f9c3 	bl	8002300 <PIN_OUTPUT>
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	481c      	ldr	r0, [pc, #112]	; (8002ff0 <reset+0x8c>)
 8002f7e:	f7ff f9bf 	bl	8002300 <PIN_OUTPUT>
 8002f82:	2110      	movs	r1, #16
 8002f84:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <reset+0x8c>)
 8002f86:	f7ff f9bb 	bl	8002300 <PIN_OUTPUT>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4819      	ldr	r0, [pc, #100]	; (8002ff4 <reset+0x90>)
 8002f8e:	f7ff f9b7 	bl	8002300 <PIN_OUTPUT>
 8002f92:	2102      	movs	r1, #2
 8002f94:	4818      	ldr	r0, [pc, #96]	; (8002ff8 <reset+0x94>)
 8002f96:	f7ff f9b3 	bl	8002300 <PIN_OUTPUT>
    CS_IDLE;
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4815      	ldr	r0, [pc, #84]	; (8002ff4 <reset+0x90>)
 8002f9e:	f7ff f989 	bl	80022b4 <PIN_HIGH>
    RD_IDLE;
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <reset+0x8c>)
 8002fa6:	f7ff f985 	bl	80022b4 <PIN_HIGH>
    WR_IDLE;
 8002faa:	2102      	movs	r1, #2
 8002fac:	4810      	ldr	r0, [pc, #64]	; (8002ff0 <reset+0x8c>)
 8002fae:	f7ff f981 	bl	80022b4 <PIN_HIGH>
    RESET_IDLE;
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <reset+0x94>)
 8002fb6:	f7ff f97d 	bl	80022b4 <PIN_HIGH>
    delay(50);
 8002fba:	2032      	movs	r0, #50	; 0x32
 8002fbc:	f002 ff90 	bl	8005ee0 <delay>
    RESET_ACTIVE;
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <reset+0x94>)
 8002fc4:	f7ff f966 	bl	8002294 <PIN_LOW>
    delay(100);
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	f002 ff89 	bl	8005ee0 <delay>
    RESET_IDLE;
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <reset+0x94>)
 8002fd2:	f7ff f96f 	bl	80022b4 <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fda:	f002 ff81 	bl	8005ee0 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002fde:	2100      	movs	r1, #0
 8002fe0:	20b0      	movs	r0, #176	; 0xb0
 8002fe2:	f7ff fa6c 	bl	80024be <WriteCmdData>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000210 	.word	0x20000210
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800

08002ffc <read16bits>:


static uint16_t read16bits(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8003002:	2101      	movs	r1, #1
 8003004:	4873      	ldr	r0, [pc, #460]	; (80031d4 <read16bits+0x1d8>)
 8003006:	f7ff f955 	bl	80022b4 <PIN_HIGH>
 800300a:	2101      	movs	r1, #1
 800300c:	4871      	ldr	r0, [pc, #452]	; (80031d4 <read16bits+0x1d8>)
 800300e:	f7ff f941 	bl	8002294 <PIN_LOW>
 8003012:	2101      	movs	r1, #1
 8003014:	486f      	ldr	r0, [pc, #444]	; (80031d4 <read16bits+0x1d8>)
 8003016:	f7ff f93d 	bl	8002294 <PIN_LOW>
 800301a:	2101      	movs	r1, #1
 800301c:	486d      	ldr	r0, [pc, #436]	; (80031d4 <read16bits+0x1d8>)
 800301e:	f7ff f939 	bl	8002294 <PIN_LOW>
 8003022:	2101      	movs	r1, #1
 8003024:	486b      	ldr	r0, [pc, #428]	; (80031d4 <read16bits+0x1d8>)
 8003026:	f7ff f935 	bl	8002294 <PIN_LOW>
 800302a:	2101      	movs	r1, #1
 800302c:	4869      	ldr	r0, [pc, #420]	; (80031d4 <read16bits+0x1d8>)
 800302e:	f7ff f931 	bl	8002294 <PIN_LOW>
 8003032:	2101      	movs	r1, #1
 8003034:	4867      	ldr	r0, [pc, #412]	; (80031d4 <read16bits+0x1d8>)
 8003036:	f7ff f92d 	bl	8002294 <PIN_LOW>
 800303a:	2101      	movs	r1, #1
 800303c:	4865      	ldr	r0, [pc, #404]	; (80031d4 <read16bits+0x1d8>)
 800303e:	f7ff f929 	bl	8002294 <PIN_LOW>
 8003042:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <read16bits+0x1d8>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	b29b      	uxth	r3, r3
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <read16bits+0x1dc>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	b29b      	uxth	r3, r3
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	b29b      	uxth	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b29a      	uxth	r2, r3
 8003062:	4b5d      	ldr	r3, [pc, #372]	; (80031d8 <read16bits+0x1dc>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	b29b      	uxth	r3, r3
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	b29b      	uxth	r3, r3
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	b29b      	uxth	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <read16bits+0x1dc>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	b29b      	uxth	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <read16bits+0x1dc>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	b29b      	uxth	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <read16bits+0x1d8>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <read16bits+0x1e0>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <read16bits+0x1d8>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
 80030ce:	2101      	movs	r1, #1
 80030d0:	4840      	ldr	r0, [pc, #256]	; (80031d4 <read16bits+0x1d8>)
 80030d2:	f7ff f8ef 	bl	80022b4 <PIN_HIGH>
 80030d6:	2101      	movs	r1, #1
 80030d8:	483e      	ldr	r0, [pc, #248]	; (80031d4 <read16bits+0x1d8>)
 80030da:	f7ff f8eb 	bl	80022b4 <PIN_HIGH>
    READ_8(lo);
 80030de:	2101      	movs	r1, #1
 80030e0:	483c      	ldr	r0, [pc, #240]	; (80031d4 <read16bits+0x1d8>)
 80030e2:	f7ff f8e7 	bl	80022b4 <PIN_HIGH>
 80030e6:	2101      	movs	r1, #1
 80030e8:	483a      	ldr	r0, [pc, #232]	; (80031d4 <read16bits+0x1d8>)
 80030ea:	f7ff f8d3 	bl	8002294 <PIN_LOW>
 80030ee:	2101      	movs	r1, #1
 80030f0:	4838      	ldr	r0, [pc, #224]	; (80031d4 <read16bits+0x1d8>)
 80030f2:	f7ff f8cf 	bl	8002294 <PIN_LOW>
 80030f6:	2101      	movs	r1, #1
 80030f8:	4836      	ldr	r0, [pc, #216]	; (80031d4 <read16bits+0x1d8>)
 80030fa:	f7ff f8cb 	bl	8002294 <PIN_LOW>
 80030fe:	2101      	movs	r1, #1
 8003100:	4834      	ldr	r0, [pc, #208]	; (80031d4 <read16bits+0x1d8>)
 8003102:	f7ff f8c7 	bl	8002294 <PIN_LOW>
 8003106:	2101      	movs	r1, #1
 8003108:	4832      	ldr	r0, [pc, #200]	; (80031d4 <read16bits+0x1d8>)
 800310a:	f7ff f8c3 	bl	8002294 <PIN_LOW>
 800310e:	2101      	movs	r1, #1
 8003110:	4830      	ldr	r0, [pc, #192]	; (80031d4 <read16bits+0x1d8>)
 8003112:	f7ff f8bf 	bl	8002294 <PIN_LOW>
 8003116:	2101      	movs	r1, #1
 8003118:	482e      	ldr	r0, [pc, #184]	; (80031d4 <read16bits+0x1d8>)
 800311a:	f7ff f8bb 	bl	8002294 <PIN_LOW>
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <read16bits+0x1d8>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <read16bits+0x1dc>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <read16bits+0x1dc>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <read16bits+0x1dc>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <read16bits+0x1dc>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4313      	orrs	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <read16bits+0x1d8>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4313      	orrs	r3, r2
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <read16bits+0x1e0>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4313      	orrs	r3, r2
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <read16bits+0x1d8>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	0a5b      	lsrs	r3, r3, #9
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	717b      	strb	r3, [r7, #5]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4809      	ldr	r0, [pc, #36]	; (80031d4 <read16bits+0x1d8>)
 80031ae:	f7ff f881 	bl	80022b4 <PIN_HIGH>
 80031b2:	2101      	movs	r1, #1
 80031b4:	4807      	ldr	r0, [pc, #28]	; (80031d4 <read16bits+0x1d8>)
 80031b6:	f7ff f87d 	bl	80022b4 <PIN_HIGH>
    return (ret << 8) | lo;
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	b21a      	sxth	r2, r3
 80031c0:	797b      	ldrb	r3, [r7, #5]
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	b29b      	uxth	r3, r3
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40020000 	.word	0x40020000
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020800 	.word	0x40020800

080031e0 <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	460a      	mov	r2, r1
 80031ea:	80fb      	strh	r3, [r7, #6]
 80031ec:	4613      	mov	r3, r2
 80031ee:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80031f0:	4b65      	ldr	r3, [pc, #404]	; (8003388 <readReg+0x1a8>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <readReg+0x1c>
        reset();
 80031f8:	f7ff feb4 	bl	8002f64 <reset>
    CS_ACTIVE;
 80031fc:	2101      	movs	r1, #1
 80031fe:	4863      	ldr	r0, [pc, #396]	; (800338c <readReg+0x1ac>)
 8003200:	f7ff f848 	bl	8002294 <PIN_LOW>
    WriteCmd(reg);
 8003204:	2110      	movs	r1, #16
 8003206:	4862      	ldr	r0, [pc, #392]	; (8003390 <readReg+0x1b0>)
 8003208:	f7ff f844 	bl	8002294 <PIN_LOW>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	73bb      	strb	r3, [r7, #14]
 8003218:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <readReg+0x1b0>)
 800321a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800321e:	619a      	str	r2, [r3, #24]
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <readReg+0x1ac>)
 8003222:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003226:	619a      	str	r2, [r3, #24]
 8003228:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <readReg+0x1b4>)
 800322a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	431a      	orrs	r2, r3
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	025b      	lsls	r3, r3, #9
 8003246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324a:	431a      	orrs	r2, r3
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <readReg+0x1b0>)
 800324e:	619a      	str	r2, [r3, #24]
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	105b      	asrs	r3, r3, #1
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	431a      	orrs	r2, r3
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	431a      	orrs	r2, r3
 8003274:	4b45      	ldr	r3, [pc, #276]	; (800338c <readReg+0x1ac>)
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	019b      	lsls	r3, r3, #6
 800327c:	4a45      	ldr	r2, [pc, #276]	; (8003394 <readReg+0x1b4>)
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	2102      	movs	r1, #2
 8003286:	4842      	ldr	r0, [pc, #264]	; (8003390 <readReg+0x1b0>)
 8003288:	f7ff f804 	bl	8002294 <PIN_LOW>
 800328c:	2102      	movs	r1, #2
 800328e:	4840      	ldr	r0, [pc, #256]	; (8003390 <readReg+0x1b0>)
 8003290:	f7ff f800 	bl	8002294 <PIN_LOW>
 8003294:	2102      	movs	r1, #2
 8003296:	483e      	ldr	r0, [pc, #248]	; (8003390 <readReg+0x1b0>)
 8003298:	f7fe fffc 	bl	8002294 <PIN_LOW>
 800329c:	2102      	movs	r1, #2
 800329e:	483c      	ldr	r0, [pc, #240]	; (8003390 <readReg+0x1b0>)
 80032a0:	f7ff f808 	bl	80022b4 <PIN_HIGH>
 80032a4:	2102      	movs	r1, #2
 80032a6:	483a      	ldr	r0, [pc, #232]	; (8003390 <readReg+0x1b0>)
 80032a8:	f7ff f804 	bl	80022b4 <PIN_HIGH>
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <readReg+0x1b0>)
 80032ae:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <readReg+0x1ac>)
 80032b6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <readReg+0x1b4>)
 80032be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032c2:	619a      	str	r2, [r3, #24]
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	431a      	orrs	r2, r3
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	025b      	lsls	r3, r3, #9
 80032da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032de:	431a      	orrs	r2, r3
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <readReg+0x1b0>)
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	7bbb      	ldrb	r3, [r7, #14]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	105b      	asrs	r3, r3, #1
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	431a      	orrs	r2, r3
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	431a      	orrs	r2, r3
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	431a      	orrs	r2, r3
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <readReg+0x1ac>)
 800330a:	619a      	str	r2, [r3, #24]
 800330c:	7bbb      	ldrb	r3, [r7, #14]
 800330e:	019b      	lsls	r3, r3, #6
 8003310:	4a20      	ldr	r2, [pc, #128]	; (8003394 <readReg+0x1b4>)
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	2102      	movs	r1, #2
 800331a:	481d      	ldr	r0, [pc, #116]	; (8003390 <readReg+0x1b0>)
 800331c:	f7fe ffba 	bl	8002294 <PIN_LOW>
 8003320:	2102      	movs	r1, #2
 8003322:	481b      	ldr	r0, [pc, #108]	; (8003390 <readReg+0x1b0>)
 8003324:	f7fe ffb6 	bl	8002294 <PIN_LOW>
 8003328:	2102      	movs	r1, #2
 800332a:	4819      	ldr	r0, [pc, #100]	; (8003390 <readReg+0x1b0>)
 800332c:	f7fe ffb2 	bl	8002294 <PIN_LOW>
 8003330:	2102      	movs	r1, #2
 8003332:	4817      	ldr	r0, [pc, #92]	; (8003390 <readReg+0x1b0>)
 8003334:	f7fe ffbe 	bl	80022b4 <PIN_HIGH>
 8003338:	2102      	movs	r1, #2
 800333a:	4815      	ldr	r0, [pc, #84]	; (8003390 <readReg+0x1b0>)
 800333c:	f7fe ffba 	bl	80022b4 <PIN_HIGH>
 8003340:	2110      	movs	r1, #16
 8003342:	4813      	ldr	r0, [pc, #76]	; (8003390 <readReg+0x1b0>)
 8003344:	f7fe ffb6 	bl	80022b4 <PIN_HIGH>
    setReadDir();
 8003348:	f7ff f8de 	bl	8002508 <setReadDir>
    delay(1);    //1us should be adequate
 800334c:	2001      	movs	r0, #1
 800334e:	f002 fdc7 	bl	8005ee0 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8003352:	f7ff fe53 	bl	8002ffc <read16bits>
 8003356:	4603      	mov	r3, r0
 8003358:	81bb      	strh	r3, [r7, #12]
 800335a:	797b      	ldrb	r3, [r7, #5]
 800335c:	3b01      	subs	r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	717b      	strb	r3, [r7, #5]
 8003362:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003366:	2b00      	cmp	r3, #0
 8003368:	daf3      	bge.n	8003352 <readReg+0x172>
    RD_IDLE;
 800336a:	2101      	movs	r1, #1
 800336c:	4808      	ldr	r0, [pc, #32]	; (8003390 <readReg+0x1b0>)
 800336e:	f7fe ffa1 	bl	80022b4 <PIN_HIGH>
    CS_IDLE;
 8003372:	2101      	movs	r1, #1
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <readReg+0x1ac>)
 8003376:	f7fe ff9d 	bl	80022b4 <PIN_HIGH>
    setWriteDir();
 800337a:	f7ff f8f3 	bl	8002564 <setWriteDir>
    return ret;
 800337e:	89bb      	ldrh	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000210 	.word	0x20000210
 800338c:	40020400 	.word	0x40020400
 8003390:	40020000 	.word	0x40020000
 8003394:	40020800 	.word	0x40020800

08003398 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff1a 	bl	80031e0 <readReg>
 80033ac:	4603      	mov	r3, r0
 80033ae:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff13 	bl	80031e0 <readReg>
 80033ba:	4603      	mov	r3, r0
 80033bc:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	89bb      	ldrh	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff feff 	bl	80031e0 <readReg>
 80033e2:	4603      	mov	r3, r0
 80033e4:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fef8 	bl	80031e0 <readReg>
 80033f0:	4603      	mov	r3, r0
 80033f2:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fef1 	bl	80031e0 <readReg>
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8003402:	89fb      	ldrh	r3, [r7, #14]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	89ba      	ldrh	r2, [r7, #12]
 8003408:	0212      	lsls	r2, r2, #8
 800340a:	4313      	orrs	r3, r2
 800340c:	897a      	ldrh	r2, [r7, #10]
 800340e:	0a12      	lsrs	r2, r2, #8
 8003410:	b292      	uxth	r2, r2
 8003412:	4313      	orrs	r3, r2
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <tft_init>:


void tft_init(uint16_t ID)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800342e:	4be1      	ldr	r3, [pc, #900]	; (80037b4 <tft_init+0x398>)
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8003434:	4ae0      	ldr	r2, [pc, #896]	; (80037b8 <tft_init+0x39c>)
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	8013      	strh	r3, [r2, #0]
 800343a:	4bdf      	ldr	r3, [pc, #892]	; (80037b8 <tft_init+0x39c>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8003442:	4293      	cmp	r3, r2
 8003444:	f000 82cc 	beq.w	80039e0 <tft_init+0x5c4>
 8003448:	f24c 5205 	movw	r2, #50437	; 0xc505
 800344c:	4293      	cmp	r3, r2
 800344e:	f300 8303 	bgt.w	8003a58 <tft_init+0x63c>
 8003452:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 82cb 	beq.w	80039f2 <tft_init+0x5d6>
 800345c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003460:	4293      	cmp	r3, r2
 8003462:	f300 82f9 	bgt.w	8003a58 <tft_init+0x63c>
 8003466:	f24b 5205 	movw	r2, #46341	; 0xb505
 800346a:	4293      	cmp	r3, r2
 800346c:	f000 82b8 	beq.w	80039e0 <tft_init+0x5c4>
 8003470:	f24b 5205 	movw	r2, #46341	; 0xb505
 8003474:	4293      	cmp	r3, r2
 8003476:	f300 82ef 	bgt.w	8003a58 <tft_init+0x63c>
 800347a:	f64a 4211 	movw	r2, #44049	; 0xac11
 800347e:	4293      	cmp	r3, r2
 8003480:	f000 8239 	beq.w	80038f6 <tft_init+0x4da>
 8003484:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003488:	4293      	cmp	r3, r2
 800348a:	f300 82e5 	bgt.w	8003a58 <tft_init+0x63c>
 800348e:	f249 4288 	movw	r2, #38024	; 0x9488
 8003492:	4293      	cmp	r3, r2
 8003494:	f300 82e0 	bgt.w	8003a58 <tft_init+0x63c>
 8003498:	f249 4287 	movw	r2, #38023	; 0x9487
 800349c:	4293      	cmp	r3, r2
 800349e:	f280 8288 	bge.w	80039b2 <tft_init+0x596>
 80034a2:	f249 4286 	movw	r2, #38022	; 0x9486
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 8269 	beq.w	800397e <tft_init+0x562>
 80034ac:	f249 4286 	movw	r2, #38022	; 0x9486
 80034b0:	4293      	cmp	r3, r2
 80034b2:	f300 82d1 	bgt.w	8003a58 <tft_init+0x63c>
 80034b6:	f249 4281 	movw	r2, #38017	; 0x9481
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f000 8248 	beq.w	8003950 <tft_init+0x534>
 80034c0:	f249 4281 	movw	r2, #38017	; 0x9481
 80034c4:	4293      	cmp	r3, r2
 80034c6:	f300 82c7 	bgt.w	8003a58 <tft_init+0x63c>
 80034ca:	f249 3241 	movw	r2, #37697	; 0x9341
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f300 82c2 	bgt.w	8003a58 <tft_init+0x63c>
 80034d4:	f249 3202 	movw	r2, #37634	; 0x9302
 80034d8:	4293      	cmp	r3, r2
 80034da:	f280 80a5 	bge.w	8003628 <tft_init+0x20c>
 80034de:	f249 0290 	movw	r2, #37008	; 0x9090
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f000 818f 	beq.w	8003806 <tft_init+0x3ea>
 80034e8:	f249 0290 	movw	r2, #37008	; 0x9090
 80034ec:	4293      	cmp	r3, r2
 80034ee:	f300 82b3 	bgt.w	8003a58 <tft_init+0x63c>
 80034f2:	f248 3257 	movw	r2, #33623	; 0x8357
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f000 8180 	beq.w	80037fc <tft_init+0x3e0>
 80034fc:	f248 3257 	movw	r2, #33623	; 0x8357
 8003500:	4293      	cmp	r3, r2
 8003502:	f300 82a9 	bgt.w	8003a58 <tft_init+0x63c>
 8003506:	f248 0231 	movw	r2, #32817	; 0x8031
 800350a:	4293      	cmp	r3, r2
 800350c:	f000 816d 	beq.w	80037ea <tft_init+0x3ce>
 8003510:	f248 0231 	movw	r2, #32817	; 0x8031
 8003514:	4293      	cmp	r3, r2
 8003516:	f300 829f 	bgt.w	8003a58 <tft_init+0x63c>
 800351a:	f247 7296 	movw	r2, #30614	; 0x7796
 800351e:	4293      	cmp	r3, r2
 8003520:	f000 8242 	beq.w	80039a8 <tft_init+0x58c>
 8003524:	f247 7296 	movw	r2, #30614	; 0x7796
 8003528:	4293      	cmp	r3, r2
 800352a:	f300 8295 	bgt.w	8003a58 <tft_init+0x63c>
 800352e:	f247 7293 	movw	r2, #30611	; 0x7793
 8003532:	4293      	cmp	r3, r2
 8003534:	f000 825d 	beq.w	80039f2 <tft_init+0x5d6>
 8003538:	f247 7293 	movw	r2, #30611	; 0x7793
 800353c:	4293      	cmp	r3, r2
 800353e:	f300 828b 	bgt.w	8003a58 <tft_init+0x63c>
 8003542:	f247 7289 	movw	r2, #30601	; 0x7789
 8003546:	4293      	cmp	r3, r2
 8003548:	f000 8146 	beq.w	80037d8 <tft_init+0x3bc>
 800354c:	f247 7289 	movw	r2, #30601	; 0x7789
 8003550:	4293      	cmp	r3, r2
 8003552:	f300 8281 	bgt.w	8003a58 <tft_init+0x63c>
 8003556:	f646 0209 	movw	r2, #26633	; 0x6809
 800355a:	4293      	cmp	r3, r2
 800355c:	f000 8194 	beq.w	8003888 <tft_init+0x46c>
 8003560:	f646 0209 	movw	r2, #26633	; 0x6809
 8003564:	4293      	cmp	r3, r2
 8003566:	f300 8277 	bgt.w	8003a58 <tft_init+0x63c>
 800356a:	f245 4208 	movw	r2, #21512	; 0x5408
 800356e:	4293      	cmp	r3, r2
 8003570:	f000 817a 	beq.w	8003868 <tft_init+0x44c>
 8003574:	f245 4208 	movw	r2, #21512	; 0x5408
 8003578:	4293      	cmp	r3, r2
 800357a:	f300 826d 	bgt.w	8003a58 <tft_init+0x63c>
 800357e:	f245 3210 	movw	r2, #21264	; 0x5310
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 8100 	beq.w	8003788 <tft_init+0x36c>
 8003588:	f245 3210 	movw	r2, #21264	; 0x5310
 800358c:	4293      	cmp	r3, r2
 800358e:	f300 8263 	bgt.w	8003a58 <tft_init+0x63c>
 8003592:	f242 0253 	movw	r2, #8275	; 0x2053
 8003596:	4293      	cmp	r3, r2
 8003598:	f000 81a8 	beq.w	80038ec <tft_init+0x4d0>
 800359c:	f242 0253 	movw	r2, #8275	; 0x2053
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f300 8259 	bgt.w	8003a58 <tft_init+0x63c>
 80035a6:	f241 6202 	movw	r2, #5634	; 0x1602
 80035aa:	4293      	cmp	r3, r2
 80035ac:	f000 8195 	beq.w	80038da <tft_init+0x4be>
 80035b0:	f241 6202 	movw	r2, #5634	; 0x1602
 80035b4:	4293      	cmp	r3, r2
 80035b6:	f300 824f 	bgt.w	8003a58 <tft_init+0x63c>
 80035ba:	f241 5281 	movw	r2, #5505	; 0x1581
 80035be:	4293      	cmp	r3, r2
 80035c0:	f000 81c1 	beq.w	8003946 <tft_init+0x52a>
 80035c4:	f241 5281 	movw	r2, #5505	; 0x1581
 80035c8:	4293      	cmp	r3, r2
 80035ca:	f300 8245 	bgt.w	8003a58 <tft_init+0x63c>
 80035ce:	f241 5226 	movw	r2, #5414	; 0x1526
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f000 80cf 	beq.w	8003776 <tft_init+0x35a>
 80035d8:	f241 5226 	movw	r2, #5414	; 0x1526
 80035dc:	4293      	cmp	r3, r2
 80035de:	f300 823b 	bgt.w	8003a58 <tft_init+0x63c>
 80035e2:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80035e6:	f000 80bd 	beq.w	8003764 <tft_init+0x348>
 80035ea:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80035ee:	f300 8233 	bgt.w	8003a58 <tft_init+0x63c>
 80035f2:	f241 5211 	movw	r2, #5393	; 0x1511
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f000 80a0 	beq.w	800373c <tft_init+0x320>
 80035fc:	f241 5211 	movw	r2, #5393	; 0x1511
 8003600:	4293      	cmp	r3, r2
 8003602:	f300 8229 	bgt.w	8003a58 <tft_init+0x63c>
 8003606:	f241 5205 	movw	r2, #5381	; 0x1505
 800360a:	4293      	cmp	r3, r2
 800360c:	f000 8131 	beq.w	8003872 <tft_init+0x456>
 8003610:	f241 5205 	movw	r2, #5381	; 0x1505
 8003614:	4293      	cmp	r3, r2
 8003616:	f300 821f 	bgt.w	8003a58 <tft_init+0x63c>
 800361a:	2b01      	cmp	r3, #1
 800361c:	f000 811f 	beq.w	800385e <tft_init+0x442>
 8003620:	2b99      	cmp	r3, #153	; 0x99
 8003622:	f000 8107 	beq.w	8003834 <tft_init+0x418>
 8003626:	e217      	b.n	8003a58 <tft_init+0x63c>
 8003628:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 800362c:	3b02      	subs	r3, #2
 800362e:	2b3f      	cmp	r3, #63	; 0x3f
 8003630:	f200 8212 	bhi.w	8003a58 <tft_init+0x63c>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <tft_init+0x220>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003901 	.word	0x08003901
 8003640:	08003a59 	.word	0x08003a59
 8003644:	08003a59 	.word	0x08003a59
 8003648:	08003a59 	.word	0x08003a59
 800364c:	08003a59 	.word	0x08003a59
 8003650:	08003a59 	.word	0x08003a59
 8003654:	08003a59 	.word	0x08003a59
 8003658:	08003a59 	.word	0x08003a59
 800365c:	08003a59 	.word	0x08003a59
 8003660:	08003a59 	.word	0x08003a59
 8003664:	08003a59 	.word	0x08003a59
 8003668:	08003a59 	.word	0x08003a59
 800366c:	08003a59 	.word	0x08003a59
 8003670:	08003a59 	.word	0x08003a59
 8003674:	08003a59 	.word	0x08003a59
 8003678:	08003a59 	.word	0x08003a59
 800367c:	08003a59 	.word	0x08003a59
 8003680:	08003a59 	.word	0x08003a59
 8003684:	08003a59 	.word	0x08003a59
 8003688:	08003a59 	.word	0x08003a59
 800368c:	08003a59 	.word	0x08003a59
 8003690:	08003a59 	.word	0x08003a59
 8003694:	08003a59 	.word	0x08003a59
 8003698:	08003a59 	.word	0x08003a59
 800369c:	08003a59 	.word	0x08003a59
 80036a0:	08003a59 	.word	0x08003a59
 80036a4:	08003a59 	.word	0x08003a59
 80036a8:	08003a59 	.word	0x08003a59
 80036ac:	08003a59 	.word	0x08003a59
 80036b0:	08003a59 	.word	0x08003a59
 80036b4:	08003873 	.word	0x08003873
 80036b8:	08003a59 	.word	0x08003a59
 80036bc:	08003a59 	.word	0x08003a59
 80036c0:	08003a59 	.word	0x08003a59
 80036c4:	08003a59 	.word	0x08003a59
 80036c8:	08003893 	.word	0x08003893
 80036cc:	08003a59 	.word	0x08003a59
 80036d0:	080038b3 	.word	0x080038b3
 80036d4:	08003893 	.word	0x08003893
 80036d8:	08003915 	.word	0x08003915
 80036dc:	08003a59 	.word	0x08003a59
 80036e0:	08003a59 	.word	0x08003a59
 80036e4:	08003a59 	.word	0x08003a59
 80036e8:	08003a59 	.word	0x08003a59
 80036ec:	08003a59 	.word	0x08003a59
 80036f0:	08003a59 	.word	0x08003a59
 80036f4:	08003a59 	.word	0x08003a59
 80036f8:	0800389d 	.word	0x0800389d
 80036fc:	08003a59 	.word	0x08003a59
 8003700:	08003a59 	.word	0x08003a59
 8003704:	08003a59 	.word	0x08003a59
 8003708:	0800389d 	.word	0x0800389d
 800370c:	08003a59 	.word	0x08003a59
 8003710:	08003a59 	.word	0x08003a59
 8003714:	0800390b 	.word	0x0800390b
 8003718:	08003a59 	.word	0x08003a59
 800371c:	08003a59 	.word	0x08003a59
 8003720:	08003a59 	.word	0x08003a59
 8003724:	08003a59 	.word	0x08003a59
 8003728:	08003a59 	.word	0x08003a59
 800372c:	08003a59 	.word	0x08003a59
 8003730:	08003a59 	.word	0x08003a59
 8003734:	0800392b 	.word	0x0800392b
 8003738:	08003935 	.word	0x08003935
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <tft_init+0x3a0>)
 800373e:	2203      	movs	r2, #3
 8003740:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <tft_init+0x3a4>)
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2303      	movs	r3, #3
 8003748:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <tft_init+0x3a8>)
 800374c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003754:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <tft_init+0x3ac>)
 8003758:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003760:	801a      	strh	r2, [r3, #0]
        break;
 8003762:	e17f      	b.n	8003a64 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <tft_init+0x3a0>)
 8003766:	f240 4213 	movw	r2, #1043	; 0x413
 800376a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <tft_init+0x3b0>)
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	2306      	movs	r3, #6
 8003772:	837b      	strh	r3, [r7, #26]
        break;
 8003774:	e176      	b.n	8003a64 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <tft_init+0x3a0>)
 8003778:	f240 4213 	movw	r2, #1043	; 0x413
 800377c:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <tft_init+0x3b4>)
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	230c      	movs	r3, #12
 8003784:	837b      	strh	r3, [r7, #26]
        break;
 8003786:	e16d      	b.n	8003a64 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <tft_init+0x3a0>)
 800378a:	f640 6213 	movw	r2, #3603	; 0xe13
 800378e:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <tft_init+0x3b8>)
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	2302      	movs	r3, #2
 8003796:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <tft_init+0x3a8>)
 800379a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80037a2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <tft_init+0x3ac>)
 80037a6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037ae:	801a      	strh	r2, [r3, #0]
        break;
 80037b0:	e158      	b.n	8003a64 <tft_init+0x648>
 80037b2:	bf00      	nop
 80037b4:	2000040c 	.word	0x2000040c
 80037b8:	2000040a 	.word	0x2000040a
 80037bc:	200003fc 	.word	0x200003fc
 80037c0:	0800ce78 	.word	0x0800ce78
 80037c4:	08002349 	.word	0x08002349
 80037c8:	08002331 	.word	0x08002331
 80037cc:	0800ce7c 	.word	0x0800ce7c
 80037d0:	0800ce84 	.word	0x0800ce84
 80037d4:	0800ce90 	.word	0x0800ce90
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80037d8:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <tft_init+0x5f4>)
 80037da:	f240 4213 	movw	r2, #1043	; 0x413
 80037de:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80037e0:	4b8c      	ldr	r3, [pc, #560]	; (8003a14 <tft_init+0x5f8>)
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	2341      	movs	r3, #65	; 0x41
 80037e6:	837b      	strh	r3, [r7, #26]
        break;
 80037e8:	e13c      	b.n	8003a64 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80037ea:	4b89      	ldr	r3, [pc, #548]	; (8003a10 <tft_init+0x5f4>)
 80037ec:	f241 4213 	movw	r2, #5139	; 0x1413
 80037f0:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <tft_init+0x5fc>)
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	2312      	movs	r3, #18
 80037f8:	837b      	strh	r3, [r7, #26]
        break;
 80037fa:	e133      	b.n	8003a64 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80037fc:	4b84      	ldr	r3, [pc, #528]	; (8003a10 <tft_init+0x5f4>)
 80037fe:	f241 4203 	movw	r2, #5123	; 0x1403
 8003802:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8003804:	e003      	b.n	800380e <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003806:	4b82      	ldr	r3, [pc, #520]	; (8003a10 <tft_init+0x5f4>)
 8003808:	f241 4213 	movw	r2, #5139	; 0x1413
 800380c:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 800380e:	2301      	movs	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8003812:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <tft_init+0x600>)
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	2302      	movs	r3, #2
 8003818:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800381a:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <tft_init+0x604>)
 800381c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003824:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003826:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <tft_init+0x608>)
 8003828:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003830:	801a      	strh	r2, [r3, #0]
        break;
 8003832:	e117      	b.n	8003a64 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003834:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <tft_init+0x5f4>)
 8003836:	f241 4213 	movw	r2, #5139	; 0x1413
 800383a:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 800383c:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <tft_init+0x60c>)
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	231d      	movs	r3, #29
 8003842:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003844:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <tft_init+0x604>)
 8003846:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800384e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003850:	4b74      	ldr	r3, [pc, #464]	; (8003a24 <tft_init+0x608>)
 8003852:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800385a:	801a      	strh	r2, [r3, #0]
        break;
 800385c:	e102      	b.n	8003a64 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800385e:	4b6c      	ldr	r3, [pc, #432]	; (8003a10 <tft_init+0x5f4>)
 8003860:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003864:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8003866:	e008      	b.n	800387a <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8003868:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <tft_init+0x5f4>)
 800386a:	f241 0204 	movw	r2, #4100	; 0x1004
 800386e:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8003870:	e003      	b.n	800387a <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <tft_init+0x5f4>)
 8003874:	f241 0204 	movw	r2, #4100	; 0x1004
 8003878:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800387e:	21d8      	movs	r1, #216	; 0xd8
 8003880:	486a      	ldr	r0, [pc, #424]	; (8003a2c <tft_init+0x610>)
 8003882:	f7ff fb3e 	bl	8002f02 <init_table16>
        break;
 8003886:	e0ed      	b.n	8003a64 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <tft_init+0x5f4>)
 800388a:	f241 1202 	movw	r2, #4354	; 0x1102
 800388e:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8003890:	e008      	b.n	80038a4 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <tft_init+0x5f4>)
 8003894:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003898:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800389a:	e003      	b.n	80038a4 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 800389c:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <tft_init+0x5f4>)
 800389e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a2:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80038a8:	21cc      	movs	r1, #204	; 0xcc
 80038aa:	4861      	ldr	r0, [pc, #388]	; (8003a30 <tft_init+0x614>)
 80038ac:	f7ff fb29 	bl	8002f02 <init_table16>
        break;
 80038b0:	e0d8      	b.n	8003a64 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <tft_init+0x5f4>)
 80038b4:	f240 4203 	movw	r2, #1027	; 0x403
 80038b8:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80038ba:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <tft_init+0x618>)
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	231e      	movs	r3, #30
 80038c0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80038c2:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <tft_init+0x604>)
 80038c4:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80038cc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80038ce:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <tft_init+0x608>)
 80038d0:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	22f0      	movs	r2, #240	; 0xf0
 80038d6:	801a      	strh	r2, [r3, #0]
        break;
 80038d8:	e0c4      	b.n	8003a64 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80038da:	4b4d      	ldr	r3, [pc, #308]	; (8003a10 <tft_init+0x5f4>)
 80038dc:	f240 4203 	movw	r2, #1027	; 0x403
 80038e0:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80038e2:	4b55      	ldr	r3, [pc, #340]	; (8003a38 <tft_init+0x61c>)
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2306      	movs	r3, #6
 80038e8:	837b      	strh	r3, [r7, #26]
        break;
 80038ea:	e0bb      	b.n	8003a64 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80038ec:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <tft_init+0x5f4>)
 80038ee:	f241 4217 	movw	r2, #5143	; 0x1417
 80038f2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80038f4:	e012      	b.n	800391c <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80038f6:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <tft_init+0x5f4>)
 80038f8:	f241 4213 	movw	r2, #5139	; 0x1413
 80038fc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80038fe:	e00d      	b.n	800391c <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003900:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <tft_init+0x5f4>)
 8003902:	f240 4203 	movw	r2, #1027	; 0x403
 8003906:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003908:	e008      	b.n	800391c <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <tft_init+0x5f4>)
 800390c:	f240 4213 	movw	r2, #1043	; 0x413
 8003910:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003912:	e003      	b.n	800391c <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <tft_init+0x5f4>)
 8003916:	f241 6203 	movw	r2, #5635	; 0x1603
 800391a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003920:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <tft_init+0x620>)
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	2303      	movs	r3, #3
 8003926:	837b      	strh	r3, [r7, #26]
        break;
 8003928:	e09c      	b.n	8003a64 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <tft_init+0x5f4>)
 800392c:	f241 4213 	movw	r2, #5139	; 0x1413
 8003930:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8003932:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <tft_init+0x5f4>)
 8003936:	f240 4213 	movw	r2, #1043	; 0x413
 800393a:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 800393c:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <tft_init+0x624>)
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	2365      	movs	r3, #101	; 0x65
 8003942:	837b      	strh	r3, [r7, #26]
        break;
 8003944:	e08e      	b.n	8003a64 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <tft_init+0x5f4>)
 8003948:	f240 4213 	movw	r2, #1043	; 0x413
 800394c:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800394e:	e003      	b.n	8003958 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <tft_init+0x5f4>)
 8003952:	f240 4207 	movw	r2, #1031	; 0x407
 8003956:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8003958:	2301      	movs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <tft_init+0x628>)
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	2345      	movs	r3, #69	; 0x45
 8003962:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <tft_init+0x604>)
 8003966:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800396e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <tft_init+0x608>)
 8003972:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800397a:	801a      	strh	r2, [r3, #0]
        break;
 800397c:	e072      	b.n	8003a64 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <tft_init+0x5f4>)
 8003980:	f240 4203 	movw	r2, #1027	; 0x403
 8003984:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <tft_init+0x62c>)
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	233b      	movs	r3, #59	; 0x3b
 800398c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <tft_init+0x604>)
 8003990:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003998:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <tft_init+0x608>)
 800399c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039a4:	801a      	strh	r2, [r3, #0]
        break;
 80039a6:	e05d      	b.n	8003a64 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <tft_init+0x5f4>)
 80039aa:	f240 4203 	movw	r2, #1027	; 0x403
 80039ae:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80039b0:	e003      	b.n	80039ba <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80039b2:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <tft_init+0x5f4>)
 80039b4:	f240 4213 	movw	r2, #1043	; 0x413
 80039b8:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80039be:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <tft_init+0x630>)
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	232b      	movs	r3, #43	; 0x2b
 80039c4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <tft_init+0x604>)
 80039c8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039d0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <tft_init+0x608>)
 80039d4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039dc:	801a      	strh	r2, [r3, #0]
        break;
 80039de:	e041      	b.n	8003a64 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <tft_init+0x5f4>)
 80039e2:	f241 0208 	movw	r2, #4104	; 0x1008
 80039e6:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80039e8:	21b0      	movs	r1, #176	; 0xb0
 80039ea:	4819      	ldr	r0, [pc, #100]	; (8003a50 <tft_init+0x634>)
 80039ec:	f7ff fa89 	bl	8002f02 <init_table16>
        break;
 80039f0:	e038      	b.n	8003a64 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <tft_init+0x5f4>)
 80039f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f8:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80039fa:	21c0      	movs	r1, #192	; 0xc0
 80039fc:	4815      	ldr	r0, [pc, #84]	; (8003a54 <tft_init+0x638>)
 80039fe:	f7ff fa80 	bl	8002f02 <init_table16>
        p16 = (int16_t *) & height;
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <tft_init+0x604>)
 8003a04:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a0c:	801a      	strh	r2, [r3, #0]
        break;
 8003a0e:	e029      	b.n	8003a64 <tft_init+0x648>
 8003a10:	200003fc 	.word	0x200003fc
 8003a14:	0800ce94 	.word	0x0800ce94
 8003a18:	0800ced8 	.word	0x0800ced8
 8003a1c:	0800ceec 	.word	0x0800ceec
 8003a20:	08002349 	.word	0x08002349
 8003a24:	08002331 	.word	0x08002331
 8003a28:	0800cef0 	.word	0x0800cef0
 8003a2c:	0800cf10 	.word	0x0800cf10
 8003a30:	0800cfe8 	.word	0x0800cfe8
 8003a34:	0800d0b4 	.word	0x0800d0b4
 8003a38:	0800d0d4 	.word	0x0800d0d4
 8003a3c:	0800d0dc 	.word	0x0800d0dc
 8003a40:	0800d0e0 	.word	0x0800d0e0
 8003a44:	0800d148 	.word	0x0800d148
 8003a48:	0800d190 	.word	0x0800d190
 8003a4c:	0800d1cc 	.word	0x0800d1cc
 8003a50:	0800d1f8 	.word	0x0800d1f8
 8003a54:	0800d2a8 	.word	0x0800d2a8
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <tft_init+0x6f0>)
 8003a5a:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
        break;
 8003a62:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <tft_init+0x6f4>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <tft_init+0x6f8>)
 8003a7a:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8003a82:	2109      	movs	r1, #9
 8003a84:	4824      	ldr	r0, [pc, #144]	; (8003b18 <tft_init+0x6fc>)
 8003a86:	f7ff f9e3 	bl	8002e50 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8003a8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	69f8      	ldr	r0, [r7, #28]
 8003a92:	f7ff f9dd 	bl	8002e50 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8003a96:	2106      	movs	r1, #6
 8003a98:	4820      	ldr	r0, [pc, #128]	; (8003b1c <tft_init+0x700>)
 8003a9a:	f7ff f9d9 	bl	8002e50 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f000 ff72 	bl	8004988 <setRotation>
    invertDisplay(false);
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f001 fd5f 	bl	8005568 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <tft_init+0x704>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	f249 4288 	movw	r2, #38024	; 0x9488
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d125      	bne.n	8003b02 <tft_init+0x6e6>
		is555 = 0;
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <tft_init+0x708>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8003abc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f001 f9e6 	bl	8004e94 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8003ac8:	2100      	movs	r1, #0
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fe fcdf 	bl	800248e <readPixel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d112      	bne.n	8003b02 <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8003adc:	2306      	movs	r3, #6
 8003ade:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003ae0:	f107 030f 	add.w	r3, r7, #15
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	203a      	movs	r0, #58	; 0x3a
 8003aea:	f7fe fcfa 	bl	80024e2 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <tft_init+0x6f4>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	f023 0310 	bic.w	r3, r3, #16
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <tft_init+0x6f4>)
 8003afa:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <tft_init+0x708>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003b02:	bf00      	nop
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	08002331 	.word	0x08002331
 8003b10:	200003fc 	.word	0x200003fc
 8003b14:	20000400 	.word	0x20000400
 8003b18:	0800d368 	.word	0x0800d368
 8003b1c:	0800d374 	.word	0x0800d374
 8003b20:	2000040a 	.word	0x2000040a
 8003b24:	20000212 	.word	0x20000212

08003b28 <readID>:


uint16_t readID(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8003b2e:	2100      	movs	r1, #0
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7ff fb55 	bl	80031e0 <readReg>
 8003b36:	4603      	mov	r3, r0
 8003b38:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	f245 4208 	movw	r2, #21512	; 0x5408
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d102      	bne.n	8003b4a <readID+0x22>
        return 0x5408;
 8003b44:	f245 4308 	movw	r3, #21512	; 0x5408
 8003b48:	e128      	b.n	8003d9c <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d102      	bne.n	8003b5a <readID+0x32>
        return 0x5420;
 8003b54:	f245 4320 	movw	r3, #21536	; 0x5420
 8003b58:	e120      	b.n	8003d9c <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8003b5a:	89fb      	ldrh	r3, [r7, #14]
 8003b5c:	f648 1289 	movw	r2, #35209	; 0x8989
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d102      	bne.n	8003b6a <readID+0x42>
        return 0x1289;
 8003b64:	f241 2389 	movw	r3, #4745	; 0x1289
 8003b68:	e118      	b.n	8003d9c <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2067      	movs	r0, #103	; 0x67
 8003b6e:	f7ff fb37 	bl	80031e0 <readReg>
 8003b72:	4603      	mov	r3, r0
 8003b74:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8003b76:	89fb      	ldrh	r3, [r7, #14]
 8003b78:	f244 7247 	movw	r2, #18247	; 0x4747
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d102      	bne.n	8003b86 <readID+0x5e>
        return 0x8347;
 8003b80:	f248 3347 	movw	r3, #33607	; 0x8347
 8003b84:	e10a      	b.n	8003d9c <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8003b86:	20a1      	movs	r0, #161	; 0xa1
 8003b88:	f7ff fc06 	bl	8003398 <readReg32>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	f246 1201 	movw	r2, #24833	; 0x6101
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d102      	bne.n	8003ba0 <readID+0x78>
        return 0x1963;
 8003b9a:	f641 1363 	movw	r3, #6499	; 0x1963
 8003b9e:	e0fd      	b.n	8003d9c <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d102      	bne.n	8003bb0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003baa:	f241 5326 	movw	r3, #5414	; 0x1526
 8003bae:	e0f5      	b.n	8003d9c <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8003bb0:	20bf      	movs	r0, #191	; 0xbf
 8003bb2:	f7ff fc0c 	bl	80033ce <readReg40>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	f248 3257 	movw	r2, #33623	; 0x8357
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d102      	bne.n	8003bca <readID+0xa2>
        return 0x8357;
 8003bc4:	f248 3357 	movw	r3, #33623	; 0x8357
 8003bc8:	e0e8      	b.n	8003d9c <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003bca:	89fb      	ldrh	r3, [r7, #14]
 8003bcc:	f249 4281 	movw	r2, #38017	; 0x9481
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d102      	bne.n	8003bda <readID+0xb2>
        return 0x9481;
 8003bd4:	f249 4381 	movw	r3, #38017	; 0x9481
 8003bd8:	e0e0      	b.n	8003d9c <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	f241 5211 	movw	r2, #5393	; 0x1511
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d102      	bne.n	8003bea <readID+0xc2>
        return 0x1511;
 8003be4:	f241 5311 	movw	r3, #5393	; 0x1511
 8003be8:	e0d8      	b.n	8003d9c <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003bea:	89fb      	ldrh	r3, [r7, #14]
 8003bec:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003bf0:	d102      	bne.n	8003bf8 <readID+0xd0>
        return 0x1520;
 8003bf2:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8003bf6:	e0d1      	b.n	8003d9c <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	f241 5226 	movw	r2, #5414	; 0x1526
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d102      	bne.n	8003c08 <readID+0xe0>
        return 0x1526;
 8003c02:	f241 5326 	movw	r3, #5414	; 0x1526
 8003c06:	e0c9      	b.n	8003d9c <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003c08:	89fb      	ldrh	r3, [r7, #14]
 8003c0a:	f241 5281 	movw	r2, #5505	; 0x1581
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d102      	bne.n	8003c18 <readID+0xf0>
        return 0x1581;
 8003c12:	f241 5381 	movw	r3, #5505	; 0x1581
 8003c16:	e0c1      	b.n	8003d9c <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c1e:	d102      	bne.n	8003c26 <readID+0xfe>
        return 0x6814;
 8003c20:	f646 0314 	movw	r3, #26644	; 0x6814
 8003c24:	e0ba      	b.n	8003d9c <readID+0x274>
    ret = readReg32(0xD4);
 8003c26:	20d4      	movs	r0, #212	; 0xd4
 8003c28:	f7ff fbb6 	bl	8003398 <readReg32>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d102      	bne.n	8003c40 <readID+0x118>
        return 0x5310;
 8003c3a:	f245 3310 	movw	r3, #21264	; 0x5310
 8003c3e:	e0ad      	b.n	8003d9c <readID+0x274>
    ret = readReg32(0xD7);
 8003c40:	20d7      	movs	r0, #215	; 0xd7
 8003c42:	f7ff fba9 	bl	8003398 <readReg32>
 8003c46:	4603      	mov	r3, r0
 8003c48:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	f248 0231 	movw	r2, #32817	; 0x8031
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <readID+0x132>
        return 0x8031;
 8003c54:	f248 0331 	movw	r3, #32817	; 0x8031
 8003c58:	e0a0      	b.n	8003d9c <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8003c5a:	20ef      	movs	r0, #239	; 0xef
 8003c5c:	f7ff fbb7 	bl	80033ce <readReg40>
 8003c60:	4603      	mov	r3, r0
 8003c62:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8003c64:	89fb      	ldrh	r3, [r7, #14]
 8003c66:	f249 3227 	movw	r2, #37671	; 0x9327
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d102      	bne.n	8003c74 <readID+0x14c>
        return 0x9327;
 8003c6e:	f249 3327 	movw	r3, #37671	; 0x9327
 8003c72:	e093      	b.n	8003d9c <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8003c74:	20fe      	movs	r0, #254	; 0xfe
 8003c76:	f7ff fb8f 	bl	8003398 <readReg32>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	f242 0253 	movw	r2, #8275	; 0x2053
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d102      	bne.n	8003c90 <readID+0x168>
        return 0x2053;
 8003c8a:	f242 0353 	movw	r3, #8275	; 0x2053
 8003c8e:	e085      	b.n	8003d9c <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8003c90:	2004      	movs	r0, #4
 8003c92:	f7ff fb81 	bl	8003398 <readReg32>
 8003c96:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d122      	bne.n	8003cee <readID+0x1c6>
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cae:	d11e      	bne.n	8003cee <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003cb0:	4a3c      	ldr	r2, [pc, #240]	; (8003da4 <readID+0x27c>)
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	8019      	strh	r1, [r3, #0]
 8003cba:	3302      	adds	r3, #2
 8003cbc:	0c12      	lsrs	r2, r2, #16
 8003cbe:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8003cc0:	1d3b      	adds	r3, r7, #4
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	20b9      	movs	r0, #185	; 0xb9
 8003cc8:	f7fe fc0b 	bl	80024e2 <pushCommand>
        msb = readReg(0xD0,0);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	20d0      	movs	r0, #208	; 0xd0
 8003cd0:	f7ff fa86 	bl	80031e0 <readReg>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	2b99      	cmp	r3, #153	; 0x99
 8003cdc:	d101      	bne.n	8003ce2 <readID+0x1ba>
 8003cde:	2399      	movs	r3, #153	; 0x99
 8003ce0:	e05c      	b.n	8003d9c <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	2b90      	cmp	r3, #144	; 0x90
 8003ce6:	d102      	bne.n	8003cee <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003ce8:	f249 0390 	movw	r3, #37008	; 0x9090
 8003cec:	e056      	b.n	8003d9c <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003cee:	89fb      	ldrh	r3, [r7, #14]
 8003cf0:	f241 5226 	movw	r2, #5414	; 0x1526
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d102      	bne.n	8003cfe <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003cf8:	f241 5326 	movw	r3, #5414	; 0x1526
 8003cfc:	e04e      	b.n	8003d9c <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d102      	bne.n	8003d0e <readID+0x1e6>
        return 0x7735;
 8003d08:	f247 7335 	movw	r3, #30517	; 0x7735
 8003d0c:	e046      	b.n	8003d9c <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	f248 5252 	movw	r2, #34130	; 0x8552
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d102      	bne.n	8003d1e <readID+0x1f6>
        return 0x7789;
 8003d18:	f247 7389 	movw	r3, #30601	; 0x7789
 8003d1c:	e03e      	b.n	8003d9c <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d102      	bne.n	8003d2e <readID+0x206>
        return 0xAC11;
 8003d28:	f64a 4311 	movw	r3, #44049	; 0xac11
 8003d2c:	e036      	b.n	8003d9c <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8003d2e:	20d3      	movs	r0, #211	; 0xd3
 8003d30:	f7ff fb32 	bl	8003398 <readReg32>
 8003d34:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	f249 1263 	movw	r2, #37219	; 0x9163
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <readID+0x222>
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	e028      	b.n	8003d9c <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8003d4a:	20d3      	movs	r0, #211	; 0xd3
 8003d4c:	f7ff fb24 	bl	8003398 <readReg32>
 8003d50:	4603      	mov	r3, r0
 8003d52:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b93      	cmp	r3, #147	; 0x93
 8003d60:	d00b      	beq.n	8003d7a <readID+0x252>
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b94      	cmp	r3, #148	; 0x94
 8003d66:	d008      	beq.n	8003d7a <readID+0x252>
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b98      	cmp	r3, #152	; 0x98
 8003d6c:	d005      	beq.n	8003d7a <readID+0x252>
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b77      	cmp	r3, #119	; 0x77
 8003d72:	d002      	beq.n	8003d7a <readID+0x252>
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b16      	cmp	r3, #22
 8003d78:	d101      	bne.n	8003d7e <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	e00e      	b.n	8003d9c <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8003d7e:	89fb      	ldrh	r3, [r7, #14]
 8003d80:	2bd3      	cmp	r3, #211	; 0xd3
 8003d82:	d004      	beq.n	8003d8e <readID+0x266>
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	e004      	b.n	8003d9c <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8003d92:	2100      	movs	r1, #0
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7ff fa23 	bl	80031e0 <readReg>
 8003d9a:	4603      	mov	r3, r0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800c80c 	.word	0x0800c80c

08003da8 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b08b      	sub	sp, #44	; 0x2c
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60ba      	str	r2, [r7, #8]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	81fb      	strh	r3, [r7, #14]
 8003db6:	460b      	mov	r3, r1
 8003db8:	81bb      	strh	r3, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <readGRAM+0x88>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dc8:	fb12 f303 	smulbb	r3, r2, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	843b      	strh	r3, [r7, #32]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <readGRAM+0x8c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <readGRAM+0x48>
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <readGRAM+0x90>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <readGRAM+0x48>
        _MR = 0x2E;
 8003dec:	232e      	movs	r3, #46	; 0x2e
 8003dee:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <readGRAM+0x94>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f241 6202 	movw	r2, #5634	; 0x1602
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <readGRAM+0x58>
 8003dfc:	232e      	movs	r3, #46	; 0x2e
 8003dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003e00:	89fa      	ldrh	r2, [r7, #14]
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	4413      	add	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b21c      	sxth	r4, r3
 8003e0e:	89ba      	ldrh	r2, [r7, #12]
 8003e10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e12:	4413      	add	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003e20:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003e24:	4622      	mov	r2, r4
 8003e26:	f001 f93b 	bl	80050a0 <setAddrWindow>
    while (n > 0) {
 8003e2a:	f000 bd86 	b.w	800493a <readGRAM+0xb92>
 8003e2e:	bf00      	nop
 8003e30:	200003fa 	.word	0x200003fa
 8003e34:	20000211 	.word	0x20000211
 8003e38:	200003fc 	.word	0x200003fc
 8003e3c:	2000040a 	.word	0x2000040a
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8003e40:	4ba0      	ldr	r3, [pc, #640]	; (80040c4 <readGRAM+0x31c>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8003e4c:	4b9e      	ldr	r3, [pc, #632]	; (80040c8 <readGRAM+0x320>)
 8003e4e:	8818      	ldrh	r0, [r3, #0]
 8003e50:	89fa      	ldrh	r2, [r7, #14]
 8003e52:	8bfb      	ldrh	r3, [r7, #30]
 8003e54:	4413      	add	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fe fb30 	bl	80024be <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8003e5e:	4b9b      	ldr	r3, [pc, #620]	; (80040cc <readGRAM+0x324>)
 8003e60:	8818      	ldrh	r0, [r3, #0]
 8003e62:	89ba      	ldrh	r2, [r7, #12]
 8003e64:	8c3b      	ldrh	r3, [r7, #32]
 8003e66:	4413      	add	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7fe fb27 	bl	80024be <WriteCmdData>
        }
        CS_ACTIVE;
 8003e70:	2101      	movs	r1, #1
 8003e72:	4897      	ldr	r0, [pc, #604]	; (80040d0 <readGRAM+0x328>)
 8003e74:	f7fe fa0e 	bl	8002294 <PIN_LOW>
        WriteCmd(_MR);
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4896      	ldr	r0, [pc, #600]	; (80040d4 <readGRAM+0x32c>)
 8003e7c:	f7fe fa0a 	bl	8002294 <PIN_LOW>
 8003e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	777b      	strb	r3, [r7, #29]
 8003e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e8a:	773b      	strb	r3, [r7, #28]
 8003e8c:	4b91      	ldr	r3, [pc, #580]	; (80040d4 <readGRAM+0x32c>)
 8003e8e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003e92:	619a      	str	r2, [r3, #24]
 8003e94:	4b8e      	ldr	r3, [pc, #568]	; (80040d0 <readGRAM+0x328>)
 8003e96:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003e9a:	619a      	str	r2, [r3, #24]
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <readGRAM+0x330>)
 8003e9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ea2:	619a      	str	r2, [r3, #24]
 8003ea4:	7f7b      	ldrb	r3, [r7, #29]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003eac:	7f7b      	ldrb	r3, [r7, #29]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	7f7b      	ldrb	r3, [r7, #29]
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	4b84      	ldr	r3, [pc, #528]	; (80040d4 <readGRAM+0x32c>)
 8003ec2:	619a      	str	r2, [r3, #24]
 8003ec4:	7f7b      	ldrb	r3, [r7, #29]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003ecc:	7f7b      	ldrb	r3, [r7, #29]
 8003ece:	105b      	asrs	r3, r3, #1
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	7f7b      	ldrb	r3, [r7, #29]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	7f7b      	ldrb	r3, [r7, #29]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	4b79      	ldr	r3, [pc, #484]	; (80040d0 <readGRAM+0x328>)
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	7f7b      	ldrb	r3, [r7, #29]
 8003eee:	019b      	lsls	r3, r3, #6
 8003ef0:	4a79      	ldr	r2, [pc, #484]	; (80040d8 <readGRAM+0x330>)
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	6193      	str	r3, [r2, #24]
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4876      	ldr	r0, [pc, #472]	; (80040d4 <readGRAM+0x32c>)
 8003efc:	f7fe f9ca 	bl	8002294 <PIN_LOW>
 8003f00:	2102      	movs	r1, #2
 8003f02:	4874      	ldr	r0, [pc, #464]	; (80040d4 <readGRAM+0x32c>)
 8003f04:	f7fe f9c6 	bl	8002294 <PIN_LOW>
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4872      	ldr	r0, [pc, #456]	; (80040d4 <readGRAM+0x32c>)
 8003f0c:	f7fe f9c2 	bl	8002294 <PIN_LOW>
 8003f10:	2102      	movs	r1, #2
 8003f12:	4870      	ldr	r0, [pc, #448]	; (80040d4 <readGRAM+0x32c>)
 8003f14:	f7fe f9ce 	bl	80022b4 <PIN_HIGH>
 8003f18:	2102      	movs	r1, #2
 8003f1a:	486e      	ldr	r0, [pc, #440]	; (80040d4 <readGRAM+0x32c>)
 8003f1c:	f7fe f9ca 	bl	80022b4 <PIN_HIGH>
 8003f20:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <readGRAM+0x32c>)
 8003f22:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	4b69      	ldr	r3, [pc, #420]	; (80040d0 <readGRAM+0x328>)
 8003f2a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003f2e:	619a      	str	r2, [r3, #24]
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <readGRAM+0x330>)
 8003f32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	7f3b      	ldrb	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003f40:	7f3b      	ldrb	r3, [r7, #28]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	7f3b      	ldrb	r3, [r7, #28]
 8003f4c:	025b      	lsls	r3, r3, #9
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	431a      	orrs	r2, r3
 8003f54:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <readGRAM+0x32c>)
 8003f56:	619a      	str	r2, [r3, #24]
 8003f58:	7f3b      	ldrb	r3, [r7, #28]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003f60:	7f3b      	ldrb	r3, [r7, #28]
 8003f62:	105b      	asrs	r3, r3, #1
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	7f3b      	ldrb	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	431a      	orrs	r2, r3
 8003f74:	7f3b      	ldrb	r3, [r7, #28]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	4b54      	ldr	r3, [pc, #336]	; (80040d0 <readGRAM+0x328>)
 8003f7e:	619a      	str	r2, [r3, #24]
 8003f80:	7f3b      	ldrb	r3, [r7, #28]
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	4a54      	ldr	r2, [pc, #336]	; (80040d8 <readGRAM+0x330>)
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4851      	ldr	r0, [pc, #324]	; (80040d4 <readGRAM+0x32c>)
 8003f90:	f7fe f980 	bl	8002294 <PIN_LOW>
 8003f94:	2102      	movs	r1, #2
 8003f96:	484f      	ldr	r0, [pc, #316]	; (80040d4 <readGRAM+0x32c>)
 8003f98:	f7fe f97c 	bl	8002294 <PIN_LOW>
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	484d      	ldr	r0, [pc, #308]	; (80040d4 <readGRAM+0x32c>)
 8003fa0:	f7fe f978 	bl	8002294 <PIN_LOW>
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	484b      	ldr	r0, [pc, #300]	; (80040d4 <readGRAM+0x32c>)
 8003fa8:	f7fe f984 	bl	80022b4 <PIN_HIGH>
 8003fac:	2102      	movs	r1, #2
 8003fae:	4849      	ldr	r0, [pc, #292]	; (80040d4 <readGRAM+0x32c>)
 8003fb0:	f7fe f980 	bl	80022b4 <PIN_HIGH>
 8003fb4:	2110      	movs	r1, #16
 8003fb6:	4847      	ldr	r0, [pc, #284]	; (80040d4 <readGRAM+0x32c>)
 8003fb8:	f7fe f97c 	bl	80022b4 <PIN_HIGH>
        setReadDir();
 8003fbc:	f7fe faa4 	bl	8002508 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <readGRAM+0x31c>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 816d 	bne.w	80042a8 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8003fce:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <readGRAM+0x31c>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d105      	bne.n	8003fe6 <readGRAM+0x23e>
 8003fda:	4b40      	ldr	r3, [pc, #256]	; (80040dc <readGRAM+0x334>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f241 2289 	movw	r2, #4745	; 0x1289
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d17c      	bne.n	80040e0 <readGRAM+0x338>
            READ_8(r);
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	483a      	ldr	r0, [pc, #232]	; (80040d4 <readGRAM+0x32c>)
 8003fea:	f7fe f963 	bl	80022b4 <PIN_HIGH>
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4838      	ldr	r0, [pc, #224]	; (80040d4 <readGRAM+0x32c>)
 8003ff2:	f7fe f94f 	bl	8002294 <PIN_LOW>
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4836      	ldr	r0, [pc, #216]	; (80040d4 <readGRAM+0x32c>)
 8003ffa:	f7fe f94b 	bl	8002294 <PIN_LOW>
 8003ffe:	2101      	movs	r1, #1
 8004000:	4834      	ldr	r0, [pc, #208]	; (80040d4 <readGRAM+0x32c>)
 8004002:	f7fe f947 	bl	8002294 <PIN_LOW>
 8004006:	2101      	movs	r1, #1
 8004008:	4832      	ldr	r0, [pc, #200]	; (80040d4 <readGRAM+0x32c>)
 800400a:	f7fe f943 	bl	8002294 <PIN_LOW>
 800400e:	2101      	movs	r1, #1
 8004010:	4830      	ldr	r0, [pc, #192]	; (80040d4 <readGRAM+0x32c>)
 8004012:	f7fe f93f 	bl	8002294 <PIN_LOW>
 8004016:	2101      	movs	r1, #1
 8004018:	482e      	ldr	r0, [pc, #184]	; (80040d4 <readGRAM+0x32c>)
 800401a:	f7fe f93b 	bl	8002294 <PIN_LOW>
 800401e:	2101      	movs	r1, #1
 8004020:	482c      	ldr	r0, [pc, #176]	; (80040d4 <readGRAM+0x32c>)
 8004022:	f7fe f937 	bl	8002294 <PIN_LOW>
 8004026:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <readGRAM+0x32c>)
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <readGRAM+0x328>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <readGRAM+0x328>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <readGRAM+0x328>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b2da      	uxtb	r2, r3
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <readGRAM+0x328>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <readGRAM+0x32c>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4313      	orrs	r3, r2
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <readGRAM+0x330>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4313      	orrs	r3, r2
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <readGRAM+0x32c>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	75fb      	strb	r3, [r7, #23]
 80040b2:	2101      	movs	r1, #1
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <readGRAM+0x32c>)
 80040b6:	f7fe f8fd 	bl	80022b4 <PIN_HIGH>
 80040ba:	2101      	movs	r1, #1
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <readGRAM+0x32c>)
 80040be:	f7fe f8f9 	bl	80022b4 <PIN_HIGH>
 80040c2:	e0f1      	b.n	80042a8 <readGRAM+0x500>
 80040c4:	200003fc 	.word	0x200003fc
 80040c8:	20000404 	.word	0x20000404
 80040cc:	20000402 	.word	0x20000402
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020800 	.word	0x40020800
 80040dc:	2000040a 	.word	0x2000040a
        } else {
            READ_16(dummy);
 80040e0:	2101      	movs	r1, #1
 80040e2:	48ac      	ldr	r0, [pc, #688]	; (8004394 <readGRAM+0x5ec>)
 80040e4:	f7fe f8e6 	bl	80022b4 <PIN_HIGH>
 80040e8:	2101      	movs	r1, #1
 80040ea:	48aa      	ldr	r0, [pc, #680]	; (8004394 <readGRAM+0x5ec>)
 80040ec:	f7fe f8d2 	bl	8002294 <PIN_LOW>
 80040f0:	2101      	movs	r1, #1
 80040f2:	48a8      	ldr	r0, [pc, #672]	; (8004394 <readGRAM+0x5ec>)
 80040f4:	f7fe f8ce 	bl	8002294 <PIN_LOW>
 80040f8:	2101      	movs	r1, #1
 80040fa:	48a6      	ldr	r0, [pc, #664]	; (8004394 <readGRAM+0x5ec>)
 80040fc:	f7fe f8ca 	bl	8002294 <PIN_LOW>
 8004100:	2101      	movs	r1, #1
 8004102:	48a4      	ldr	r0, [pc, #656]	; (8004394 <readGRAM+0x5ec>)
 8004104:	f7fe f8c6 	bl	8002294 <PIN_LOW>
 8004108:	2101      	movs	r1, #1
 800410a:	48a2      	ldr	r0, [pc, #648]	; (8004394 <readGRAM+0x5ec>)
 800410c:	f7fe f8c2 	bl	8002294 <PIN_LOW>
 8004110:	2101      	movs	r1, #1
 8004112:	48a0      	ldr	r0, [pc, #640]	; (8004394 <readGRAM+0x5ec>)
 8004114:	f7fe f8be 	bl	8002294 <PIN_LOW>
 8004118:	2101      	movs	r1, #1
 800411a:	489e      	ldr	r0, [pc, #632]	; (8004394 <readGRAM+0x5ec>)
 800411c:	f7fe f8ba 	bl	8002294 <PIN_LOW>
 8004120:	4b9c      	ldr	r3, [pc, #624]	; (8004394 <readGRAM+0x5ec>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b9a      	ldr	r3, [pc, #616]	; (8004398 <readGRAM+0x5f0>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4313      	orrs	r3, r2
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b95      	ldr	r3, [pc, #596]	; (8004398 <readGRAM+0x5f0>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b90      	ldr	r3, [pc, #576]	; (8004398 <readGRAM+0x5f0>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b8c      	ldr	r3, [pc, #560]	; (8004398 <readGRAM+0x5f0>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b87      	ldr	r3, [pc, #540]	; (8004394 <readGRAM+0x5ec>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b84      	ldr	r3, [pc, #528]	; (800439c <readGRAM+0x5f4>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <readGRAM+0x5ec>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	0a5b      	lsrs	r3, r3, #9
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	2101      	movs	r1, #1
 80041ae:	4879      	ldr	r0, [pc, #484]	; (8004394 <readGRAM+0x5ec>)
 80041b0:	f7fe f880 	bl	80022b4 <PIN_HIGH>
 80041b4:	2101      	movs	r1, #1
 80041b6:	4877      	ldr	r0, [pc, #476]	; (8004394 <readGRAM+0x5ec>)
 80041b8:	f7fe f87c 	bl	80022b4 <PIN_HIGH>
 80041bc:	2101      	movs	r1, #1
 80041be:	4875      	ldr	r0, [pc, #468]	; (8004394 <readGRAM+0x5ec>)
 80041c0:	f7fe f878 	bl	80022b4 <PIN_HIGH>
 80041c4:	2101      	movs	r1, #1
 80041c6:	4873      	ldr	r0, [pc, #460]	; (8004394 <readGRAM+0x5ec>)
 80041c8:	f7fe f864 	bl	8002294 <PIN_LOW>
 80041cc:	2101      	movs	r1, #1
 80041ce:	4871      	ldr	r0, [pc, #452]	; (8004394 <readGRAM+0x5ec>)
 80041d0:	f7fe f860 	bl	8002294 <PIN_LOW>
 80041d4:	2101      	movs	r1, #1
 80041d6:	486f      	ldr	r0, [pc, #444]	; (8004394 <readGRAM+0x5ec>)
 80041d8:	f7fe f85c 	bl	8002294 <PIN_LOW>
 80041dc:	2101      	movs	r1, #1
 80041de:	486d      	ldr	r0, [pc, #436]	; (8004394 <readGRAM+0x5ec>)
 80041e0:	f7fe f858 	bl	8002294 <PIN_LOW>
 80041e4:	2101      	movs	r1, #1
 80041e6:	486b      	ldr	r0, [pc, #428]	; (8004394 <readGRAM+0x5ec>)
 80041e8:	f7fe f854 	bl	8002294 <PIN_LOW>
 80041ec:	2101      	movs	r1, #1
 80041ee:	4869      	ldr	r0, [pc, #420]	; (8004394 <readGRAM+0x5ec>)
 80041f0:	f7fe f850 	bl	8002294 <PIN_LOW>
 80041f4:	2101      	movs	r1, #1
 80041f6:	4867      	ldr	r0, [pc, #412]	; (8004394 <readGRAM+0x5ec>)
 80041f8:	f7fe f84c 	bl	8002294 <PIN_LOW>
 80041fc:	4b65      	ldr	r3, [pc, #404]	; (8004394 <readGRAM+0x5ec>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <readGRAM+0x5f0>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	b29b      	uxth	r3, r3
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	b29b      	uxth	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b29a      	uxth	r2, r3
 800421c:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <readGRAM+0x5f0>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	b29b      	uxth	r3, r3
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	b29b      	uxth	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <readGRAM+0x5f0>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	b29b      	uxth	r3, r3
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	b29b      	uxth	r3, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	b29a      	uxth	r2, r3
 8004242:	4b55      	ldr	r3, [pc, #340]	; (8004398 <readGRAM+0x5f0>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	b29b      	uxth	r3, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	b29a      	uxth	r2, r3
 8004252:	4b50      	ldr	r3, [pc, #320]	; (8004394 <readGRAM+0x5ec>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	b29b      	uxth	r3, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <readGRAM+0x5f4>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	b29b      	uxth	r3, r3
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	b29b      	uxth	r3, r3
 8004272:	4313      	orrs	r3, r2
 8004274:	b29a      	uxth	r2, r3
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <readGRAM+0x5ec>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	0a5b      	lsrs	r3, r3, #9
 800427c:	b29b      	uxth	r3, r3
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	833b      	strh	r3, [r7, #24]
 8004288:	2101      	movs	r1, #1
 800428a:	4842      	ldr	r0, [pc, #264]	; (8004394 <readGRAM+0x5ec>)
 800428c:	f7fe f812 	bl	80022b4 <PIN_HIGH>
 8004290:	2101      	movs	r1, #1
 8004292:	4840      	ldr	r0, [pc, #256]	; (8004394 <readGRAM+0x5ec>)
 8004294:	f7fe f80e 	bl	80022b4 <PIN_HIGH>
 8004298:	7efb      	ldrb	r3, [r7, #27]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	b21a      	sxth	r2, r3
 800429e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	b21b      	sxth	r3, r3
 80042a6:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 80042a8:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <readGRAM+0x5f8>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f241 5211 	movw	r2, #5393	; 0x1511
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f040 830f 	bne.w	80048d4 <readGRAM+0xb2c>
 80042b6:	2101      	movs	r1, #1
 80042b8:	4836      	ldr	r0, [pc, #216]	; (8004394 <readGRAM+0x5ec>)
 80042ba:	f7fd fffb 	bl	80022b4 <PIN_HIGH>
 80042be:	2101      	movs	r1, #1
 80042c0:	4834      	ldr	r0, [pc, #208]	; (8004394 <readGRAM+0x5ec>)
 80042c2:	f7fd ffe7 	bl	8002294 <PIN_LOW>
 80042c6:	2101      	movs	r1, #1
 80042c8:	4832      	ldr	r0, [pc, #200]	; (8004394 <readGRAM+0x5ec>)
 80042ca:	f7fd ffe3 	bl	8002294 <PIN_LOW>
 80042ce:	2101      	movs	r1, #1
 80042d0:	4830      	ldr	r0, [pc, #192]	; (8004394 <readGRAM+0x5ec>)
 80042d2:	f7fd ffdf 	bl	8002294 <PIN_LOW>
 80042d6:	2101      	movs	r1, #1
 80042d8:	482e      	ldr	r0, [pc, #184]	; (8004394 <readGRAM+0x5ec>)
 80042da:	f7fd ffdb 	bl	8002294 <PIN_LOW>
 80042de:	2101      	movs	r1, #1
 80042e0:	482c      	ldr	r0, [pc, #176]	; (8004394 <readGRAM+0x5ec>)
 80042e2:	f7fd ffd7 	bl	8002294 <PIN_LOW>
 80042e6:	2101      	movs	r1, #1
 80042e8:	482a      	ldr	r0, [pc, #168]	; (8004394 <readGRAM+0x5ec>)
 80042ea:	f7fd ffd3 	bl	8002294 <PIN_LOW>
 80042ee:	2101      	movs	r1, #1
 80042f0:	4828      	ldr	r0, [pc, #160]	; (8004394 <readGRAM+0x5ec>)
 80042f2:	f7fd ffcf 	bl	8002294 <PIN_LOW>
 80042f6:	4b27      	ldr	r3, [pc, #156]	; (8004394 <readGRAM+0x5ec>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <readGRAM+0x5f0>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <readGRAM+0x5f0>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <readGRAM+0x5f0>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b2da      	uxtb	r2, r3
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <readGRAM+0x5f0>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b2da      	uxtb	r2, r3
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <readGRAM+0x5ec>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <readGRAM+0x5f4>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4313      	orrs	r3, r2
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <readGRAM+0x5ec>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	75fb      	strb	r3, [r7, #23]
 8004382:	2101      	movs	r1, #1
 8004384:	4803      	ldr	r0, [pc, #12]	; (8004394 <readGRAM+0x5ec>)
 8004386:	f7fd ff95 	bl	80022b4 <PIN_HIGH>
 800438a:	2101      	movs	r1, #1
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <readGRAM+0x5ec>)
 800438e:	f7fd ff91 	bl	80022b4 <PIN_HIGH>
        while (n)
 8004392:	e29f      	b.n	80048d4 <readGRAM+0xb2c>
 8004394:	40020000 	.word	0x40020000
 8004398:	40020400 	.word	0x40020400
 800439c:	40020800 	.word	0x40020800
 80043a0:	2000040a 	.word	0x2000040a
        {
            if (_lcd_capable & READ_24BITS)
 80043a4:	4bab      	ldr	r3, [pc, #684]	; (8004654 <readGRAM+0x8ac>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 816b 	beq.w	8004688 <readGRAM+0x8e0>
            {
                READ_8(r);
 80043b2:	2101      	movs	r1, #1
 80043b4:	48a8      	ldr	r0, [pc, #672]	; (8004658 <readGRAM+0x8b0>)
 80043b6:	f7fd ff7d 	bl	80022b4 <PIN_HIGH>
 80043ba:	2101      	movs	r1, #1
 80043bc:	48a6      	ldr	r0, [pc, #664]	; (8004658 <readGRAM+0x8b0>)
 80043be:	f7fd ff69 	bl	8002294 <PIN_LOW>
 80043c2:	2101      	movs	r1, #1
 80043c4:	48a4      	ldr	r0, [pc, #656]	; (8004658 <readGRAM+0x8b0>)
 80043c6:	f7fd ff65 	bl	8002294 <PIN_LOW>
 80043ca:	2101      	movs	r1, #1
 80043cc:	48a2      	ldr	r0, [pc, #648]	; (8004658 <readGRAM+0x8b0>)
 80043ce:	f7fd ff61 	bl	8002294 <PIN_LOW>
 80043d2:	2101      	movs	r1, #1
 80043d4:	48a0      	ldr	r0, [pc, #640]	; (8004658 <readGRAM+0x8b0>)
 80043d6:	f7fd ff5d 	bl	8002294 <PIN_LOW>
 80043da:	2101      	movs	r1, #1
 80043dc:	489e      	ldr	r0, [pc, #632]	; (8004658 <readGRAM+0x8b0>)
 80043de:	f7fd ff59 	bl	8002294 <PIN_LOW>
 80043e2:	2101      	movs	r1, #1
 80043e4:	489c      	ldr	r0, [pc, #624]	; (8004658 <readGRAM+0x8b0>)
 80043e6:	f7fd ff55 	bl	8002294 <PIN_LOW>
 80043ea:	2101      	movs	r1, #1
 80043ec:	489a      	ldr	r0, [pc, #616]	; (8004658 <readGRAM+0x8b0>)
 80043ee:	f7fd ff51 	bl	8002294 <PIN_LOW>
 80043f2:	4b99      	ldr	r3, [pc, #612]	; (8004658 <readGRAM+0x8b0>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	4b96      	ldr	r3, [pc, #600]	; (800465c <readGRAM+0x8b4>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	b2db      	uxtb	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b92      	ldr	r3, [pc, #584]	; (800465c <readGRAM+0x8b4>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4b8d      	ldr	r3, [pc, #564]	; (800465c <readGRAM+0x8b4>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4313      	orrs	r3, r2
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b88      	ldr	r3, [pc, #544]	; (800465c <readGRAM+0x8b4>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b83      	ldr	r3, [pc, #524]	; (8004658 <readGRAM+0x8b0>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	b2db      	uxtb	r3, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b81      	ldr	r3, [pc, #516]	; (8004660 <readGRAM+0x8b8>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	b2da      	uxtb	r2, r3
 800446c:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <readGRAM+0x8b0>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	0a5b      	lsrs	r3, r3, #9
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4313      	orrs	r3, r2
 800447c:	75fb      	strb	r3, [r7, #23]
 800447e:	2101      	movs	r1, #1
 8004480:	4875      	ldr	r0, [pc, #468]	; (8004658 <readGRAM+0x8b0>)
 8004482:	f7fd ff17 	bl	80022b4 <PIN_HIGH>
 8004486:	2101      	movs	r1, #1
 8004488:	4873      	ldr	r0, [pc, #460]	; (8004658 <readGRAM+0x8b0>)
 800448a:	f7fd ff13 	bl	80022b4 <PIN_HIGH>
                READ_8(g);
 800448e:	2101      	movs	r1, #1
 8004490:	4871      	ldr	r0, [pc, #452]	; (8004658 <readGRAM+0x8b0>)
 8004492:	f7fd ff0f 	bl	80022b4 <PIN_HIGH>
 8004496:	2101      	movs	r1, #1
 8004498:	486f      	ldr	r0, [pc, #444]	; (8004658 <readGRAM+0x8b0>)
 800449a:	f7fd fefb 	bl	8002294 <PIN_LOW>
 800449e:	2101      	movs	r1, #1
 80044a0:	486d      	ldr	r0, [pc, #436]	; (8004658 <readGRAM+0x8b0>)
 80044a2:	f7fd fef7 	bl	8002294 <PIN_LOW>
 80044a6:	2101      	movs	r1, #1
 80044a8:	486b      	ldr	r0, [pc, #428]	; (8004658 <readGRAM+0x8b0>)
 80044aa:	f7fd fef3 	bl	8002294 <PIN_LOW>
 80044ae:	2101      	movs	r1, #1
 80044b0:	4869      	ldr	r0, [pc, #420]	; (8004658 <readGRAM+0x8b0>)
 80044b2:	f7fd feef 	bl	8002294 <PIN_LOW>
 80044b6:	2101      	movs	r1, #1
 80044b8:	4867      	ldr	r0, [pc, #412]	; (8004658 <readGRAM+0x8b0>)
 80044ba:	f7fd feeb 	bl	8002294 <PIN_LOW>
 80044be:	2101      	movs	r1, #1
 80044c0:	4865      	ldr	r0, [pc, #404]	; (8004658 <readGRAM+0x8b0>)
 80044c2:	f7fd fee7 	bl	8002294 <PIN_LOW>
 80044c6:	2101      	movs	r1, #1
 80044c8:	4863      	ldr	r0, [pc, #396]	; (8004658 <readGRAM+0x8b0>)
 80044ca:	f7fd fee3 	bl	8002294 <PIN_LOW>
 80044ce:	4b62      	ldr	r3, [pc, #392]	; (8004658 <readGRAM+0x8b0>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b5f      	ldr	r3, [pc, #380]	; (800465c <readGRAM+0x8b4>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4313      	orrs	r3, r2
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b5b      	ldr	r3, [pc, #364]	; (800465c <readGRAM+0x8b4>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b56      	ldr	r3, [pc, #344]	; (800465c <readGRAM+0x8b4>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4313      	orrs	r3, r2
 8004512:	b2da      	uxtb	r2, r3
 8004514:	4b51      	ldr	r3, [pc, #324]	; (800465c <readGRAM+0x8b4>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b2da      	uxtb	r2, r3
 8004524:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <readGRAM+0x8b0>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <readGRAM+0x8b8>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b2da      	uxtb	r2, r3
 8004548:	4b43      	ldr	r3, [pc, #268]	; (8004658 <readGRAM+0x8b0>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4313      	orrs	r3, r2
 8004558:	757b      	strb	r3, [r7, #21]
 800455a:	2101      	movs	r1, #1
 800455c:	483e      	ldr	r0, [pc, #248]	; (8004658 <readGRAM+0x8b0>)
 800455e:	f7fd fea9 	bl	80022b4 <PIN_HIGH>
 8004562:	2101      	movs	r1, #1
 8004564:	483c      	ldr	r0, [pc, #240]	; (8004658 <readGRAM+0x8b0>)
 8004566:	f7fd fea5 	bl	80022b4 <PIN_HIGH>
                READ_8(b);
 800456a:	2101      	movs	r1, #1
 800456c:	483a      	ldr	r0, [pc, #232]	; (8004658 <readGRAM+0x8b0>)
 800456e:	f7fd fea1 	bl	80022b4 <PIN_HIGH>
 8004572:	2101      	movs	r1, #1
 8004574:	4838      	ldr	r0, [pc, #224]	; (8004658 <readGRAM+0x8b0>)
 8004576:	f7fd fe8d 	bl	8002294 <PIN_LOW>
 800457a:	2101      	movs	r1, #1
 800457c:	4836      	ldr	r0, [pc, #216]	; (8004658 <readGRAM+0x8b0>)
 800457e:	f7fd fe89 	bl	8002294 <PIN_LOW>
 8004582:	2101      	movs	r1, #1
 8004584:	4834      	ldr	r0, [pc, #208]	; (8004658 <readGRAM+0x8b0>)
 8004586:	f7fd fe85 	bl	8002294 <PIN_LOW>
 800458a:	2101      	movs	r1, #1
 800458c:	4832      	ldr	r0, [pc, #200]	; (8004658 <readGRAM+0x8b0>)
 800458e:	f7fd fe81 	bl	8002294 <PIN_LOW>
 8004592:	2101      	movs	r1, #1
 8004594:	4830      	ldr	r0, [pc, #192]	; (8004658 <readGRAM+0x8b0>)
 8004596:	f7fd fe7d 	bl	8002294 <PIN_LOW>
 800459a:	2101      	movs	r1, #1
 800459c:	482e      	ldr	r0, [pc, #184]	; (8004658 <readGRAM+0x8b0>)
 800459e:	f7fd fe79 	bl	8002294 <PIN_LOW>
 80045a2:	2101      	movs	r1, #1
 80045a4:	482c      	ldr	r0, [pc, #176]	; (8004658 <readGRAM+0x8b0>)
 80045a6:	f7fd fe75 	bl	8002294 <PIN_LOW>
 80045aa:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <readGRAM+0x8b0>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <readGRAM+0x8b4>)
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <readGRAM+0x8b4>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <readGRAM+0x8b4>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <readGRAM+0x8b4>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <readGRAM+0x8b0>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <readGRAM+0x8b8>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	b2db      	uxtb	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <readGRAM+0x8b0>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	0a5b      	lsrs	r3, r3, #9
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4313      	orrs	r3, r2
 8004634:	753b      	strb	r3, [r7, #20]
 8004636:	2101      	movs	r1, #1
 8004638:	4807      	ldr	r0, [pc, #28]	; (8004658 <readGRAM+0x8b0>)
 800463a:	f7fd fe3b 	bl	80022b4 <PIN_HIGH>
 800463e:	2101      	movs	r1, #1
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <readGRAM+0x8b0>)
 8004642:	f7fd fe37 	bl	80022b4 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <readGRAM+0x8ac>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d011      	beq.n	8004676 <readGRAM+0x8ce>
 8004652:	e007      	b.n	8004664 <readGRAM+0x8bc>
 8004654:	200003fc 	.word	0x200003fc
 8004658:	40020000 	.word	0x40020000
 800465c:	40020400 	.word	0x40020400
 8004660:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 8004664:	7dfa      	ldrb	r2, [r7, #23]
 8004666:	7d79      	ldrb	r1, [r7, #21]
 8004668:	7d3b      	ldrb	r3, [r7, #20]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd fee9 	bl	8002442 <color565>
 8004670:	4603      	mov	r3, r0
 8004672:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004674:	e113      	b.n	800489e <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 8004676:	7d3a      	ldrb	r2, [r7, #20]
 8004678:	7d79      	ldrb	r1, [r7, #21]
 800467a:	7dfb      	ldrb	r3, [r7, #23]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fee0 	bl	8002442 <color565>
 8004682:	4603      	mov	r3, r0
 8004684:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004686:	e10a      	b.n	800489e <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 8004688:	2101      	movs	r1, #1
 800468a:	4895      	ldr	r0, [pc, #596]	; (80048e0 <readGRAM+0xb38>)
 800468c:	f7fd fe12 	bl	80022b4 <PIN_HIGH>
 8004690:	2101      	movs	r1, #1
 8004692:	4893      	ldr	r0, [pc, #588]	; (80048e0 <readGRAM+0xb38>)
 8004694:	f7fd fdfe 	bl	8002294 <PIN_LOW>
 8004698:	2101      	movs	r1, #1
 800469a:	4891      	ldr	r0, [pc, #580]	; (80048e0 <readGRAM+0xb38>)
 800469c:	f7fd fdfa 	bl	8002294 <PIN_LOW>
 80046a0:	2101      	movs	r1, #1
 80046a2:	488f      	ldr	r0, [pc, #572]	; (80048e0 <readGRAM+0xb38>)
 80046a4:	f7fd fdf6 	bl	8002294 <PIN_LOW>
 80046a8:	2101      	movs	r1, #1
 80046aa:	488d      	ldr	r0, [pc, #564]	; (80048e0 <readGRAM+0xb38>)
 80046ac:	f7fd fdf2 	bl	8002294 <PIN_LOW>
 80046b0:	2101      	movs	r1, #1
 80046b2:	488b      	ldr	r0, [pc, #556]	; (80048e0 <readGRAM+0xb38>)
 80046b4:	f7fd fdee 	bl	8002294 <PIN_LOW>
 80046b8:	2101      	movs	r1, #1
 80046ba:	4889      	ldr	r0, [pc, #548]	; (80048e0 <readGRAM+0xb38>)
 80046bc:	f7fd fdea 	bl	8002294 <PIN_LOW>
 80046c0:	2101      	movs	r1, #1
 80046c2:	4887      	ldr	r0, [pc, #540]	; (80048e0 <readGRAM+0xb38>)
 80046c4:	f7fd fde6 	bl	8002294 <PIN_LOW>
 80046c8:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <readGRAM+0xb38>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b83      	ldr	r3, [pc, #524]	; (80048e4 <readGRAM+0xb3c>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <readGRAM+0xb3c>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4313      	orrs	r3, r2
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <readGRAM+0xb3c>)
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	b2db      	uxtb	r3, r3
 800470a:	4313      	orrs	r3, r2
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b75      	ldr	r3, [pc, #468]	; (80048e4 <readGRAM+0xb3c>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <readGRAM+0xb38>)
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4313      	orrs	r3, r2
 800472e:	b2da      	uxtb	r2, r3
 8004730:	4b6d      	ldr	r3, [pc, #436]	; (80048e8 <readGRAM+0xb40>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b67      	ldr	r3, [pc, #412]	; (80048e0 <readGRAM+0xb38>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	0a5b      	lsrs	r3, r3, #9
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	75bb      	strb	r3, [r7, #22]
 8004754:	2101      	movs	r1, #1
 8004756:	4862      	ldr	r0, [pc, #392]	; (80048e0 <readGRAM+0xb38>)
 8004758:	f7fd fdac 	bl	80022b4 <PIN_HIGH>
 800475c:	2101      	movs	r1, #1
 800475e:	4860      	ldr	r0, [pc, #384]	; (80048e0 <readGRAM+0xb38>)
 8004760:	f7fd fda8 	bl	80022b4 <PIN_HIGH>
 8004764:	2101      	movs	r1, #1
 8004766:	485e      	ldr	r0, [pc, #376]	; (80048e0 <readGRAM+0xb38>)
 8004768:	f7fd fda4 	bl	80022b4 <PIN_HIGH>
 800476c:	2101      	movs	r1, #1
 800476e:	485c      	ldr	r0, [pc, #368]	; (80048e0 <readGRAM+0xb38>)
 8004770:	f7fd fd90 	bl	8002294 <PIN_LOW>
 8004774:	2101      	movs	r1, #1
 8004776:	485a      	ldr	r0, [pc, #360]	; (80048e0 <readGRAM+0xb38>)
 8004778:	f7fd fd8c 	bl	8002294 <PIN_LOW>
 800477c:	2101      	movs	r1, #1
 800477e:	4858      	ldr	r0, [pc, #352]	; (80048e0 <readGRAM+0xb38>)
 8004780:	f7fd fd88 	bl	8002294 <PIN_LOW>
 8004784:	2101      	movs	r1, #1
 8004786:	4856      	ldr	r0, [pc, #344]	; (80048e0 <readGRAM+0xb38>)
 8004788:	f7fd fd84 	bl	8002294 <PIN_LOW>
 800478c:	2101      	movs	r1, #1
 800478e:	4854      	ldr	r0, [pc, #336]	; (80048e0 <readGRAM+0xb38>)
 8004790:	f7fd fd80 	bl	8002294 <PIN_LOW>
 8004794:	2101      	movs	r1, #1
 8004796:	4852      	ldr	r0, [pc, #328]	; (80048e0 <readGRAM+0xb38>)
 8004798:	f7fd fd7c 	bl	8002294 <PIN_LOW>
 800479c:	2101      	movs	r1, #1
 800479e:	4850      	ldr	r0, [pc, #320]	; (80048e0 <readGRAM+0xb38>)
 80047a0:	f7fd fd78 	bl	8002294 <PIN_LOW>
 80047a4:	4b4e      	ldr	r3, [pc, #312]	; (80048e0 <readGRAM+0xb38>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <readGRAM+0xb3c>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <readGRAM+0xb3c>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <readGRAM+0xb3c>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <readGRAM+0xb3c>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <readGRAM+0xb38>)
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	b29b      	uxth	r3, r3
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	b29b      	uxth	r3, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	b29a      	uxth	r2, r3
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <readGRAM+0xb40>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	b29b      	uxth	r3, r3
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	b29b      	uxth	r3, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <readGRAM+0xb38>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	0a5b      	lsrs	r3, r3, #9
 8004824:	b29b      	uxth	r3, r3
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	b29b      	uxth	r3, r3
 800482c:	4313      	orrs	r3, r2
 800482e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004830:	2101      	movs	r1, #1
 8004832:	482b      	ldr	r0, [pc, #172]	; (80048e0 <readGRAM+0xb38>)
 8004834:	f7fd fd3e 	bl	80022b4 <PIN_HIGH>
 8004838:	2101      	movs	r1, #1
 800483a:	4829      	ldr	r0, [pc, #164]	; (80048e0 <readGRAM+0xb38>)
 800483c:	f7fd fd3a 	bl	80022b4 <PIN_HIGH>
 8004840:	7dbb      	ldrb	r3, [r7, #22]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	b21a      	sxth	r2, r3
 8004846:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800484a:	4313      	orrs	r3, r2
 800484c:	b21b      	sxth	r3, r3
 800484e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <readGRAM+0xb44>)
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 800485c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	b21a      	sxth	r2, r3
 8004864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b21b      	sxth	r3, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	b21b      	sxth	r3, r3
 800486e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8004870:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <readGRAM+0xb44>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 800487c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004880:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004884:	b21a      	sxth	r2, r3
 8004886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004888:	0adb      	lsrs	r3, r3, #11
 800488a:	b29b      	uxth	r3, r3
 800488c:	b21b      	sxth	r3, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	b21a      	sxth	r2, r3
 8004892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004894:	02db      	lsls	r3, r3, #11
 8004896:	b21b      	sxth	r3, r3
 8004898:	4313      	orrs	r3, r2
 800489a:	b21b      	sxth	r3, r3
 800489c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <readGRAM+0xb48>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <readGRAM+0xb0a>
 80048a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fd79 	bl	80023a0 <color555_to_565>
 80048ae:	4603      	mov	r3, r0
 80048b0:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	60ba      	str	r2, [r7, #8]
 80048b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80048ba:	801a      	strh	r2, [r3, #0]
            n--;
 80048bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <readGRAM+0xb44>)
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00f      	beq.n	80048f4 <readGRAM+0xb4c>
        while (n)
 80048d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f ad63 	bne.w	80043a4 <readGRAM+0x5fc>
 80048de:	e00a      	b.n	80048f6 <readGRAM+0xb4e>
 80048e0:	40020000 	.word	0x40020000
 80048e4:	40020400 	.word	0x40020400
 80048e8:	40020800 	.word	0x40020800
 80048ec:	200003fc 	.word	0x200003fc
 80048f0:	20000212 	.word	0x20000212
                break;
 80048f4:	bf00      	nop
        }
        if (++col >= w) {
 80048f6:	8bfb      	ldrh	r3, [r7, #30]
 80048f8:	3301      	adds	r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	83fb      	strh	r3, [r7, #30]
 80048fe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004906:	429a      	cmp	r2, r3
 8004908:	db0d      	blt.n	8004926 <readGRAM+0xb7e>
            col = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800490e:	8c3b      	ldrh	r3, [r7, #32]
 8004910:	3301      	adds	r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	843b      	strh	r3, [r7, #32]
 8004916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800491a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800491e:	429a      	cmp	r2, r3
 8004920:	db01      	blt.n	8004926 <readGRAM+0xb7e>
                row = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8004926:	2101      	movs	r1, #1
 8004928:	4814      	ldr	r0, [pc, #80]	; (800497c <readGRAM+0xbd4>)
 800492a:	f7fd fcc3 	bl	80022b4 <PIN_HIGH>
        CS_IDLE;
 800492e:	2101      	movs	r1, #1
 8004930:	4813      	ldr	r0, [pc, #76]	; (8004980 <readGRAM+0xbd8>)
 8004932:	f7fd fcbf 	bl	80022b4 <PIN_HIGH>
        setWriteDir();
 8004936:	f7fd fe15 	bl	8002564 <setWriteDir>
    while (n > 0) {
 800493a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800493e:	2b00      	cmp	r3, #0
 8004940:	f73f aa7e 	bgt.w	8003e40 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <readGRAM+0xbdc>)
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d110      	bne.n	8004972 <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8004950:	f7fd fcee 	bl	8002330 <width>
 8004954:	4603      	mov	r3, r0
 8004956:	3b01      	subs	r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	b21c      	sxth	r4, r3
 800495c:	f7fd fcf4 	bl	8002348 <height>
 8004960:	4603      	mov	r3, r0
 8004962:	3b01      	subs	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	b21b      	sxth	r3, r3
 8004968:	4622      	mov	r2, r4
 800496a:	2100      	movs	r1, #0
 800496c:	2000      	movs	r0, #0
 800496e:	f000 fb97 	bl	80050a0 <setAddrWindow>
    return 0;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	372c      	adds	r7, #44	; 0x2c
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}
 800497c:	40020000 	.word	0x40020000
 8004980:	40020400 	.word	0x40020400
 8004984:	200003fc 	.word	0x200003fc

08004988 <setRotation>:


void setRotation(uint8_t r)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8004992:	4bab      	ldr	r3, [pc, #684]	; (8004c40 <setRotation+0x2b8>)
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4ba8      	ldr	r3, [pc, #672]	; (8004c44 <setRotation+0x2bc>)
 80049a2:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80049a4:	4ba7      	ldr	r3, [pc, #668]	; (8004c44 <setRotation+0x2bc>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <setRotation+0x2e>
 80049b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80049b4:	e000      	b.n	80049b8 <setRotation+0x30>
 80049b6:	22f0      	movs	r2, #240	; 0xf0
 80049b8:	4ba3      	ldr	r3, [pc, #652]	; (8004c48 <setRotation+0x2c0>)
 80049ba:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80049bc:	4ba1      	ldr	r3, [pc, #644]	; (8004c44 <setRotation+0x2bc>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <setRotation+0x44>
 80049c8:	22f0      	movs	r2, #240	; 0xf0
 80049ca:	e001      	b.n	80049d0 <setRotation+0x48>
 80049cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80049d0:	4b9e      	ldr	r3, [pc, #632]	; (8004c4c <setRotation+0x2c4>)
 80049d2:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80049d4:	4b9b      	ldr	r3, [pc, #620]	; (8004c44 <setRotation+0x2bc>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d817      	bhi.n	8004a0c <setRotation+0x84>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <setRotation+0x5c>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	080049fb 	.word	0x080049fb
 80049ec:	08004a01 	.word	0x08004a01
 80049f0:	08004a07 	.word	0x08004a07
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80049f4:	2348      	movs	r3, #72	; 0x48
 80049f6:	72fb      	strb	r3, [r7, #11]
       break;
 80049f8:	e008      	b.n	8004a0c <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80049fa:	2328      	movs	r3, #40	; 0x28
 80049fc:	72fb      	strb	r3, [r7, #11]
       break;
 80049fe:	e005      	b.n	8004a0c <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004a00:	2398      	movs	r3, #152	; 0x98
 8004a02:	72fb      	strb	r3, [r7, #11]
       break;
 8004a04:	e002      	b.n	8004a0c <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8004a06:	23f8      	movs	r3, #248	; 0xf8
 8004a08:	72fb      	strb	r3, [r7, #11]
       break;
 8004a0a:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004a0c:	4b90      	ldr	r3, [pc, #576]	; (8004c50 <setRotation+0x2c8>)
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <setRotation+0x9c>
       val ^= 0x80;
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8004a24:	4b8a      	ldr	r3, [pc, #552]	; (8004c50 <setRotation+0x2c8>)
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <setRotation+0xb2>
       val ^= 0x40;
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8004a3a:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <setRotation+0x2c8>)
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <setRotation+0xc8>
       val ^= 0x08;
 8004a46:	7afb      	ldrb	r3, [r7, #11]
 8004a48:	f083 0308 	eor.w	r3, r3, #8
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004a50:	4b7f      	ldr	r3, [pc, #508]	; (8004c50 <setRotation+0x2c8>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8119 	beq.w	8004c90 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8004a5e:	4b7d      	ldr	r3, [pc, #500]	; (8004c54 <setRotation+0x2cc>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	f646 0214 	movw	r2, #26644	; 0x6814
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d128      	bne.n	8004abc <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	105b      	asrs	r3, r3, #1
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	105b      	asrs	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8004a94:	8a3b      	ldrh	r3, [r7, #16]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8004aa8:	233b      	movs	r3, #59	; 0x3b
 8004aaa:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	20b6      	movs	r0, #182	; 0xb6
 8004ab6:	f7fd ffd9 	bl	8002a6c <WriteCmdParamN>
           goto common_MC;
 8004aba:	e0a4      	b.n	8004c06 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004abc:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <setRotation+0x2cc>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	f641 1263 	movw	r2, #6499	; 0x1963
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <setRotation+0x158>
 8004ac8:	4b62      	ldr	r3, [pc, #392]	; (8004c54 <setRotation+0x2cc>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	f249 4281 	movw	r2, #38017	; 0x9481
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d005      	beq.n	8004ae0 <setRotation+0x158>
 8004ad4:	4b5f      	ldr	r3, [pc, #380]	; (8004c54 <setRotation+0x2cc>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f241 5211 	movw	r2, #5393	; 0x1511
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d139      	bne.n	8004b54 <setRotation+0x1cc>
           if (val & 0x80)
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da04      	bge.n	8004af2 <setRotation+0x16a>
               val |= 0x01;    //GS
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <setRotation+0x17e>
               val |= 0x02;    //SS
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8004b06:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <setRotation+0x2cc>)
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d104      	bne.n	8004b1c <setRotation+0x194>
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <setRotation+0x2cc>)
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	f249 4281 	movw	r2, #38017	; 0x9481
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d104      	bne.n	8004b32 <setRotation+0x1aa>
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8004b32:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <setRotation+0x2cc>)
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	f241 5211 	movw	r2, #5393	; 0x1511
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d160      	bne.n	8004c00 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8004b52:	e055      	b.n	8004c00 <setRotation+0x278>
      }
       else if (is8347) {
 8004b54:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <setRotation+0x2d0>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d053      	beq.n	8004c04 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <setRotation+0x2d4>)
 8004b5e:	2202      	movs	r2, #2
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <setRotation+0x2d8>)
 8004b64:	2206      	movs	r2, #6
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <setRotation+0x2dc>)
 8004b6a:	2222      	movs	r2, #34	; 0x22
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <setRotation+0x2e0>)
 8004b70:	2202      	movs	r2, #2
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <setRotation+0x2e4>)
 8004b76:	2204      	movs	r2, #4
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <setRotation+0x2e8>)
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <setRotation+0x2ec>)
 8004b82:	2208      	movs	r2, #8
 8004b84:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8004b86:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <setRotation+0x2cc>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2b65      	cmp	r3, #101	; 0x65
 8004b8c:	d121      	bne.n	8004bd2 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <setRotation+0x226>
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
 8004ba4:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <setRotation+0x23e>
 8004bb8:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <setRotation+0x2d4>)
 8004bba:	2282      	movs	r2, #130	; 0x82
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <setRotation+0x2d8>)
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	e005      	b.n	8004bd2 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8004bc6:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <setRotation+0x2d4>)
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <setRotation+0x2d8>)
 8004bce:	2282      	movs	r2, #130	; 0x82
 8004bd0:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <setRotation+0x2cc>)
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	f245 2252 	movw	r2, #21074	; 0x5252
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d129      	bne.n	8004c32 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8004be8:	7afb      	ldrb	r3, [r7, #11]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01f      	beq.n	8004c32 <setRotation+0x2aa>
 8004bf2:	7afb      	ldrb	r3, [r7, #11]
 8004bf4:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004bfe:	e018      	b.n	8004c32 <setRotation+0x2aa>
           goto common_MC;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <setRotation+0x27e>
       }
     common_MC:
 8004c04:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <setRotation+0x2d4>)
 8004c08:	222a      	movs	r2, #42	; 0x2a
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <setRotation+0x2d8>)
 8004c0e:	222b      	movs	r2, #43	; 0x2b
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <setRotation+0x2dc>)
 8004c14:	222c      	movs	r2, #44	; 0x2c
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <setRotation+0x2e0>)
 8004c1a:	222a      	movs	r2, #42	; 0x2a
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <setRotation+0x2e4>)
 8004c20:	222a      	movs	r2, #42	; 0x2a
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <setRotation+0x2e8>)
 8004c26:	222b      	movs	r2, #43	; 0x2b
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <setRotation+0x2ec>)
 8004c2c:	222b      	movs	r2, #43	; 0x2b
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e000      	b.n	8004c34 <setRotation+0x2ac>
			goto common_BGR;
 8004c32:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <setRotation+0x2d0>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <setRotation+0x2f0>
 8004c3c:	2316      	movs	r3, #22
 8004c3e:	e01c      	b.n	8004c7a <setRotation+0x2f2>
 8004c40:	20000400 	.word	0x20000400
 8004c44:	20000216 	.word	0x20000216
 8004c48:	20000008 	.word	0x20000008
 8004c4c:	2000000a 	.word	0x2000000a
 8004c50:	200003fc 	.word	0x200003fc
 8004c54:	2000040a 	.word	0x2000040a
 8004c58:	20000211 	.word	0x20000211
 8004c5c:	20000404 	.word	0x20000404
 8004c60:	20000402 	.word	0x20000402
 8004c64:	200003fa 	.word	0x200003fa
 8004c68:	20000406 	.word	0x20000406
 8004c6c:	2000040e 	.word	0x2000040e
 8004c70:	200003fe 	.word	0x200003fe
 8004c74:	20000408 	.word	0x20000408
 8004c78:	2336      	movs	r3, #54	; 0x36
 8004c7a:	f107 020b 	add.w	r2, r7, #11
 8004c7e:	2101      	movs	r1, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fd fef3 	bl	8002a6c <WriteCmdParamN>
       _lcd_madctl = val;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	4b77      	ldr	r3, [pc, #476]	; (8004e68 <setRotation+0x4e0>)
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	e0a5      	b.n	8004ddc <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8004c90:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <setRotation+0x4e4>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <setRotation+0x33c>
 8004c9c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	dc4f      	bgt.n	8004d44 <setRotation+0x3bc>
 8004ca4:	f249 3226 	movw	r2, #37670	; 0x9326
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <setRotation+0x33c>
 8004cac:	f249 3226 	movw	r2, #37670	; 0x9326
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	dc47      	bgt.n	8004d44 <setRotation+0x3bc>
 8004cb4:	f245 4220 	movw	r2, #21536	; 0x5420
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <setRotation+0x33c>
 8004cbc:	f247 7293 	movw	r2, #30611	; 0x7793
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d13f      	bne.n	8004d44 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <setRotation+0x4e8>)
 8004cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	4b69      	ldr	r3, [pc, #420]	; (8004e74 <setRotation+0x4ec>)
 8004cce:	f240 2201 	movw	r2, #513	; 0x201
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <setRotation+0x4f0>)
 8004cd6:	f240 2202 	movw	r2, #514	; 0x202
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <setRotation+0x4f4>)
 8004cde:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	4b66      	ldr	r3, [pc, #408]	; (8004e80 <setRotation+0x4f8>)
 8004ce6:	f240 2211 	movw	r2, #529	; 0x211
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <setRotation+0x4fc>)
 8004cee:	f240 2212 	movw	r2, #530	; 0x212
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <setRotation+0x500>)
 8004cf6:	f240 2213 	movw	r2, #531	; 0x213
 8004cfa:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d0a:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004d0c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004d10:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <setRotation+0x4e4>)
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	f249 3226 	movw	r2, #37670	; 0x9326
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d005      	beq.n	8004d2a <setRotation+0x3a2>
 8004d1e:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <setRotation+0x4e4>)
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	f245 4220 	movw	r2, #21536	; 0x5420
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d102      	bne.n	8004d30 <setRotation+0x3a8>
 8004d2a:	8abb      	ldrh	r3, [r7, #20]
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8004d30:	8a3a      	ldrh	r2, [r7, #16]
 8004d32:	8abb      	ldrh	r3, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004d3e:	f7fd fbbe 	bl	80024be <WriteCmdData>
           goto common_SS;
 8004d42:	e024      	b.n	8004d8e <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <setRotation+0x4e8>)
 8004d46:	2220      	movs	r2, #32
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	; (8004e74 <setRotation+0x4ec>)
 8004d4c:	2221      	movs	r2, #33	; 0x21
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <setRotation+0x4f0>)
 8004d52:	2222      	movs	r2, #34	; 0x22
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <setRotation+0x4f4>)
 8004d58:	2250      	movs	r2, #80	; 0x50
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <setRotation+0x4f8>)
 8004d5e:	2251      	movs	r2, #81	; 0x51
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	4b48      	ldr	r3, [pc, #288]	; (8004e84 <setRotation+0x4fc>)
 8004d64:	2252      	movs	r2, #82	; 0x52
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <setRotation+0x500>)
 8004d6a:	2253      	movs	r2, #83	; 0x53
 8004d6c:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d7c:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8004d7e:	8a3b      	ldrh	r3, [r7, #16]
 8004d80:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4619      	mov	r1, r3
 8004d88:	2060      	movs	r0, #96	; 0x60
 8004d8a:	f7fd fb98 	bl	80024be <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004d9a:	89fb      	ldrh	r3, [r7, #14]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f7fd fb8d 	bl	80024be <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	109b      	asrs	r3, r3, #2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8004db0:	7afb      	ldrb	r3, [r7, #11]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8004dba:	8afb      	ldrh	r3, [r7, #22]
 8004dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dc0:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <setRotation+0x4e0>)
 8004dcc:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004dce:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <setRotation+0x4e0>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	f7fd fb72 	bl	80024be <WriteCmdData>
           break;
 8004dda:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <setRotation+0x504>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d023      	beq.n	8004e30 <setRotation+0x4a8>
 8004de8:	4b29      	ldr	r3, [pc, #164]	; (8004e90 <setRotation+0x508>)
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11d      	bne.n	8004e30 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <setRotation+0x4e8>)
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	81bb      	strh	r3, [r7, #12]
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <setRotation+0x4ec>)
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <setRotation+0x4e8>)
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <setRotation+0x4ec>)
 8004e04:	89bb      	ldrh	r3, [r7, #12]
 8004e06:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <setRotation+0x4f4>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	81bb      	strh	r3, [r7, #12]
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <setRotation+0x4fc>)
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <setRotation+0x4f4>)
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <setRotation+0x4fc>)
 8004e18:	89bb      	ldrh	r3, [r7, #12]
 8004e1a:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <setRotation+0x4f8>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	81bb      	strh	r3, [r7, #12]
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <setRotation+0x500>)
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <setRotation+0x4f8>)
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <setRotation+0x500>)
 8004e2c:	89bb      	ldrh	r3, [r7, #12]
 8004e2e:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8004e30:	f7fd fa7e 	bl	8002330 <width>
 8004e34:	4603      	mov	r3, r0
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b21c      	sxth	r4, r3
 8004e3c:	f7fd fa84 	bl	8002348 <height>
 8004e40:	4603      	mov	r3, r0
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	b21b      	sxth	r3, r3
 8004e48:	4622      	mov	r2, r4
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f000 f927 	bl	80050a0 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8004e52:	2200      	movs	r2, #0
 8004e54:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f000 fa45 	bl	80052e8 <vertScroll>
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd90      	pop	{r4, r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000410 	.word	0x20000410
 8004e6c:	2000040a 	.word	0x2000040a
 8004e70:	20000404 	.word	0x20000404
 8004e74:	20000402 	.word	0x20000402
 8004e78:	200003fa 	.word	0x200003fa
 8004e7c:	20000406 	.word	0x20000406
 8004e80:	2000040e 	.word	0x2000040e
 8004e84:	200003fe 	.word	0x200003fe
 8004e88:	20000408 	.word	0x20000408
 8004e8c:	20000216 	.word	0x20000216
 8004e90:	200003fc 	.word	0x200003fc

08004e94 <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	80bb      	strh	r3, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8004ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f2c0 80e7 	blt.w	800507e <drawPixel+0x1ea>
 8004eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f2c0 80e2 	blt.w	800507e <drawPixel+0x1ea>
 8004eba:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004ebe:	f7fd fa37 	bl	8002330 <width>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	f280 80da 	bge.w	800507e <drawPixel+0x1ea>
 8004eca:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004ece:	f7fd fa3b 	bl	8002348 <height>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	f280 80d2 	bge.w	800507e <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004eda:	4b6b      	ldr	r3, [pc, #428]	; (8005088 <drawPixel+0x1f4>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <drawPixel+0x5a>
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd fa3b 	bl	8002360 <color565_to_555>
 8004eea:	4603      	mov	r3, r0
 8004eec:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004eee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ef6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004efa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004efe:	f000 f8cf 	bl	80050a0 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8004f02:	4b62      	ldr	r3, [pc, #392]	; (800508c <drawPixel+0x1f8>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80b1 	beq.w	800506e <drawPixel+0x1da>
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4860      	ldr	r0, [pc, #384]	; (8005090 <drawPixel+0x1fc>)
 8004f10:	f7fd f9c0 	bl	8002294 <PIN_LOW>
 8004f14:	2110      	movs	r1, #16
 8004f16:	485f      	ldr	r0, [pc, #380]	; (8005094 <drawPixel+0x200>)
 8004f18:	f7fd f9bc 	bl	8002294 <PIN_LOW>
 8004f1c:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <drawPixel+0x204>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <drawPixel+0x204>)
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	73bb      	strb	r3, [r7, #14]
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <drawPixel+0x200>)
 8004f2e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004f32:	619a      	str	r2, [r3, #24]
 8004f34:	4b56      	ldr	r3, [pc, #344]	; (8005090 <drawPixel+0x1fc>)
 8004f36:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004f3a:	619a      	str	r2, [r3, #24]
 8004f3c:	4b57      	ldr	r3, [pc, #348]	; (800509c <drawPixel+0x208>)
 8004f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f42:	619a      	str	r2, [r3, #24]
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f54:	431a      	orrs	r2, r3
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <drawPixel+0x200>)
 8004f62:	619a      	str	r2, [r3, #24]
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	105b      	asrs	r3, r3, #1
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	431a      	orrs	r2, r3
 8004f88:	4b41      	ldr	r3, [pc, #260]	; (8005090 <drawPixel+0x1fc>)
 8004f8a:	619a      	str	r2, [r3, #24]
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	019b      	lsls	r3, r3, #6
 8004f90:	4a42      	ldr	r2, [pc, #264]	; (800509c <drawPixel+0x208>)
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	6193      	str	r3, [r2, #24]
 8004f98:	2102      	movs	r1, #2
 8004f9a:	483e      	ldr	r0, [pc, #248]	; (8005094 <drawPixel+0x200>)
 8004f9c:	f7fd f97a 	bl	8002294 <PIN_LOW>
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	483c      	ldr	r0, [pc, #240]	; (8005094 <drawPixel+0x200>)
 8004fa4:	f7fd f976 	bl	8002294 <PIN_LOW>
 8004fa8:	2102      	movs	r1, #2
 8004faa:	483a      	ldr	r0, [pc, #232]	; (8005094 <drawPixel+0x200>)
 8004fac:	f7fd f972 	bl	8002294 <PIN_LOW>
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4838      	ldr	r0, [pc, #224]	; (8005094 <drawPixel+0x200>)
 8004fb4:	f7fd f97e 	bl	80022b4 <PIN_HIGH>
 8004fb8:	2102      	movs	r1, #2
 8004fba:	4836      	ldr	r0, [pc, #216]	; (8005094 <drawPixel+0x200>)
 8004fbc:	f7fd f97a 	bl	80022b4 <PIN_HIGH>
 8004fc0:	4b34      	ldr	r3, [pc, #208]	; (8005094 <drawPixel+0x200>)
 8004fc2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004fc6:	619a      	str	r2, [r3, #24]
 8004fc8:	4b31      	ldr	r3, [pc, #196]	; (8005090 <drawPixel+0x1fc>)
 8004fca:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004fce:	619a      	str	r2, [r3, #24]
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <drawPixel+0x208>)
 8004fd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fd6:	619a      	str	r2, [r3, #24]
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	025b      	lsls	r3, r3, #9
 8004fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <drawPixel+0x200>)
 8004ff6:	619a      	str	r2, [r3, #24]
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005000:	7bbb      	ldrb	r3, [r7, #14]
 8005002:	105b      	asrs	r3, r3, #1
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	431a      	orrs	r2, r3
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	431a      	orrs	r2, r3
 8005014:	7bbb      	ldrb	r3, [r7, #14]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	431a      	orrs	r2, r3
 800501c:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <drawPixel+0x1fc>)
 800501e:	619a      	str	r2, [r3, #24]
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	019b      	lsls	r3, r3, #6
 8005024:	4a1d      	ldr	r2, [pc, #116]	; (800509c <drawPixel+0x208>)
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	6193      	str	r3, [r2, #24]
 800502c:	2102      	movs	r1, #2
 800502e:	4819      	ldr	r0, [pc, #100]	; (8005094 <drawPixel+0x200>)
 8005030:	f7fd f930 	bl	8002294 <PIN_LOW>
 8005034:	2102      	movs	r1, #2
 8005036:	4817      	ldr	r0, [pc, #92]	; (8005094 <drawPixel+0x200>)
 8005038:	f7fd f92c 	bl	8002294 <PIN_LOW>
 800503c:	2102      	movs	r1, #2
 800503e:	4815      	ldr	r0, [pc, #84]	; (8005094 <drawPixel+0x200>)
 8005040:	f7fd f928 	bl	8002294 <PIN_LOW>
 8005044:	2102      	movs	r1, #2
 8005046:	4813      	ldr	r0, [pc, #76]	; (8005094 <drawPixel+0x200>)
 8005048:	f7fd f934 	bl	80022b4 <PIN_HIGH>
 800504c:	2102      	movs	r1, #2
 800504e:	4811      	ldr	r0, [pc, #68]	; (8005094 <drawPixel+0x200>)
 8005050:	f7fd f930 	bl	80022b4 <PIN_HIGH>
 8005054:	2110      	movs	r1, #16
 8005056:	480f      	ldr	r0, [pc, #60]	; (8005094 <drawPixel+0x200>)
 8005058:	f7fd f92c 	bl	80022b4 <PIN_HIGH>
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd faae 	bl	80025c0 <write24>
 8005064:	2101      	movs	r1, #1
 8005066:	480a      	ldr	r0, [pc, #40]	; (8005090 <drawPixel+0x1fc>)
 8005068:	f7fd f924 	bl	80022b4 <PIN_HIGH>
 800506c:	e008      	b.n	8005080 <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <drawPixel+0x204>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fa21 	bl	80024be <WriteCmdData>
 800507c:	e000      	b.n	8005080 <drawPixel+0x1ec>
       return;
 800507e:	bf00      	nop
}
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	20000212 	.word	0x20000212
 800508c:	20000213 	.word	0x20000213
 8005090:	40020400 	.word	0x40020400
 8005094:	40020000 	.word	0x40020000
 8005098:	200003fa 	.word	0x200003fa
 800509c:	40020800 	.word	0x40020800

080050a0 <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	80fb      	strh	r3, [r7, #6]
 80050b2:	4603      	mov	r3, r0
 80050b4:	80bb      	strh	r3, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
 80050ba:	4613      	mov	r3, r2
 80050bc:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80050be:	4b80      	ldr	r3, [pc, #512]	; (80052c0 <setAddrWindow+0x220>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	f249 3227 	movw	r2, #37671	; 0x9327
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d117      	bne.n	80050fa <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80050ca:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <setAddrWindow+0x224>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d107      	bne.n	80050e2 <setAddrWindow+0x42>
 80050d2:	88bb      	ldrh	r3, [r7, #4]
 80050d4:	3320      	adds	r3, #32
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	80bb      	strh	r3, [r7, #4]
 80050da:	883b      	ldrh	r3, [r7, #0]
 80050dc:	3320      	adds	r3, #32
 80050de:	b29b      	uxth	r3, r3
 80050e0:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80050e2:	4b78      	ldr	r3, [pc, #480]	; (80052c4 <setAddrWindow+0x224>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d107      	bne.n	80050fa <setAddrWindow+0x5a>
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	3320      	adds	r3, #32
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	80fb      	strh	r3, [r7, #6]
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	3320      	adds	r3, #32
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80050fa:	4b71      	ldr	r3, [pc, #452]	; (80052c0 <setAddrWindow+0x220>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f241 5226 	movw	r2, #5414	; 0x1526
 8005102:	4293      	cmp	r3, r2
 8005104:	d128      	bne.n	8005158 <setAddrWindow+0xb8>
 8005106:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <setAddrWindow+0x224>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	81fb      	strh	r3, [r7, #14]
 800511c:	883a      	ldrh	r2, [r7, #0]
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8005126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <setAddrWindow+0x9c>
 800512e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005132:	b29b      	uxth	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	803b      	strh	r3, [r7, #0]
 800513a:	e00d      	b.n	8005158 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 800513c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <setAddrWindow+0xb8>
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	89bb      	ldrh	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	807b      	strh	r3, [r7, #2]
 800514e:	883a      	ldrh	r2, [r7, #0]
 8005150:	89bb      	ldrh	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b29b      	uxth	r3, r3
 8005156:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <setAddrWindow+0x228>)
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d054      	beq.n	800520e <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <setAddrWindow+0x22c>)
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b2d8      	uxtb	r0, r3
 800516a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516e:	121b      	asrs	r3, r3, #8
 8005170:	b21b      	sxth	r3, r3
 8005172:	b2d9      	uxtb	r1, r3
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800517c:	121b      	asrs	r3, r3, #8
 800517e:	b21b      	sxth	r3, r3
 8005180:	b2dc      	uxtb	r4, r3
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4623      	mov	r3, r4
 800518a:	f7fd fe3d 	bl	8002e08 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 800518e:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <setAddrWindow+0x230>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b2d8      	uxtb	r0, r3
 8005194:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005198:	121b      	asrs	r3, r3, #8
 800519a:	b21b      	sxth	r3, r3
 800519c:	b2d9      	uxtb	r1, r3
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80051a6:	121b      	asrs	r3, r3, #8
 80051a8:	b21b      	sxth	r3, r3
 80051aa:	b2dc      	uxtb	r4, r3
 80051ac:	883b      	ldrh	r3, [r7, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fd fe28 	bl	8002e08 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <setAddrWindow+0x234>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d07b      	beq.n	80052b8 <setAddrWindow+0x218>
 80051c0:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <setAddrWindow+0x220>)
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	2b65      	cmp	r3, #101	; 0x65
 80051c6:	d177      	bne.n	80052b8 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80051c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051cc:	121b      	asrs	r3, r3, #8
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	723b      	strb	r3, [r7, #8]
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80051da:	4b3f      	ldr	r3, [pc, #252]	; (80052d8 <setAddrWindow+0x238>)
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	f107 0208 	add.w	r2, r7, #8
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd fc41 	bl	8002a6c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80051ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051ee:	121b      	asrs	r3, r3, #8
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	723b      	strb	r3, [r7, #8]
 80051f6:	88bb      	ldrh	r3, [r7, #4]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80051fc:	4b37      	ldr	r3, [pc, #220]	; (80052dc <setAddrWindow+0x23c>)
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	f107 0208 	add.w	r2, r7, #8
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd fc30 	bl	8002a6c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 800520c:	e054      	b.n	80052b8 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <setAddrWindow+0x238>)
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd f951 	bl	80024be <WriteCmdData>
       WriteCmdData(_MP, y);
 800521c:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <setAddrWindow+0x23c>)
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	88ba      	ldrh	r2, [r7, #4]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd f94a 	bl	80024be <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800522a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800522e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005232:	429a      	cmp	r2, r3
 8005234:	d105      	bne.n	8005242 <setAddrWindow+0x1a2>
 8005236:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800523a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800523e:	429a      	cmp	r2, r3
 8005240:	d03a      	beq.n	80052b8 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <setAddrWindow+0x228>)
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <setAddrWindow+0x1e0>
               if (rotation & 1)
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <setAddrWindow+0x224>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800525a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	b21a      	sxth	r2, r3
 8005262:	88bb      	ldrh	r3, [r7, #4]
 8005264:	4313      	orrs	r3, r2
 8005266:	80bb      	strh	r3, [r7, #4]
 8005268:	88bb      	ldrh	r3, [r7, #4]
 800526a:	803b      	strh	r3, [r7, #0]
 800526c:	e008      	b.n	8005280 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 800526e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	b21a      	sxth	r2, r3
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	4313      	orrs	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <setAddrWindow+0x22c>)
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f7fd f918 	bl	80024be <WriteCmdData>
           WriteCmdData(_SP, y);
 800528e:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <setAddrWindow+0x230>)
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	88ba      	ldrh	r2, [r7, #4]
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd f911 	bl	80024be <WriteCmdData>
           WriteCmdData(_EC, x1);
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <setAddrWindow+0x240>)
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	887a      	ldrh	r2, [r7, #2]
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fd f90a 	bl	80024be <WriteCmdData>
           WriteCmdData(_EP, y1);
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <setAddrWindow+0x244>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	883a      	ldrh	r2, [r7, #0]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd f903 	bl	80024be <WriteCmdData>
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}
 80052c0:	2000040a 	.word	0x2000040a
 80052c4:	20000216 	.word	0x20000216
 80052c8:	200003fc 	.word	0x200003fc
 80052cc:	20000406 	.word	0x20000406
 80052d0:	200003fe 	.word	0x200003fe
 80052d4:	20000211 	.word	0x20000211
 80052d8:	20000404 	.word	0x20000404
 80052dc:	20000402 	.word	0x20000402
 80052e0:	2000040e 	.word	0x2000040e
 80052e4:	20000408 	.word	0x20000408

080052e8 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]
 80052f2:	460b      	mov	r3, r1
 80052f4:	80bb      	strh	r3, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80052fa:	4b89      	ldr	r3, [pc, #548]	; (8005520 <vertScroll+0x238>)
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	f249 3227 	movw	r2, #37671	; 0x9327
 8005302:	4293      	cmp	r3, r2
 8005304:	d10b      	bne.n	800531e <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8005306:	4b87      	ldr	r3, [pc, #540]	; (8005524 <vertScroll+0x23c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d003      	beq.n	8005316 <vertScroll+0x2e>
 800530e:	4b85      	ldr	r3, [pc, #532]	; (8005524 <vertScroll+0x23c>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d103      	bne.n	800531e <vertScroll+0x36>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	3320      	adds	r3, #32
 800531a:	b29b      	uxth	r3, r3
 800531c:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	88bb      	ldrh	r3, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800532a:	b29b      	uxth	r3, r3
 800532c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8005332:	4b7b      	ldr	r3, [pc, #492]	; (8005520 <vertScroll+0x238>)
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	f249 3227 	movw	r2, #37671	; 0x9327
 800533a:	4293      	cmp	r3, r2
 800533c:	d103      	bne.n	8005346 <vertScroll+0x5e>
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	3320      	adds	r3, #32
 8005342:	b29b      	uxth	r3, r3
 8005344:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8005346:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800534a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800534e:	425b      	negs	r3, r3
 8005350:	429a      	cmp	r2, r3
 8005352:	dd05      	ble.n	8005360 <vertScroll+0x78>
 8005354:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	db01      	blt.n	8005364 <vertScroll+0x7c>
 8005360:	2300      	movs	r3, #0
 8005362:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	4413      	add	r3, r2
 800536a:	b29b      	uxth	r3, r3
 800536c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 800536e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005372:	2b00      	cmp	r3, #0
 8005374:	da04      	bge.n	8005380 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8005376:	8aba      	ldrh	r2, [r7, #20]
 8005378:	88bb      	ldrh	r3, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	b29b      	uxth	r3, r3
 800537e:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800538e:	4b66      	ldr	r3, [pc, #408]	; (8005528 <vertScroll+0x240>)
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d071      	beq.n	800547e <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800539a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539e:	121b      	asrs	r3, r3, #8
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80053ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053b0:	121b      	asrs	r3, r3, #8
 80053b2:	b21b      	sxth	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80053b8:	88bb      	ldrh	r3, [r7, #4]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80053be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053c2:	121b      	asrs	r3, r3, #8
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80053ca:	8afb      	ldrh	r3, [r7, #22]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80053d0:	4b56      	ldr	r3, [pc, #344]	; (800552c <vertScroll+0x244>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <vertScroll+0xf4>
 80053d8:	230e      	movs	r3, #14
 80053da:	e000      	b.n	80053de <vertScroll+0xf6>
 80053dc:	2333      	movs	r3, #51	; 0x33
 80053de:	f107 020c 	add.w	r2, r7, #12
 80053e2:	2106      	movs	r1, #6
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fd fb41 	bl	8002a6c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80053ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053ee:	121b      	asrs	r3, r3, #8
 80053f0:	b21b      	sxth	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80053f6:	8abb      	ldrh	r3, [r7, #20]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80053fc:	4b4b      	ldr	r3, [pc, #300]	; (800552c <vertScroll+0x244>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <vertScroll+0x120>
 8005404:	2314      	movs	r3, #20
 8005406:	e000      	b.n	800540a <vertScroll+0x122>
 8005408:	2337      	movs	r3, #55	; 0x37
 800540a:	f107 020c 	add.w	r2, r7, #12
 800540e:	2102      	movs	r1, #2
 8005410:	4618      	mov	r0, r3
 8005412:	f7fd fb2b 	bl	8002a6c <WriteCmdParamN>
		if (is8347) {
 8005416:	4b45      	ldr	r3, [pc, #276]	; (800552c <vertScroll+0x244>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01f      	beq.n	800545e <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 800541e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <vertScroll+0x152>
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <vertScroll+0x238>)
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	f248 3247 	movw	r2, #33607	; 0x8347
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <vertScroll+0x14e>
 8005432:	2302      	movs	r3, #2
 8005434:	e002      	b.n	800543c <vertScroll+0x154>
 8005436:	2308      	movs	r3, #8
 8005438:	e000      	b.n	800543c <vertScroll+0x154>
 800543a:	2300      	movs	r3, #0
 800543c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <vertScroll+0x238>)
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	f248 3247 	movw	r2, #33607	; 0x8347
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <vertScroll+0x166>
 800544a:	2318      	movs	r3, #24
 800544c:	e000      	b.n	8005450 <vertScroll+0x168>
 800544e:	2301      	movs	r3, #1
 8005450:	f107 020c 	add.w	r2, r7, #12
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fb08 	bl	8002a6c <WriteCmdParamN>
 800545c:	e05d      	b.n	800551a <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800545e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d159      	bne.n	800551a <vertScroll+0x232>
 8005466:	4b30      	ldr	r3, [pc, #192]	; (8005528 <vertScroll+0x240>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d053      	beq.n	800551a <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8005472:	2200      	movs	r2, #0
 8005474:	2100      	movs	r1, #0
 8005476:	2013      	movs	r0, #19
 8005478:	f7fd faf8 	bl	8002a6c <WriteCmdParamN>
 800547c:	e04d      	b.n	800551a <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <vertScroll+0x238>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005486:	4293      	cmp	r3, r2
 8005488:	d027      	beq.n	80054da <vertScroll+0x1f2>
 800548a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800548e:	4293      	cmp	r3, r2
 8005490:	dc34      	bgt.n	80054fc <vertScroll+0x214>
 8005492:	f249 3226 	movw	r2, #37670	; 0x9326
 8005496:	4293      	cmp	r3, r2
 8005498:	d01f      	beq.n	80054da <vertScroll+0x1f2>
 800549a:	f249 3226 	movw	r2, #37670	; 0x9326
 800549e:	4293      	cmp	r3, r2
 80054a0:	dc2c      	bgt.n	80054fc <vertScroll+0x214>
 80054a2:	f247 7293 	movw	r2, #30611	; 0x7793
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <vertScroll+0x1f2>
 80054aa:	f247 7293 	movw	r2, #30611	; 0x7793
 80054ae:	4293      	cmp	r3, r2
 80054b0:	dc24      	bgt.n	80054fc <vertScroll+0x214>
 80054b2:	f245 4220 	movw	r2, #21536	; 0x5420
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <vertScroll+0x1f2>
 80054ba:	f247 7283 	movw	r2, #30595	; 0x7783
 80054be:	4293      	cmp	r3, r2
 80054c0:	d11c      	bne.n	80054fc <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <vertScroll+0x248>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	2061      	movs	r0, #97	; 0x61
 80054ca:	f7fc fff8 	bl	80024be <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80054ce:	8abb      	ldrh	r3, [r7, #20]
 80054d0:	4619      	mov	r1, r3
 80054d2:	206a      	movs	r0, #106	; 0x6a
 80054d4:	f7fc fff3 	bl	80024be <WriteCmdData>
        break;
 80054d8:	e01f      	b.n	800551a <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <vertScroll+0x248>)
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	f043 0302 	orr.w	r3, r3, #2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4619      	mov	r1, r3
 80054e6:	f240 4001 	movw	r0, #1025	; 0x401
 80054ea:	f7fc ffe8 	bl	80024be <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80054ee:	8abb      	ldrh	r3, [r7, #20]
 80054f0:	4619      	mov	r1, r3
 80054f2:	f240 4004 	movw	r0, #1028	; 0x404
 80054f6:	f7fc ffe2 	bl	80024be <WriteCmdData>
        break;
 80054fa:	e00e      	b.n	800551a <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <vertScroll+0x248>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	b29b      	uxth	r3, r3
 8005506:	4619      	mov	r1, r3
 8005508:	2061      	movs	r0, #97	; 0x61
 800550a:	f7fc ffd8 	bl	80024be <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800550e:	8abb      	ldrh	r3, [r7, #20]
 8005510:	4619      	mov	r1, r3
 8005512:	206a      	movs	r0, #106	; 0x6a
 8005514:	f7fc ffd3 	bl	80024be <WriteCmdData>
        break;
 8005518:	bf00      	nop
    }
}
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000040a 	.word	0x2000040a
 8005524:	20000216 	.word	0x20000216
 8005528:	200003fc 	.word	0x200003fc
 800552c:	20000211 	.word	0x20000211
 8005530:	20000400 	.word	0x20000400

08005534 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af02      	add	r7, sp, #8
 800553a:	4603      	mov	r3, r0
 800553c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <fillScreen+0x2c>)
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b21a      	sxth	r2, r3
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <fillScreen+0x30>)
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b219      	sxth	r1, r3
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	460b      	mov	r3, r1
 8005550:	2100      	movs	r1, #0
 8005552:	2000      	movs	r0, #0
 8005554:	f000 f8c4 	bl	80056e0 <fillRect>
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000008 	.word	0x20000008
 8005564:	2000000a 	.word	0x2000000a

08005568 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8005572:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <invertDisplay+0x13c>)
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	b21a      	sxth	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	b21b      	sxth	r3, r3
 800558a:	4053      	eors	r3, r2
 800558c:	b21b      	sxth	r3, r3
 800558e:	b29a      	uxth	r2, r3
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <invertDisplay+0x140>)
 8005592:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8005594:	4b43      	ldr	r3, [pc, #268]	; (80056a4 <invertDisplay+0x13c>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d035      	beq.n	800560c <invertDisplay+0xa4>
        if (is8347) {
 80055a0:	4b42      	ldr	r3, [pc, #264]	; (80056ac <invertDisplay+0x144>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d024      	beq.n	80055f2 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80055a8:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <invertDisplay+0x148>)
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	f248 3247 	movw	r2, #33607	; 0x8347
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d005      	beq.n	80055c0 <invertDisplay+0x58>
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <invertDisplay+0x148>)
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	f245 2252 	movw	r2, #21074	; 0x5252
 80055bc:	4293      	cmp	r3, r2
 80055be:	d108      	bne.n	80055d2 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80055c0:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <invertDisplay+0x140>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <invertDisplay+0x64>
 80055c8:	2306      	movs	r3, #6
 80055ca:	e000      	b.n	80055ce <invertDisplay+0x66>
 80055cc:	2302      	movs	r3, #2
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e007      	b.n	80055e2 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80055d2:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <invertDisplay+0x140>)
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <invertDisplay+0x76>
 80055da:	2308      	movs	r3, #8
 80055dc:	e000      	b.n	80055e0 <invertDisplay+0x78>
 80055de:	230a      	movs	r3, #10
 80055e0:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80055e2:	f107 030f 	add.w	r3, r7, #15
 80055e6:	461a      	mov	r2, r3
 80055e8:	2101      	movs	r1, #1
 80055ea:	2001      	movs	r0, #1
 80055ec:	f7fd fa3e 	bl	8002a6c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80055f0:	e055      	b.n	800569e <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <invertDisplay+0x140>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <invertDisplay+0x96>
 80055fa:	2321      	movs	r3, #33	; 0x21
 80055fc:	e000      	b.n	8005600 <invertDisplay+0x98>
 80055fe:	2320      	movs	r3, #32
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd fa31 	bl	8002a6c <WriteCmdParamN>
 800560a:	e048      	b.n	800569e <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800560c:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <invertDisplay+0x148>)
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005614:	4293      	cmp	r3, r2
 8005616:	d030      	beq.n	800567a <invertDisplay+0x112>
 8005618:	f24b 5209 	movw	r2, #46345	; 0xb509
 800561c:	4293      	cmp	r3, r2
 800561e:	dc37      	bgt.n	8005690 <invertDisplay+0x128>
 8005620:	f249 3226 	movw	r2, #37670	; 0x9326
 8005624:	4293      	cmp	r3, r2
 8005626:	d028      	beq.n	800567a <invertDisplay+0x112>
 8005628:	f249 3226 	movw	r2, #37670	; 0x9326
 800562c:	4293      	cmp	r3, r2
 800562e:	dc2f      	bgt.n	8005690 <invertDisplay+0x128>
 8005630:	f249 2225 	movw	r2, #37413	; 0x9225
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <invertDisplay+0xf8>
 8005638:	f249 2225 	movw	r2, #37413	; 0x9225
 800563c:	4293      	cmp	r3, r2
 800563e:	dc27      	bgt.n	8005690 <invertDisplay+0x128>
 8005640:	f247 7293 	movw	r2, #30611	; 0x7793
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <invertDisplay+0x112>
 8005648:	f247 7293 	movw	r2, #30611	; 0x7793
 800564c:	4293      	cmp	r3, r2
 800564e:	dc1f      	bgt.n	8005690 <invertDisplay+0x128>
 8005650:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005654:	d004      	beq.n	8005660 <invertDisplay+0xf8>
 8005656:	f245 4220 	movw	r2, #21536	; 0x5420
 800565a:	4293      	cmp	r3, r2
 800565c:	d00d      	beq.n	800567a <invertDisplay+0x112>
 800565e:	e017      	b.n	8005690 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <invertDisplay+0x140>)
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	b21b      	sxth	r3, r3
 8005668:	f043 0313 	orr.w	r3, r3, #19
 800566c:	b21b      	sxth	r3, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	2007      	movs	r0, #7
 8005674:	f7fc ff23 	bl	80024be <WriteCmdData>
        break;
 8005678:	e011      	b.n	800569e <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <invertDisplay+0x140>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	b29b      	uxth	r3, r3
 8005684:	4619      	mov	r1, r3
 8005686:	f240 4001 	movw	r0, #1025	; 0x401
 800568a:	f7fc ff18 	bl	80024be <WriteCmdData>
        break;
 800568e:	e006      	b.n	800569e <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <invertDisplay+0x140>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	4619      	mov	r1, r3
 8005696:	2061      	movs	r0, #97	; 0x61
 8005698:	f7fc ff11 	bl	80024be <WriteCmdData>
        break;
 800569c:	bf00      	nop
    }
}
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200003fc 	.word	0x200003fc
 80056a8:	20000400 	.word	0x20000400
 80056ac:	20000211 	.word	0x20000211
 80056b0:	2000040a 	.word	0x2000040a

080056b4 <writePixel>:
	fillRect(x, y, w, 1, color);
}


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	80fb      	strh	r3, [r7, #6]
 80056be:	460b      	mov	r3, r1
 80056c0:	80bb      	strh	r3, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fbdf 	bl	8004e94 <drawPixel>
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	80fb      	strh	r3, [r7, #6]
 80056f2:	4603      	mov	r3, r0
 80056f4:	80bb      	strh	r3, [r7, #4]
 80056f6:	460b      	mov	r3, r1
 80056f8:	807b      	strh	r3, [r7, #2]
 80056fa:	4613      	mov	r3, r2
 80056fc:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80056fe:	4b95      	ldr	r3, [pc, #596]	; (8005954 <fillRect+0x274>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <fillRect+0x32>
 8005706:	8c3b      	ldrh	r3, [r7, #32]
 8005708:	4618      	mov	r0, r3
 800570a:	f7fc fe29 	bl	8002360 <color565_to_555>
 800570e:	4603      	mov	r3, r0
 8005710:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8005712:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da08      	bge.n	800572c <fillRect+0x4c>
        w = -w;
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	425b      	negs	r3, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	807b      	strh	r3, [r7, #2]
        x -= w;
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	4413      	add	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8005736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da01      	bge.n	8005742 <fillRect+0x62>
        x = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8005742:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005746:	f7fc fdf3 	bl	8002330 <width>
 800574a:	4603      	mov	r3, r0
 800574c:	429c      	cmp	r4, r3
 800574e:	dd03      	ble.n	8005758 <fillRect+0x78>
        end = width();
 8005750:	f7fc fdee 	bl	8002330 <width>
 8005754:	4603      	mov	r3, r0
 8005756:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8005758:	89fa      	ldrh	r2, [r7, #14]
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8005762:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da08      	bge.n	800577c <fillRect+0x9c>
        h = -h;
 800576a:	883b      	ldrh	r3, [r7, #0]
 800576c:	425b      	negs	r3, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	803b      	strh	r3, [r7, #0]
        y -= h;
 8005772:	88ba      	ldrh	r2, [r7, #4]
 8005774:	883b      	ldrh	r3, [r7, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	b29b      	uxth	r3, r3
 800577a:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 800577c:	88ba      	ldrh	r2, [r7, #4]
 800577e:	883b      	ldrh	r3, [r7, #0]
 8005780:	4413      	add	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8005786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da01      	bge.n	8005792 <fillRect+0xb2>
        y = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8005792:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005796:	f7fc fdd7 	bl	8002348 <height>
 800579a:	4603      	mov	r3, r0
 800579c:	429c      	cmp	r4, r3
 800579e:	dd03      	ble.n	80057a8 <fillRect+0xc8>
        end = height();
 80057a0:	f7fc fdd2 	bl	8002348 <height>
 80057a4:	4603      	mov	r3, r0
 80057a6:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80057a8:	89fa      	ldrh	r2, [r7, #14]
 80057aa:	88bb      	ldrh	r3, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	4413      	add	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	b21c      	sxth	r4, r3
 80057c0:	88ba      	ldrh	r2, [r7, #4]
 80057c2:	883b      	ldrh	r3, [r7, #0]
 80057c4:	4413      	add	r3, r2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80057d6:	4622      	mov	r2, r4
 80057d8:	f7ff fc62 	bl	80050a0 <setAddrWindow>
    CS_ACTIVE;
 80057dc:	2101      	movs	r1, #1
 80057de:	485e      	ldr	r0, [pc, #376]	; (8005958 <fillRect+0x278>)
 80057e0:	f7fc fd58 	bl	8002294 <PIN_LOW>
    WriteCmd(_MW);
 80057e4:	2110      	movs	r1, #16
 80057e6:	485d      	ldr	r0, [pc, #372]	; (800595c <fillRect+0x27c>)
 80057e8:	f7fc fd54 	bl	8002294 <PIN_LOW>
 80057ec:	4b5c      	ldr	r3, [pc, #368]	; (8005960 <fillRect+0x280>)
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	737b      	strb	r3, [r7, #13]
 80057f6:	4b5a      	ldr	r3, [pc, #360]	; (8005960 <fillRect+0x280>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	733b      	strb	r3, [r7, #12]
 80057fc:	4b57      	ldr	r3, [pc, #348]	; (800595c <fillRect+0x27c>)
 80057fe:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005802:	619a      	str	r2, [r3, #24]
 8005804:	4b54      	ldr	r3, [pc, #336]	; (8005958 <fillRect+0x278>)
 8005806:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800580a:	619a      	str	r2, [r3, #24]
 800580c:	4b55      	ldr	r3, [pc, #340]	; (8005964 <fillRect+0x284>)
 800580e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005812:	619a      	str	r2, [r3, #24]
 8005814:	7b7b      	ldrb	r3, [r7, #13]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800581c:	7b7b      	ldrb	r3, [r7, #13]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005824:	431a      	orrs	r2, r3
 8005826:	7b7b      	ldrb	r3, [r7, #13]
 8005828:	025b      	lsls	r3, r3, #9
 800582a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582e:	431a      	orrs	r2, r3
 8005830:	4b4a      	ldr	r3, [pc, #296]	; (800595c <fillRect+0x27c>)
 8005832:	619a      	str	r2, [r3, #24]
 8005834:	7b7b      	ldrb	r3, [r7, #13]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800583c:	7b7b      	ldrb	r3, [r7, #13]
 800583e:	105b      	asrs	r3, r3, #1
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	431a      	orrs	r2, r3
 8005846:	7b7b      	ldrb	r3, [r7, #13]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	431a      	orrs	r2, r3
 8005850:	7b7b      	ldrb	r3, [r7, #13]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	431a      	orrs	r2, r3
 8005858:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <fillRect+0x278>)
 800585a:	619a      	str	r2, [r3, #24]
 800585c:	7b7b      	ldrb	r3, [r7, #13]
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	4a40      	ldr	r2, [pc, #256]	; (8005964 <fillRect+0x284>)
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	6193      	str	r3, [r2, #24]
 8005868:	2102      	movs	r1, #2
 800586a:	483c      	ldr	r0, [pc, #240]	; (800595c <fillRect+0x27c>)
 800586c:	f7fc fd12 	bl	8002294 <PIN_LOW>
 8005870:	2102      	movs	r1, #2
 8005872:	483a      	ldr	r0, [pc, #232]	; (800595c <fillRect+0x27c>)
 8005874:	f7fc fd0e 	bl	8002294 <PIN_LOW>
 8005878:	2102      	movs	r1, #2
 800587a:	4838      	ldr	r0, [pc, #224]	; (800595c <fillRect+0x27c>)
 800587c:	f7fc fd0a 	bl	8002294 <PIN_LOW>
 8005880:	2102      	movs	r1, #2
 8005882:	4836      	ldr	r0, [pc, #216]	; (800595c <fillRect+0x27c>)
 8005884:	f7fc fd16 	bl	80022b4 <PIN_HIGH>
 8005888:	2102      	movs	r1, #2
 800588a:	4834      	ldr	r0, [pc, #208]	; (800595c <fillRect+0x27c>)
 800588c:	f7fc fd12 	bl	80022b4 <PIN_HIGH>
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <fillRect+0x27c>)
 8005892:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005896:	619a      	str	r2, [r3, #24]
 8005898:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <fillRect+0x278>)
 800589a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800589e:	619a      	str	r2, [r3, #24]
 80058a0:	4b30      	ldr	r3, [pc, #192]	; (8005964 <fillRect+0x284>)
 80058a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058a6:	619a      	str	r2, [r3, #24]
 80058a8:	7b3b      	ldrb	r3, [r7, #12]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80058b0:	7b3b      	ldrb	r3, [r7, #12]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	431a      	orrs	r2, r3
 80058ba:	7b3b      	ldrb	r3, [r7, #12]
 80058bc:	025b      	lsls	r3, r3, #9
 80058be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c2:	431a      	orrs	r2, r3
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <fillRect+0x27c>)
 80058c6:	619a      	str	r2, [r3, #24]
 80058c8:	7b3b      	ldrb	r3, [r7, #12]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80058d0:	7b3b      	ldrb	r3, [r7, #12]
 80058d2:	105b      	asrs	r3, r3, #1
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	7b3b      	ldrb	r3, [r7, #12]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	431a      	orrs	r2, r3
 80058e4:	7b3b      	ldrb	r3, [r7, #12]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	431a      	orrs	r2, r3
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <fillRect+0x278>)
 80058ee:	619a      	str	r2, [r3, #24]
 80058f0:	7b3b      	ldrb	r3, [r7, #12]
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <fillRect+0x284>)
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	6193      	str	r3, [r2, #24]
 80058fc:	2102      	movs	r1, #2
 80058fe:	4817      	ldr	r0, [pc, #92]	; (800595c <fillRect+0x27c>)
 8005900:	f7fc fcc8 	bl	8002294 <PIN_LOW>
 8005904:	2102      	movs	r1, #2
 8005906:	4815      	ldr	r0, [pc, #84]	; (800595c <fillRect+0x27c>)
 8005908:	f7fc fcc4 	bl	8002294 <PIN_LOW>
 800590c:	2102      	movs	r1, #2
 800590e:	4813      	ldr	r0, [pc, #76]	; (800595c <fillRect+0x27c>)
 8005910:	f7fc fcc0 	bl	8002294 <PIN_LOW>
 8005914:	2102      	movs	r1, #2
 8005916:	4811      	ldr	r0, [pc, #68]	; (800595c <fillRect+0x27c>)
 8005918:	f7fc fccc 	bl	80022b4 <PIN_HIGH>
 800591c:	2102      	movs	r1, #2
 800591e:	480f      	ldr	r0, [pc, #60]	; (800595c <fillRect+0x27c>)
 8005920:	f7fc fcc8 	bl	80022b4 <PIN_HIGH>
 8005924:	2110      	movs	r1, #16
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <fillRect+0x27c>)
 8005928:	f7fc fcc4 	bl	80022b4 <PIN_HIGH>
    if (h > w) {
 800592c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005934:	429a      	cmp	r2, r3
 8005936:	dd05      	ble.n	8005944 <fillRect+0x264>
        end = h;
 8005938:	883b      	ldrh	r3, [r7, #0]
 800593a:	81fb      	strh	r3, [r7, #14]
        h = w;
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	803b      	strh	r3, [r7, #0]
        w = end;
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8005944:	8c3b      	ldrh	r3, [r7, #32]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29b      	uxth	r3, r3
 800594a:	72fb      	strb	r3, [r7, #11]
 800594c:	8c3b      	ldrh	r3, [r7, #32]
 800594e:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8005950:	e0a9      	b.n	8005aa6 <fillRect+0x3c6>
 8005952:	bf00      	nop
 8005954:	20000212 	.word	0x20000212
 8005958:	40020400 	.word	0x40020400
 800595c:	40020000 	.word	0x40020000
 8005960:	200003fa 	.word	0x200003fa
 8005964:	40020800 	.word	0x40020800
        end = w;
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 800596c:	4b68      	ldr	r3, [pc, #416]	; (8005b10 <fillRect+0x430>)
 800596e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005972:	619a      	str	r2, [r3, #24]
 8005974:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <fillRect+0x434>)
 8005976:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800597a:	619a      	str	r2, [r3, #24]
 800597c:	4b66      	ldr	r3, [pc, #408]	; (8005b18 <fillRect+0x438>)
 800597e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005982:	619a      	str	r2, [r3, #24]
 8005984:	7afb      	ldrb	r3, [r7, #11]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800598c:	7afb      	ldrb	r3, [r7, #11]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	431a      	orrs	r2, r3
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599e:	431a      	orrs	r2, r3
 80059a0:	4b5b      	ldr	r3, [pc, #364]	; (8005b10 <fillRect+0x430>)
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	105b      	asrs	r3, r3, #1
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	431a      	orrs	r2, r3
 80059c0:	7afb      	ldrb	r3, [r7, #11]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	431a      	orrs	r2, r3
 80059c8:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <fillRect+0x434>)
 80059ca:	619a      	str	r2, [r3, #24]
 80059cc:	7afb      	ldrb	r3, [r7, #11]
 80059ce:	019b      	lsls	r3, r3, #6
 80059d0:	4a51      	ldr	r2, [pc, #324]	; (8005b18 <fillRect+0x438>)
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	6193      	str	r3, [r2, #24]
 80059d8:	2102      	movs	r1, #2
 80059da:	484d      	ldr	r0, [pc, #308]	; (8005b10 <fillRect+0x430>)
 80059dc:	f7fc fc5a 	bl	8002294 <PIN_LOW>
 80059e0:	2102      	movs	r1, #2
 80059e2:	484b      	ldr	r0, [pc, #300]	; (8005b10 <fillRect+0x430>)
 80059e4:	f7fc fc56 	bl	8002294 <PIN_LOW>
 80059e8:	2102      	movs	r1, #2
 80059ea:	4849      	ldr	r0, [pc, #292]	; (8005b10 <fillRect+0x430>)
 80059ec:	f7fc fc52 	bl	8002294 <PIN_LOW>
 80059f0:	2102      	movs	r1, #2
 80059f2:	4847      	ldr	r0, [pc, #284]	; (8005b10 <fillRect+0x430>)
 80059f4:	f7fc fc5e 	bl	80022b4 <PIN_HIGH>
 80059f8:	2102      	movs	r1, #2
 80059fa:	4845      	ldr	r0, [pc, #276]	; (8005b10 <fillRect+0x430>)
 80059fc:	f7fc fc5a 	bl	80022b4 <PIN_HIGH>
            write8(lo);
 8005a00:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <fillRect+0x430>)
 8005a02:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005a06:	619a      	str	r2, [r3, #24]
 8005a08:	4b42      	ldr	r3, [pc, #264]	; (8005b14 <fillRect+0x434>)
 8005a0a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005a0e:	619a      	str	r2, [r3, #24]
 8005a10:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <fillRect+0x438>)
 8005a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a16:	619a      	str	r2, [r3, #24]
 8005a18:	7abb      	ldrb	r3, [r7, #10]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005a20:	7abb      	ldrb	r3, [r7, #10]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	7abb      	ldrb	r3, [r7, #10]
 8005a2c:	025b      	lsls	r3, r3, #9
 8005a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a32:	431a      	orrs	r2, r3
 8005a34:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <fillRect+0x430>)
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	7abb      	ldrb	r3, [r7, #10]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005a40:	7abb      	ldrb	r3, [r7, #10]
 8005a42:	105b      	asrs	r3, r3, #1
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	7abb      	ldrb	r3, [r7, #10]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	431a      	orrs	r2, r3
 8005a54:	7abb      	ldrb	r3, [r7, #10]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <fillRect+0x434>)
 8005a5e:	619a      	str	r2, [r3, #24]
 8005a60:	7abb      	ldrb	r3, [r7, #10]
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <fillRect+0x438>)
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	6193      	str	r3, [r2, #24]
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4828      	ldr	r0, [pc, #160]	; (8005b10 <fillRect+0x430>)
 8005a70:	f7fc fc10 	bl	8002294 <PIN_LOW>
 8005a74:	2102      	movs	r1, #2
 8005a76:	4826      	ldr	r0, [pc, #152]	; (8005b10 <fillRect+0x430>)
 8005a78:	f7fc fc0c 	bl	8002294 <PIN_LOW>
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4824      	ldr	r0, [pc, #144]	; (8005b10 <fillRect+0x430>)
 8005a80:	f7fc fc08 	bl	8002294 <PIN_LOW>
 8005a84:	2102      	movs	r1, #2
 8005a86:	4822      	ldr	r0, [pc, #136]	; (8005b10 <fillRect+0x430>)
 8005a88:	f7fc fc14 	bl	80022b4 <PIN_HIGH>
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	4820      	ldr	r0, [pc, #128]	; (8005b10 <fillRect+0x430>)
 8005a90:	f7fc fc10 	bl	80022b4 <PIN_HIGH>
        } while (--end != 0);
 8005a94:	89fb      	ldrh	r3, [r7, #14]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	81fb      	strh	r3, [r7, #14]
 8005a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af63 	bne.w	800596c <fillRect+0x28c>
    while (h-- > 0) {
 8005aa6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	3a01      	subs	r2, #1
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	803a      	strh	r2, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f73f af58 	bgt.w	8005968 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4816      	ldr	r0, [pc, #88]	; (8005b14 <fillRect+0x434>)
 8005abc:	f7fc fbfa 	bl	80022b4 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <fillRect+0x43c>)
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <fillRect+0x404>
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <fillRect+0x440>)
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	f241 5226 	movw	r2, #5414	; 0x1526
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d116      	bne.n	8005b06 <fillRect+0x426>
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <fillRect+0x444>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8005ae4:	f7fc fc24 	bl	8002330 <width>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b21c      	sxth	r4, r3
 8005af0:	f7fc fc2a 	bl	8002348 <height>
 8005af4:	4603      	mov	r3, r0
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	4622      	mov	r2, r4
 8005afe:	2100      	movs	r1, #0
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7ff facd 	bl	80050a0 <setAddrWindow>
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd90      	pop	{r4, r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020000 	.word	0x40020000
 8005b14:	40020400 	.word	0x40020400
 8005b18:	40020800 	.word	0x40020800
 8005b1c:	200003fc 	.word	0x200003fc
 8005b20:	2000040a 	.word	0x2000040a
 8005b24:	20000216 	.word	0x20000216

08005b28 <drawChar>:


/********************************* END TESTS  *********************************************/

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b08b      	sub	sp, #44	; 0x2c
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	80fb      	strh	r3, [r7, #6]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	80bb      	strh	r3, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	70fb      	strb	r3, [r7, #3]
 8005b42:	4613      	mov	r3, r2
 8005b44:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8005b46:	4b56      	ldr	r3, [pc, #344]	; (8005ca0 <drawChar+0x178>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	00da      	lsls	r2, r3, #3
 8005b58:	4b51      	ldr	r3, [pc, #324]	; (8005ca0 <drawChar+0x178>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4413      	add	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8005b64:	4b4e      	ldr	r3, [pc, #312]	; (8005ca0 <drawChar+0x178>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	78db      	ldrb	r3, [r3, #3]
 8005b7c:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3305      	adds	r3, #5
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3306      	adds	r3, #6
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	2300      	movs	r3, #0
 8005b94:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	833b      	strh	r3, [r7, #24]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8005b9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d905      	bls.n	8005bb2 <drawChar+0x8a>
            xo16 = xo;
 8005ba6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005baa:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8005bac:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005bb0:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	773b      	strb	r3, [r7, #28]
 8005bb6:	e06a      	b.n	8005c8e <drawChar+0x166>
            for(xx=0; xx<w; xx++) {
 8005bb8:	2300      	movs	r3, #0
 8005bba:	777b      	strb	r3, [r7, #29]
 8005bbc:	e060      	b.n	8005c80 <drawChar+0x158>
                if(!(bit++ & 7)) {
 8005bbe:	7ebb      	ldrb	r3, [r7, #26]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	76ba      	strb	r2, [r7, #26]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d107      	bne.n	8005bdc <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8005bcc:	8bfb      	ldrh	r3, [r7, #30]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	83fa      	strh	r2, [r7, #30]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 8005bdc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	da47      	bge.n	8005c74 <drawChar+0x14c>
                    if(size == 1) {
 8005be4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d11a      	bne.n	8005c22 <drawChar+0xfa>
                        writePixel(x+xo+xx, y+yo+yy, color);
 8005bec:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	7f7b      	ldrb	r3, [r7, #29]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	b218      	sxth	r0, r3
 8005c02:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	88bb      	ldrh	r3, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	7f3b      	ldrb	r3, [r7, #28]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b21b      	sxth	r3, r3
 8005c18:	883a      	ldrh	r2, [r7, #0]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f7ff fd4a 	bl	80056b4 <writePixel>
 8005c20:	e028      	b.n	8005c74 <drawChar+0x14c>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8005c22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005c26:	7f7b      	ldrb	r3, [r7, #29]
 8005c28:	4413      	add	r3, r2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	fb12 f303 	smulbb	r3, r2, r3
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	b218      	sxth	r0, r3
 8005c40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c44:	7f3b      	ldrb	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	fb12 f303 	smulbb	r3, r2, r3
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	88bb      	ldrh	r3, [r7, #4]
 8005c58:	4413      	add	r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b219      	sxth	r1, r3
 8005c5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c62:	b21a      	sxth	r2, r3
 8005c64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c68:	b21c      	sxth	r4, r3
 8005c6a:	883b      	ldrh	r3, [r7, #0]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4623      	mov	r3, r4
 8005c70:	f7ff fd36 	bl	80056e0 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8005c74:	7efb      	ldrb	r3, [r7, #27]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8005c7a:	7f7b      	ldrb	r3, [r7, #29]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	777b      	strb	r3, [r7, #29]
 8005c80:	7f7a      	ldrb	r2, [r7, #29]
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d39a      	bcc.n	8005bbe <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8005c88:	7f3b      	ldrb	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	773b      	strb	r3, [r7, #28]
 8005c8e:	7f3a      	ldrb	r2, [r7, #28]
 8005c90:	7abb      	ldrb	r3, [r7, #10]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d390      	bcc.n	8005bb8 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	3724      	adds	r7, #36	; 0x24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd90      	pop	{r4, r7, pc}
 8005ca0:	2000026c 	.word	0x2000026c

08005ca4 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8005ca4:	b5b0      	push	{r4, r5, r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b0a      	cmp	r3, #10
 8005cb2:	d112      	bne.n	8005cda <write+0x36>
            cursor_x  = 0;
 8005cb4:	4b46      	ldr	r3, [pc, #280]	; (8005dd0 <write+0x12c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8005cba:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <write+0x130>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330a      	adds	r3, #10
 8005cc0:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 8005cc2:	4b45      	ldr	r3, [pc, #276]	; (8005dd8 <write+0x134>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	fb12 f303 	smulbb	r3, r2, r3
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <write+0x138>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <write+0x138>)
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e074      	b.n	8005dc4 <write+0x120>
        } else if(c != '\r') {
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2b0d      	cmp	r3, #13
 8005cde:	d071      	beq.n	8005dc4 <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8005ce0:	4b3c      	ldr	r3, [pc, #240]	; (8005dd4 <write+0x130>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	7a1b      	ldrb	r3, [r3, #8]
 8005ce6:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d369      	bcc.n	8005dc4 <write+0x120>
 8005cf0:	4b38      	ldr	r3, [pc, #224]	; (8005dd4 <write+0x130>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3309      	adds	r3, #9
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	79fa      	ldrb	r2, [r7, #7]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d862      	bhi.n	8005dc4 <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8005cfe:	79fa      	ldrb	r2, [r7, #7]
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8005d06:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <write+0x130>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8005d10:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	789b      	ldrb	r3, [r3, #2]
 8005d16:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d041      	beq.n	8005da8 <write+0x104>
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d03e      	beq.n	8005da8 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3305      	adds	r3, #5
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b25b      	sxtb	r3, r3
 8005d32:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <write+0x13c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d022      	beq.n	8005d82 <write+0xde>
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <write+0x12c>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	4619      	mov	r1, r3
 8005d42:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <write+0x134>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	4413      	add	r3, r2
 8005d50:	fb03 f300 	mul.w	r3, r3, r0
 8005d54:	440b      	add	r3, r1
 8005d56:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <write+0x140>)
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	dd11      	ble.n	8005d82 <write+0xde>
                        cursor_x  = 0;
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <write+0x12c>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <write+0x130>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330a      	adds	r3, #10
 8005d6a:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <write+0x134>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	fb12 f303 	smulbb	r3, r2, r3
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <write+0x138>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b17      	ldr	r3, [pc, #92]	; (8005ddc <write+0x138>)
 8005d80:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8005d82:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <write+0x12c>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b218      	sxth	r0, r3
 8005d88:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <write+0x138>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	b219      	sxth	r1, r3
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <write+0x144>)
 8005d90:	881d      	ldrh	r5, [r3, #0]
 8005d92:	4b16      	ldr	r3, [pc, #88]	; (8005dec <write+0x148>)
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	4a10      	ldr	r2, [pc, #64]	; (8005dd8 <write+0x134>)
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	79fc      	ldrb	r4, [r7, #7]
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	462b      	mov	r3, r5
 8005da2:	4622      	mov	r2, r4
 8005da4:	f7ff fec0 	bl	8005b28 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3304      	adds	r3, #4
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <write+0x134>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	fb12 f303 	smulbb	r3, r2, r3
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <write+0x12c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <write+0x12c>)
 8005dc2:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8005dc4:	2301      	movs	r3, #1
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000215 	.word	0x20000215
 8005dd4:	2000026c 	.word	0x2000026c
 8005dd8:	2000000c 	.word	0x2000000c
 8005ddc:	20000214 	.word	0x20000214
 8005de0:	20000012 	.word	0x20000012
 8005de4:	20000008 	.word	0x20000008
 8005de8:	2000000e 	.word	0x2000000e
 8005dec:	20000010 	.word	0x20000010

08005df0 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <setFont+0x4c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d110      	bne.n	8005e28 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8005e06:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <setFont+0x50>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	3306      	adds	r3, #6
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <setFont+0x50>)
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e009      	b.n	8005e28 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <setFont+0x4c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <setFont+0x50>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	3b06      	subs	r3, #6
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <setFont+0x50>)
 8005e26:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8005e28:	4a04      	ldr	r2, [pc, #16]	; (8005e3c <setFont+0x4c>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	2000026c 	.word	0x2000026c
 8005e40:	20000214 	.word	0x20000214

08005e44 <printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	460b      	mov	r3, r1
 8005e52:	817b      	strh	r3, [r7, #10]
 8005e54:	4613      	mov	r3, r2
 8005e56:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ffc9 	bl	8005df0 <setFont>
	textcolor = txtcolor;
 8005e5e:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <printnewtstr+0x60>)
 8005e60:	897b      	ldrh	r3, [r7, #10]
 8005e62:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8005e64:	7a7b      	ldrb	r3, [r7, #9]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <printnewtstr+0x2a>
 8005e6a:	7a7b      	ldrb	r3, [r7, #9]
 8005e6c:	e000      	b.n	8005e70 <printnewtstr+0x2c>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <printnewtstr+0x64>)
 8005e72:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f000 f816 	bl	8005eac <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 8005e80:	e006      	b.n	8005e90 <printnewtstr+0x4c>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	61ba      	str	r2, [r7, #24]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff0a 	bl	8005ca4 <write>
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f4      	bne.n	8005e82 <printnewtstr+0x3e>
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	2000000e 	.word	0x2000000e
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <setCursor>:
	textsize = size;
}


void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460a      	mov	r2, r1
 8005eb6:	80fb      	strh	r3, [r7, #6]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	80bb      	strh	r3, [r7, #4]
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <setCursor+0x2c>)
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	88bb      	ldrh	r3, [r7, #4]
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <setCursor+0x30>)
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	20000215 	.word	0x20000215
 8005edc:	20000214 	.word	0x20000214

08005ee0 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <delay+0x2c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2200      	movs	r2, #0
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8005ef0:	bf00      	nop
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <delay+0x2c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d8f9      	bhi.n	8005ef2 <delay+0x12>
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	2000036c 	.word	0x2000036c

08005f10 <tft_gpio_init>:
}


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	4b32      	ldr	r3, [pc, #200]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	4a31      	ldr	r2, [pc, #196]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f20:	f043 0304 	orr.w	r3, r3, #4
 8005f24:	6313      	str	r3, [r2, #48]	; 0x30
 8005f26:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	6313      	str	r3, [r2, #48]	; 0x30
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <tft_gpio_init+0xd4>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	481e      	ldr	r0, [pc, #120]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005f6e:	f7fc f9c7 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 8005f72:	2102      	movs	r1, #2
 8005f74:	481c      	ldr	r0, [pc, #112]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005f76:	f7fc f9c3 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	481a      	ldr	r0, [pc, #104]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005f7e:	f7fc f9bf 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 8005f82:	2101      	movs	r1, #1
 8005f84:	4819      	ldr	r0, [pc, #100]	; (8005fec <tft_gpio_init+0xdc>)
 8005f86:	f7fc f9bb 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <tft_gpio_init+0xe0>)
 8005f8e:	f7fc f9b7 	bl	8002300 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 8005f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f96:	4814      	ldr	r0, [pc, #80]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005f98:	f7fc f9b2 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8005f9c:	2180      	movs	r1, #128	; 0x80
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <tft_gpio_init+0xe0>)
 8005fa0:	f7fc f9ae 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8005fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fa8:	480f      	ldr	r0, [pc, #60]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005faa:	f7fc f9a9 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8005fae:	2108      	movs	r1, #8
 8005fb0:	480e      	ldr	r0, [pc, #56]	; (8005fec <tft_gpio_init+0xdc>)
 8005fb2:	f7fc f9a5 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8005fb6:	2120      	movs	r1, #32
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <tft_gpio_init+0xdc>)
 8005fba:	f7fc f9a1 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	480a      	ldr	r0, [pc, #40]	; (8005fec <tft_gpio_init+0xdc>)
 8005fc2:	f7fc f99d 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8005fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fca:	4808      	ldr	r0, [pc, #32]	; (8005fec <tft_gpio_init+0xdc>)
 8005fcc:	f7fc f998 	bl	8002300 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8005fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fd4:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <tft_gpio_init+0xd8>)
 8005fd6:	f7fc f993 	bl	8002300 <PIN_OUTPUT>
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40020400 	.word	0x40020400
 8005ff0:	40020800 	.word	0x40020800

08005ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800602c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ff8:	480d      	ldr	r0, [pc, #52]	; (8006030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ffa:	490e      	ldr	r1, [pc, #56]	; (8006034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ffc:	4a0e      	ldr	r2, [pc, #56]	; (8006038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006000:	e002      	b.n	8006008 <LoopCopyDataInit>

08006002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006006:	3304      	adds	r3, #4

08006008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800600a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800600c:	d3f9      	bcc.n	8006002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800600e:	4a0b      	ldr	r2, [pc, #44]	; (800603c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006010:	4c0b      	ldr	r4, [pc, #44]	; (8006040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006014:	e001      	b.n	800601a <LoopFillZerobss>

08006016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006018:	3204      	adds	r2, #4

0800601a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800601a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800601c:	d3fb      	bcc.n	8006016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800601e:	f7fc f927 	bl	8002270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006022:	f003 fae9 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006026:	f7fb fb65 	bl	80016f4 <main>
  bx  lr    
 800602a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800602c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006034:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006038:	0800d7e0 	.word	0x0800d7e0
  ldr r2, =_sbss
 800603c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8006040:	20000428 	.word	0x20000428

08006044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006044:	e7fe      	b.n	8006044 <ADC_IRQHandler>
	...

08006048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800604c:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_Init+0x40>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0d      	ldr	r2, [pc, #52]	; (8006088 <HAL_Init+0x40>)
 8006052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_Init+0x40>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <HAL_Init+0x40>)
 800605e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_Init+0x40>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_Init+0x40>)
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006070:	2003      	movs	r0, #3
 8006072:	f000 f931 	bl	80062d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006076:	2000      	movs	r0, #0
 8006078:	f000 f808 	bl	800608c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800607c:	f7fb fe66 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023c00 	.word	0x40023c00

0800608c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <HAL_InitTick+0x54>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_InitTick+0x58>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f93b 	bl	8006326 <HAL_SYSTICK_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00e      	b.n	80060d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b0f      	cmp	r3, #15
 80060be:	d80a      	bhi.n	80060d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060c0:	2200      	movs	r2, #0
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	f000 f911 	bl	80062ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060cc:	4a06      	ldr	r2, [pc, #24]	; (80060e8 <HAL_InitTick+0x5c>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e000      	b.n	80060d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000004 	.word	0x20000004
 80060e4:	20000018 	.word	0x20000018
 80060e8:	20000014 	.word	0x20000014

080060ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_IncTick+0x20>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_IncTick+0x24>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	4a04      	ldr	r2, [pc, #16]	; (8006110 <HAL_IncTick+0x24>)
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000018 	.word	0x20000018
 8006110:	20000414 	.word	0x20000414

08006114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return uwTick;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <HAL_GetTick+0x14>)
 800611a:	681b      	ldr	r3, [r3, #0]
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000414 	.word	0x20000414

0800612c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006134:	f7ff ffee 	bl	8006114 <HAL_GetTick>
 8006138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d005      	beq.n	8006152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <HAL_Delay+0x44>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006152:	bf00      	nop
 8006154:	f7ff ffde 	bl	8006114 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d8f7      	bhi.n	8006154 <HAL_Delay+0x28>
  {
  }
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000018 	.word	0x20000018

08006174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006190:	4013      	ands	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800619c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__NVIC_GetPriorityGrouping+0x18>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 0307 	and.w	r3, r3, #7
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db0a      	blt.n	8006202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	490c      	ldr	r1, [pc, #48]	; (8006224 <__NVIC_SetPriority+0x4c>)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	0112      	lsls	r2, r2, #4
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	440b      	add	r3, r1
 80061fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006200:	e00a      	b.n	8006218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4908      	ldr	r1, [pc, #32]	; (8006228 <__NVIC_SetPriority+0x50>)
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	3b04      	subs	r3, #4
 8006210:	0112      	lsls	r2, r2, #4
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	440b      	add	r3, r1
 8006216:	761a      	strb	r2, [r3, #24]
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	e000e100 	.word	0xe000e100
 8006228:	e000ed00 	.word	0xe000ed00

0800622c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f1c3 0307 	rsb	r3, r3, #7
 8006246:	2b04      	cmp	r3, #4
 8006248:	bf28      	it	cs
 800624a:	2304      	movcs	r3, #4
 800624c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3304      	adds	r3, #4
 8006252:	2b06      	cmp	r3, #6
 8006254:	d902      	bls.n	800625c <NVIC_EncodePriority+0x30>
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3b03      	subs	r3, #3
 800625a:	e000      	b.n	800625e <NVIC_EncodePriority+0x32>
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	43da      	mvns	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	401a      	ands	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006274:	f04f 31ff 	mov.w	r1, #4294967295
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	fa01 f303 	lsl.w	r3, r1, r3
 800627e:	43d9      	mvns	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006284:	4313      	orrs	r3, r2
         );
}
 8006286:	4618      	mov	r0, r3
 8006288:	3724      	adds	r7, #36	; 0x24
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3b01      	subs	r3, #1
 80062a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062a4:	d301      	bcc.n	80062aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062a6:	2301      	movs	r3, #1
 80062a8:	e00f      	b.n	80062ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <SysTick_Config+0x40>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062b2:	210f      	movs	r1, #15
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	f7ff ff8e 	bl	80061d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <SysTick_Config+0x40>)
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <SysTick_Config+0x40>)
 80062c4:	2207      	movs	r2, #7
 80062c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	e000e010 	.word	0xe000e010

080062d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff47 	bl	8006174 <__NVIC_SetPriorityGrouping>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	4603      	mov	r3, r0
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006300:	f7ff ff5c 	bl	80061bc <__NVIC_GetPriorityGrouping>
 8006304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f7ff ff8e 	bl	800622c <NVIC_EncodePriority>
 8006310:	4602      	mov	r2, r0
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006316:	4611      	mov	r1, r2
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff ff5d 	bl	80061d8 <__NVIC_SetPriority>
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ffb0 	bl	8006294 <SysTick_Config>
 8006334:	4603      	mov	r3, r0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	; 0x24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e165      	b.n	8006628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800635c:	2201      	movs	r2, #1
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4013      	ands	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	f040 8154 	bne.w	8006622 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d005      	beq.n	8006392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800638e:	2b02      	cmp	r3, #2
 8006390:	d130      	bne.n	80063f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	2203      	movs	r2, #3
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c8:	2201      	movs	r2, #1
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	43db      	mvns	r3, r3
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	4013      	ands	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 0201 	and.w	r2, r3, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d017      	beq.n	8006430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	2203      	movs	r2, #3
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4013      	ands	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d123      	bne.n	8006484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	08da      	lsrs	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3208      	adds	r2, #8
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	220f      	movs	r2, #15
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4313      	orrs	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	08da      	lsrs	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3208      	adds	r2, #8
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	2203      	movs	r2, #3
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 0203 	and.w	r2, r3, #3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80ae 	beq.w	8006622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4b5d      	ldr	r3, [pc, #372]	; (8006640 <HAL_GPIO_Init+0x300>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	4a5c      	ldr	r2, [pc, #368]	; (8006640 <HAL_GPIO_Init+0x300>)
 80064d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064d4:	6453      	str	r3, [r2, #68]	; 0x44
 80064d6:	4b5a      	ldr	r3, [pc, #360]	; (8006640 <HAL_GPIO_Init+0x300>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064e2:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_GPIO_Init+0x304>)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3302      	adds	r3, #2
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a4f      	ldr	r2, [pc, #316]	; (8006648 <HAL_GPIO_Init+0x308>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d025      	beq.n	800655a <HAL_GPIO_Init+0x21a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a4e      	ldr	r2, [pc, #312]	; (800664c <HAL_GPIO_Init+0x30c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01f      	beq.n	8006556 <HAL_GPIO_Init+0x216>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a4d      	ldr	r2, [pc, #308]	; (8006650 <HAL_GPIO_Init+0x310>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d019      	beq.n	8006552 <HAL_GPIO_Init+0x212>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a4c      	ldr	r2, [pc, #304]	; (8006654 <HAL_GPIO_Init+0x314>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_GPIO_Init+0x20e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4b      	ldr	r2, [pc, #300]	; (8006658 <HAL_GPIO_Init+0x318>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00d      	beq.n	800654a <HAL_GPIO_Init+0x20a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <HAL_GPIO_Init+0x31c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <HAL_GPIO_Init+0x206>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a49      	ldr	r2, [pc, #292]	; (8006660 <HAL_GPIO_Init+0x320>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d101      	bne.n	8006542 <HAL_GPIO_Init+0x202>
 800653e:	2306      	movs	r3, #6
 8006540:	e00c      	b.n	800655c <HAL_GPIO_Init+0x21c>
 8006542:	2307      	movs	r3, #7
 8006544:	e00a      	b.n	800655c <HAL_GPIO_Init+0x21c>
 8006546:	2305      	movs	r3, #5
 8006548:	e008      	b.n	800655c <HAL_GPIO_Init+0x21c>
 800654a:	2304      	movs	r3, #4
 800654c:	e006      	b.n	800655c <HAL_GPIO_Init+0x21c>
 800654e:	2303      	movs	r3, #3
 8006550:	e004      	b.n	800655c <HAL_GPIO_Init+0x21c>
 8006552:	2302      	movs	r3, #2
 8006554:	e002      	b.n	800655c <HAL_GPIO_Init+0x21c>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <HAL_GPIO_Init+0x21c>
 800655a:	2300      	movs	r3, #0
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	f002 0203 	and.w	r2, r2, #3
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	4093      	lsls	r3, r2
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4313      	orrs	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800656c:	4935      	ldr	r1, [pc, #212]	; (8006644 <HAL_GPIO_Init+0x304>)
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	089b      	lsrs	r3, r3, #2
 8006572:	3302      	adds	r3, #2
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800657a:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <HAL_GPIO_Init+0x324>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800659e:	4a31      	ldr	r2, [pc, #196]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80065a4:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	4013      	ands	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065ce:	4b25      	ldr	r3, [pc, #148]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4013      	ands	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065f8:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <HAL_GPIO_Init+0x324>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <HAL_GPIO_Init+0x324>)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3301      	adds	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	f67f ae96 	bls.w	800635c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	3724      	adds	r7, #36	; 0x24
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	40013800 	.word	0x40013800
 8006648:	40020000 	.word	0x40020000
 800664c:	40020400 	.word	0x40020400
 8006650:	40020800 	.word	0x40020800
 8006654:	40020c00 	.word	0x40020c00
 8006658:	40021000 	.word	0x40021000
 800665c:	40021400 	.word	0x40021400
 8006660:	40021800 	.word	0x40021800
 8006664:	40013c00 	.word	0x40013c00

08006668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	807b      	strh	r3, [r7, #2]
 8006674:	4613      	mov	r3, r2
 8006676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006678:	787b      	ldrb	r3, [r7, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006684:	e003      	b.n	800668e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006686:	887b      	ldrh	r3, [r7, #2]
 8006688:	041a      	lsls	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	619a      	str	r2, [r3, #24]
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066ac:	887a      	ldrh	r2, [r7, #2]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4013      	ands	r3, r2
 80066b2:	041a      	lsls	r2, r3, #16
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	43d9      	mvns	r1, r3
 80066b8:	887b      	ldrh	r3, [r7, #2]
 80066ba:	400b      	ands	r3, r1
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	619a      	str	r2, [r3, #24]
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e12b      	b.n	800693a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb fb50 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006734:	f001 f854 	bl	80077e0 <HAL_RCC_GetPCLK1Freq>
 8006738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4a81      	ldr	r2, [pc, #516]	; (8006944 <HAL_I2C_Init+0x274>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d807      	bhi.n	8006754 <HAL_I2C_Init+0x84>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a80      	ldr	r2, [pc, #512]	; (8006948 <HAL_I2C_Init+0x278>)
 8006748:	4293      	cmp	r3, r2
 800674a:	bf94      	ite	ls
 800674c:	2301      	movls	r3, #1
 800674e:	2300      	movhi	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e006      	b.n	8006762 <HAL_I2C_Init+0x92>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4a7d      	ldr	r2, [pc, #500]	; (800694c <HAL_I2C_Init+0x27c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	bf94      	ite	ls
 800675c:	2301      	movls	r3, #1
 800675e:	2300      	movhi	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e0e7      	b.n	800693a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a78      	ldr	r2, [pc, #480]	; (8006950 <HAL_I2C_Init+0x280>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	0c9b      	lsrs	r3, r3, #18
 8006774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <HAL_I2C_Init+0x274>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d802      	bhi.n	80067a4 <HAL_I2C_Init+0xd4>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	3301      	adds	r3, #1
 80067a2:	e009      	b.n	80067b8 <HAL_I2C_Init+0xe8>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	4a69      	ldr	r2, [pc, #420]	; (8006954 <HAL_I2C_Init+0x284>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	099b      	lsrs	r3, r3, #6
 80067b6:	3301      	adds	r3, #1
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	430b      	orrs	r3, r1
 80067be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	495c      	ldr	r1, [pc, #368]	; (8006944 <HAL_I2C_Init+0x274>)
 80067d4:	428b      	cmp	r3, r1
 80067d6:	d819      	bhi.n	800680c <HAL_I2C_Init+0x13c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e59      	subs	r1, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e6:	1c59      	adds	r1, r3, #1
 80067e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067ec:	400b      	ands	r3, r1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_I2C_Init+0x138>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1e59      	subs	r1, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006800:	3301      	adds	r3, #1
 8006802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006806:	e051      	b.n	80068ac <HAL_I2C_Init+0x1dc>
 8006808:	2304      	movs	r3, #4
 800680a:	e04f      	b.n	80068ac <HAL_I2C_Init+0x1dc>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d111      	bne.n	8006838 <HAL_I2C_Init+0x168>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	1e58      	subs	r0, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	440b      	add	r3, r1
 8006822:	fbb0 f3f3 	udiv	r3, r0, r3
 8006826:	3301      	adds	r3, #1
 8006828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800682c:	2b00      	cmp	r3, #0
 800682e:	bf0c      	ite	eq
 8006830:	2301      	moveq	r3, #1
 8006832:	2300      	movne	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e012      	b.n	800685e <HAL_I2C_Init+0x18e>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	1e58      	subs	r0, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6859      	ldr	r1, [r3, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	0099      	lsls	r1, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	fbb0 f3f3 	udiv	r3, r0, r3
 800684e:	3301      	adds	r3, #1
 8006850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_Init+0x196>
 8006862:	2301      	movs	r3, #1
 8006864:	e022      	b.n	80068ac <HAL_I2C_Init+0x1dc>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10e      	bne.n	800688c <HAL_I2C_Init+0x1bc>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1e58      	subs	r0, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	440b      	add	r3, r1
 800687c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006880:	3301      	adds	r3, #1
 8006882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	e00f      	b.n	80068ac <HAL_I2C_Init+0x1dc>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1e58      	subs	r0, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6859      	ldr	r1, [r3, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	0099      	lsls	r1, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a2:	3301      	adds	r3, #1
 80068a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	6809      	ldr	r1, [r1, #0]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69da      	ldr	r2, [r3, #28]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6911      	ldr	r1, [r2, #16]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	68d2      	ldr	r2, [r2, #12]
 80068e6:	4311      	orrs	r1, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	430b      	orrs	r3, r1
 80068ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	000186a0 	.word	0x000186a0
 8006948:	001e847f 	.word	0x001e847f
 800694c:	003d08ff 	.word	0x003d08ff
 8006950:	431bde83 	.word	0x431bde83
 8006954:	10624dd3 	.word	0x10624dd3

08006958 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	460b      	mov	r3, r1
 8006966:	817b      	strh	r3, [r7, #10]
 8006968:	4613      	mov	r3, r2
 800696a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800696c:	f7ff fbd2 	bl	8006114 <HAL_GetTick>
 8006970:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b20      	cmp	r3, #32
 800697c:	f040 80e0 	bne.w	8006b40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2319      	movs	r3, #25
 8006986:	2201      	movs	r2, #1
 8006988:	4970      	ldr	r1, [pc, #448]	; (8006b4c <HAL_I2C_Master_Transmit+0x1f4>)
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fc58 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
 8006998:	e0d3      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_I2C_Master_Transmit+0x50>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0cc      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d007      	beq.n	80069ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2221      	movs	r2, #33	; 0x21
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2210      	movs	r2, #16
 80069ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	893a      	ldrh	r2, [r7, #8]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a50      	ldr	r2, [pc, #320]	; (8006b50 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a10:	8979      	ldrh	r1, [r7, #10]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	6a3a      	ldr	r2, [r7, #32]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fac2 	bl	8006fa0 <I2C_MasterRequestWrite>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e08d      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a3c:	e066      	b.n	8006b0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fcd2 	bl	80073ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d107      	bne.n	8006a66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e06b      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_I2C_Master_Transmit+0x188>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d017      	beq.n	8006ae0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	6a39      	ldr	r1, [r7, #32]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fcc2 	bl	800746e <I2C_WaitOnBTFFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00d      	beq.n	8006b0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d107      	bne.n	8006b08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e01a      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d194      	bne.n	8006a3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	00100002 	.word	0x00100002
 8006b50:	ffff0000 	.word	0xffff0000

08006b54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08c      	sub	sp, #48	; 0x30
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	460b      	mov	r3, r1
 8006b62:	817b      	strh	r3, [r7, #10]
 8006b64:	4613      	mov	r3, r2
 8006b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b68:	f7ff fad4 	bl	8006114 <HAL_GetTick>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	f040 820b 	bne.w	8006f92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	2319      	movs	r3, #25
 8006b82:	2201      	movs	r2, #1
 8006b84:	497c      	ldr	r1, [pc, #496]	; (8006d78 <HAL_I2C_Master_Receive+0x224>)
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fb5a 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
 8006b94:	e1fe      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_I2C_Master_Receive+0x50>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e1f7      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d007      	beq.n	8006bca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2222      	movs	r2, #34	; 0x22
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2210      	movs	r2, #16
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	893a      	ldrh	r2, [r7, #8]
 8006bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a5c      	ldr	r2, [pc, #368]	; (8006d7c <HAL_I2C_Master_Receive+0x228>)
 8006c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c0c:	8979      	ldrh	r1, [r7, #10]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fa46 	bl	80070a4 <I2C_MasterRequestRead>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1b8      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d113      	bne.n	8006c52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	623b      	str	r3, [r7, #32]
 8006c3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e18c      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d11b      	bne.n	8006c92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e16c      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d11b      	bne.n	8006cd2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	e14c      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cf8:	e138      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	f200 80f1 	bhi.w	8006ee6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d123      	bne.n	8006d54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fbed 	bl	80074f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e139      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d52:	e10b      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d14e      	bne.n	8006dfa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	2200      	movs	r2, #0
 8006d64:	4906      	ldr	r1, [pc, #24]	; (8006d80 <HAL_I2C_Master_Receive+0x22c>)
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fa6a 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e10e      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
 8006d76:	bf00      	nop
 8006d78:	00100002 	.word	0x00100002
 8006d7c:	ffff0000 	.word	0xffff0000
 8006d80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006df8:	e0b8      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2200      	movs	r2, #0
 8006e02:	4966      	ldr	r1, [pc, #408]	; (8006f9c <HAL_I2C_Master_Receive+0x448>)
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fa1b 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0bf      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	494f      	ldr	r1, [pc, #316]	; (8006f9c <HAL_I2C_Master_Receive+0x448>)
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f9ed 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e091      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ee4:	e042      	b.n	8006f6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fb00 	bl	80074f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e04c      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d118      	bne.n	8006f6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f47f aec2 	bne.w	8006cfa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
  }
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	00010004 	.word	0x00010004

08006fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	460b      	mov	r3, r1
 8006fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d006      	beq.n	8006fca <I2C_MasterRequestWrite+0x2a>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d003      	beq.n	8006fca <I2C_MasterRequestWrite+0x2a>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fc8:	d108      	bne.n	8006fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e00b      	b.n	8006ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	2b12      	cmp	r3, #18
 8006fe2:	d107      	bne.n	8006ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f91d 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00d      	beq.n	8007028 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701a:	d103      	bne.n	8007024 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e035      	b.n	8007094 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007030:	d108      	bne.n	8007044 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007032:	897b      	ldrh	r3, [r7, #10]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007040:	611a      	str	r2, [r3, #16]
 8007042:	e01b      	b.n	800707c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007044:	897b      	ldrh	r3, [r7, #10]
 8007046:	11db      	asrs	r3, r3, #7
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 0306 	and.w	r3, r3, #6
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f063 030f 	orn	r3, r3, #15
 8007054:	b2da      	uxtb	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	490e      	ldr	r1, [pc, #56]	; (800709c <I2C_MasterRequestWrite+0xfc>)
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f943 	bl	80072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e010      	b.n	8007094 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007072:	897b      	ldrh	r3, [r7, #10]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4907      	ldr	r1, [pc, #28]	; (80070a0 <I2C_MasterRequestWrite+0x100>)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f933 	bl	80072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	00010008 	.word	0x00010008
 80070a0:	00010002 	.word	0x00010002

080070a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	460b      	mov	r3, r1
 80070b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d006      	beq.n	80070de <I2C_MasterRequestRead+0x3a>
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d003      	beq.n	80070de <I2C_MasterRequestRead+0x3a>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070dc:	d108      	bne.n	80070f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e00b      	b.n	8007108 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	2b11      	cmp	r3, #17
 80070f6:	d107      	bne.n	8007108 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f893 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712e:	d103      	bne.n	8007138 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e079      	b.n	8007230 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007144:	d108      	bne.n	8007158 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]
 8007156:	e05f      	b.n	8007218 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	11db      	asrs	r3, r3, #7
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0306 	and.w	r3, r3, #6
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f063 030f 	orn	r3, r3, #15
 8007168:	b2da      	uxtb	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4930      	ldr	r1, [pc, #192]	; (8007238 <I2C_MasterRequestRead+0x194>)
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f8b9 	bl	80072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e054      	b.n	8007230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4929      	ldr	r1, [pc, #164]	; (800723c <I2C_MasterRequestRead+0x198>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f8a9 	bl	80072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e044      	b.n	8007230 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f831 	bl	8007240 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d103      	bne.n	80071fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e017      	b.n	8007230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007200:	897b      	ldrh	r3, [r7, #10]
 8007202:	11db      	asrs	r3, r3, #7
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0306 	and.w	r3, r3, #6
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f063 030e 	orn	r3, r3, #14
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4907      	ldr	r1, [pc, #28]	; (800723c <I2C_MasterRequestRead+0x198>)
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f865 	bl	80072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	00010008 	.word	0x00010008
 800723c:	00010002 	.word	0x00010002

08007240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007250:	e025      	b.n	800729e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d021      	beq.n	800729e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725a:	f7fe ff5b 	bl	8006114 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d302      	bcc.n	8007270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d116      	bne.n	800729e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f043 0220 	orr.w	r2, r3, #32
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e023      	b.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	0c1b      	lsrs	r3, r3, #16
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10d      	bne.n	80072c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	43da      	mvns	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4013      	ands	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bf0c      	ite	eq
 80072ba:	2301      	moveq	r3, #1
 80072bc:	2300      	movne	r3, #0
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	e00c      	b.n	80072de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	43da      	mvns	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4013      	ands	r3, r2
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bf0c      	ite	eq
 80072d6:	2301      	moveq	r3, #1
 80072d8:	2300      	movne	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d0b6      	beq.n	8007252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072fc:	e051      	b.n	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d123      	bne.n	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f043 0204 	orr.w	r2, r3, #4
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e046      	b.n	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d021      	beq.n	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735e:	f7fe fed9 	bl	8006114 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d302      	bcc.n	8007374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d116      	bne.n	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f043 0220 	orr.w	r2, r3, #32
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e020      	b.n	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10c      	bne.n	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	43da      	mvns	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4013      	ands	r3, r2
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e00b      	b.n	80073de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	43da      	mvns	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4013      	ands	r3, r2
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d18d      	bne.n	80072fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073f8:	e02d      	b.n	8007456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f8ce 	bl	800759c <I2C_IsAcknowledgeFailed>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e02d      	b.n	8007466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d021      	beq.n	8007456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007412:	f7fe fe7f 	bl	8006114 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	429a      	cmp	r2, r3
 8007420:	d302      	bcc.n	8007428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d116      	bne.n	8007456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f043 0220 	orr.w	r2, r3, #32
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e007      	b.n	8007466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d1ca      	bne.n	80073fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800747a:	e02d      	b.n	80074d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f88d 	bl	800759c <I2C_IsAcknowledgeFailed>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e02d      	b.n	80074e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d021      	beq.n	80074d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007494:	f7fe fe3e 	bl	8006114 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d302      	bcc.n	80074aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d116      	bne.n	80074d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e007      	b.n	80074e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d1ca      	bne.n	800747c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074fc:	e042      	b.n	8007584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b10      	cmp	r3, #16
 800750a:	d119      	bne.n	8007540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0210 	mvn.w	r2, #16
 8007514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e029      	b.n	8007594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007540:	f7fe fde8 	bl	8006114 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d116      	bne.n	8007584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	f043 0220 	orr.w	r2, r3, #32
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e007      	b.n	8007594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	d1b5      	bne.n	80074fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b2:	d11b      	bne.n	80075ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f043 0204 	orr.w	r2, r3, #4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0cc      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007610:	4b68      	ldr	r3, [pc, #416]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d90c      	bls.n	8007638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b63      	ldr	r3, [pc, #396]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0b8      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d020      	beq.n	8007686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007650:	4b59      	ldr	r3, [pc, #356]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	4a58      	ldr	r2, [pc, #352]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800765a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007668:	4b53      	ldr	r3, [pc, #332]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4a52      	ldr	r2, [pc, #328]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007674:	4b50      	ldr	r3, [pc, #320]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	494d      	ldr	r1, [pc, #308]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d044      	beq.n	800771c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d107      	bne.n	80076aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769a:	4b47      	ldr	r3, [pc, #284]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d119      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e07f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d003      	beq.n	80076ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d107      	bne.n	80076ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ba:	4b3f      	ldr	r3, [pc, #252]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e06f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ca:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e067      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076da:	4b37      	ldr	r3, [pc, #220]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f023 0203 	bic.w	r2, r3, #3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4934      	ldr	r1, [pc, #208]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076ec:	f7fe fd12 	bl	8006114 <HAL_GetTick>
 80076f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f2:	e00a      	b.n	800770a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f4:	f7fe fd0e 	bl	8006114 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e04f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770a:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 020c 	and.w	r2, r3, #12
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	429a      	cmp	r2, r3
 800771a:	d1eb      	bne.n	80076f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800771c:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d20c      	bcs.n	8007744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772a:	4b22      	ldr	r3, [pc, #136]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d001      	beq.n	8007744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e032      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007750:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4916      	ldr	r1, [pc, #88]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	4313      	orrs	r3, r2
 8007760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	490e      	ldr	r1, [pc, #56]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800777e:	4313      	orrs	r3, r2
 8007780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007782:	f000 f855 	bl	8007830 <HAL_RCC_GetSysClockFreq>
 8007786:	4602      	mov	r2, r0
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	490a      	ldr	r1, [pc, #40]	; (80077bc <HAL_RCC_ClockConfig+0x1c0>)
 8007794:	5ccb      	ldrb	r3, [r1, r3]
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCC_ClockConfig+0x1c8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fc72 	bl	800608c <HAL_InitTick>

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023c00 	.word	0x40023c00
 80077b8:	40023800 	.word	0x40023800
 80077bc:	0800ce60 	.word	0x0800ce60
 80077c0:	20000004 	.word	0x20000004
 80077c4:	20000014 	.word	0x20000014

080077c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <HAL_RCC_GetHCLKFreq+0x14>)
 80077ce:	681b      	ldr	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000004 	.word	0x20000004

080077e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077e4:	f7ff fff0 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 80077e8:	4602      	mov	r2, r0
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	0a9b      	lsrs	r3, r3, #10
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	4903      	ldr	r1, [pc, #12]	; (8007804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077f6:	5ccb      	ldrb	r3, [r1, r3]
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40023800 	.word	0x40023800
 8007804:	0800ce70 	.word	0x0800ce70

08007808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800780c:	f7ff ffdc 	bl	80077c8 <HAL_RCC_GetHCLKFreq>
 8007810:	4602      	mov	r2, r0
 8007812:	4b05      	ldr	r3, [pc, #20]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	0b5b      	lsrs	r3, r3, #13
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	4903      	ldr	r1, [pc, #12]	; (800782c <HAL_RCC_GetPCLK2Freq+0x24>)
 800781e:	5ccb      	ldrb	r3, [r1, r3]
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40023800 	.word	0x40023800
 800782c:	0800ce70 	.word	0x0800ce70

08007830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007834:	b088      	sub	sp, #32
 8007836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800784c:	4bce      	ldr	r3, [pc, #824]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 030c 	and.w	r3, r3, #12
 8007854:	2b0c      	cmp	r3, #12
 8007856:	f200 818d 	bhi.w	8007b74 <HAL_RCC_GetSysClockFreq+0x344>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_RCC_GetSysClockFreq+0x30>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007895 	.word	0x08007895
 8007864:	08007b75 	.word	0x08007b75
 8007868:	08007b75 	.word	0x08007b75
 800786c:	08007b75 	.word	0x08007b75
 8007870:	0800789b 	.word	0x0800789b
 8007874:	08007b75 	.word	0x08007b75
 8007878:	08007b75 	.word	0x08007b75
 800787c:	08007b75 	.word	0x08007b75
 8007880:	080078a1 	.word	0x080078a1
 8007884:	08007b75 	.word	0x08007b75
 8007888:	08007b75 	.word	0x08007b75
 800788c:	08007b75 	.word	0x08007b75
 8007890:	08007a15 	.word	0x08007a15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007894:	4bbd      	ldr	r3, [pc, #756]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007896:	61bb      	str	r3, [r7, #24]
       break;
 8007898:	e16f      	b.n	8007b7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800789a:	4bbd      	ldr	r3, [pc, #756]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x360>)
 800789c:	61bb      	str	r3, [r7, #24]
      break;
 800789e:	e16c      	b.n	8007b7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a0:	4bb9      	ldr	r3, [pc, #740]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078aa:	4bb7      	ldr	r3, [pc, #732]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d053      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078b6:	4bb4      	ldr	r3, [pc, #720]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	461a      	mov	r2, r3
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078c6:	f04f 0100 	mov.w	r1, #0
 80078ca:	ea02 0400 	and.w	r4, r2, r0
 80078ce:	603c      	str	r4, [r7, #0]
 80078d0:	400b      	ands	r3, r1
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	014b      	lsls	r3, r1, #5
 80078e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078ea:	0142      	lsls	r2, r0, #5
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	4623      	mov	r3, r4
 80078f2:	1ac0      	subs	r0, r0, r3
 80078f4:	462b      	mov	r3, r5
 80078f6:	eb61 0103 	sbc.w	r1, r1, r3
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	018b      	lsls	r3, r1, #6
 8007904:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007908:	0182      	lsls	r2, r0, #6
 800790a:	1a12      	subs	r2, r2, r0
 800790c:	eb63 0301 	sbc.w	r3, r3, r1
 8007910:	f04f 0000 	mov.w	r0, #0
 8007914:	f04f 0100 	mov.w	r1, #0
 8007918:	00d9      	lsls	r1, r3, #3
 800791a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800791e:	00d0      	lsls	r0, r2, #3
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4621      	mov	r1, r4
 8007926:	1852      	adds	r2, r2, r1
 8007928:	4629      	mov	r1, r5
 800792a:	eb43 0101 	adc.w	r1, r3, r1
 800792e:	460b      	mov	r3, r1
 8007930:	f04f 0000 	mov.w	r0, #0
 8007934:	f04f 0100 	mov.w	r1, #0
 8007938:	0259      	lsls	r1, r3, #9
 800793a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800793e:	0250      	lsls	r0, r2, #9
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4610      	mov	r0, r2
 8007946:	4619      	mov	r1, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	461a      	mov	r2, r3
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	f7f9 f99a 	bl	8000c88 <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	e04c      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800795e:	4b8a      	ldr	r3, [pc, #552]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	099b      	lsrs	r3, r3, #6
 8007964:	461a      	mov	r2, r3
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	ea02 0a00 	and.w	sl, r2, r0
 8007976:	ea03 0b01 	and.w	fp, r3, r1
 800797a:	4650      	mov	r0, sl
 800797c:	4659      	mov	r1, fp
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	014b      	lsls	r3, r1, #5
 8007988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800798c:	0142      	lsls	r2, r0, #5
 800798e:	4610      	mov	r0, r2
 8007990:	4619      	mov	r1, r3
 8007992:	ebb0 000a 	subs.w	r0, r0, sl
 8007996:	eb61 010b 	sbc.w	r1, r1, fp
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	018b      	lsls	r3, r1, #6
 80079a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80079a8:	0182      	lsls	r2, r0, #6
 80079aa:	1a12      	subs	r2, r2, r0
 80079ac:	eb63 0301 	sbc.w	r3, r3, r1
 80079b0:	f04f 0000 	mov.w	r0, #0
 80079b4:	f04f 0100 	mov.w	r1, #0
 80079b8:	00d9      	lsls	r1, r3, #3
 80079ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079be:	00d0      	lsls	r0, r2, #3
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	eb12 020a 	adds.w	r2, r2, sl
 80079c8:	eb43 030b 	adc.w	r3, r3, fp
 80079cc:	f04f 0000 	mov.w	r0, #0
 80079d0:	f04f 0100 	mov.w	r1, #0
 80079d4:	0299      	lsls	r1, r3, #10
 80079d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80079da:	0290      	lsls	r0, r2, #10
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4610      	mov	r0, r2
 80079e2:	4619      	mov	r1, r3
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	f7f9 f94c 	bl	8000c88 <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4613      	mov	r3, r2
 80079f6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079f8:	4b63      	ldr	r3, [pc, #396]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	3301      	adds	r3, #1
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a10:	61bb      	str	r3, [r7, #24]
      break;
 8007a12:	e0b2      	b.n	8007b7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a14:	4b5c      	ldr	r3, [pc, #368]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a1e:	4b5a      	ldr	r3, [pc, #360]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d04d      	beq.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2a:	4b57      	ldr	r3, [pc, #348]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	461a      	mov	r2, r3
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a3a:	f04f 0100 	mov.w	r1, #0
 8007a3e:	ea02 0800 	and.w	r8, r2, r0
 8007a42:	ea03 0901 	and.w	r9, r3, r1
 8007a46:	4640      	mov	r0, r8
 8007a48:	4649      	mov	r1, r9
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	014b      	lsls	r3, r1, #5
 8007a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a58:	0142      	lsls	r2, r0, #5
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	ebb0 0008 	subs.w	r0, r0, r8
 8007a62:	eb61 0109 	sbc.w	r1, r1, r9
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	018b      	lsls	r3, r1, #6
 8007a70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a74:	0182      	lsls	r2, r0, #6
 8007a76:	1a12      	subs	r2, r2, r0
 8007a78:	eb63 0301 	sbc.w	r3, r3, r1
 8007a7c:	f04f 0000 	mov.w	r0, #0
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	00d9      	lsls	r1, r3, #3
 8007a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a8a:	00d0      	lsls	r0, r2, #3
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	eb12 0208 	adds.w	r2, r2, r8
 8007a94:	eb43 0309 	adc.w	r3, r3, r9
 8007a98:	f04f 0000 	mov.w	r0, #0
 8007a9c:	f04f 0100 	mov.w	r1, #0
 8007aa0:	0259      	lsls	r1, r3, #9
 8007aa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007aa6:	0250      	lsls	r0, r2, #9
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4610      	mov	r0, r2
 8007aae:	4619      	mov	r1, r3
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	f7f9 f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e04a      	b.n	8007b5c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac6:	4b30      	ldr	r3, [pc, #192]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	099b      	lsrs	r3, r3, #6
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ad6:	f04f 0100 	mov.w	r1, #0
 8007ada:	ea02 0400 	and.w	r4, r2, r0
 8007ade:	ea03 0501 	and.w	r5, r3, r1
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	014b      	lsls	r3, r1, #5
 8007af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007af4:	0142      	lsls	r2, r0, #5
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	1b00      	subs	r0, r0, r4
 8007afc:	eb61 0105 	sbc.w	r1, r1, r5
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	018b      	lsls	r3, r1, #6
 8007b0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b0e:	0182      	lsls	r2, r0, #6
 8007b10:	1a12      	subs	r2, r2, r0
 8007b12:	eb63 0301 	sbc.w	r3, r3, r1
 8007b16:	f04f 0000 	mov.w	r0, #0
 8007b1a:	f04f 0100 	mov.w	r1, #0
 8007b1e:	00d9      	lsls	r1, r3, #3
 8007b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b24:	00d0      	lsls	r0, r2, #3
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	1912      	adds	r2, r2, r4
 8007b2c:	eb45 0303 	adc.w	r3, r5, r3
 8007b30:	f04f 0000 	mov.w	r0, #0
 8007b34:	f04f 0100 	mov.w	r1, #0
 8007b38:	0299      	lsls	r1, r3, #10
 8007b3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b3e:	0290      	lsls	r0, r2, #10
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4610      	mov	r0, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	f7f9 f89a 	bl	8000c88 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x358>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	0f1b      	lsrs	r3, r3, #28
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b70:	61bb      	str	r3, [r7, #24]
      break;
 8007b72:	e002      	b.n	8007b7a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007b76:	61bb      	str	r3, [r7, #24]
      break;
 8007b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b86:	bf00      	nop
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	00f42400 	.word	0x00f42400
 8007b90:	007a1200 	.word	0x007a1200

08007b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e28d      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8083 	beq.w	8007cba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bb4:	4b94      	ldr	r3, [pc, #592]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 030c 	and.w	r3, r3, #12
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d019      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bc0:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d106      	bne.n	8007bda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bcc:	4b8e      	ldr	r3, [pc, #568]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bda:	4b8b      	ldr	r3, [pc, #556]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007be2:	2b0c      	cmp	r3, #12
 8007be4:	d112      	bne.n	8007c0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007be6:	4b88      	ldr	r3, [pc, #544]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bf2:	d10b      	bne.n	8007c0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	4b84      	ldr	r3, [pc, #528]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05b      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x124>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d157      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e25a      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c14:	d106      	bne.n	8007c24 <HAL_RCC_OscConfig+0x90>
 8007c16:	4b7c      	ldr	r3, [pc, #496]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a7b      	ldr	r2, [pc, #492]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	e01d      	b.n	8007c60 <HAL_RCC_OscConfig+0xcc>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0xb4>
 8007c2e:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a75      	ldr	r2, [pc, #468]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b73      	ldr	r3, [pc, #460]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a72      	ldr	r2, [pc, #456]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e00b      	b.n	8007c60 <HAL_RCC_OscConfig+0xcc>
 8007c48:	4b6f      	ldr	r3, [pc, #444]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a6e      	ldr	r2, [pc, #440]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4b6c      	ldr	r3, [pc, #432]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a6b      	ldr	r2, [pc, #428]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d013      	beq.n	8007c90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fe fa54 	bl	8006114 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c70:	f7fe fa50 	bl	8006114 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e21f      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c82:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0xdc>
 8007c8e:	e014      	b.n	8007cba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fe fa40 	bl	8006114 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c98:	f7fe fa3c 	bl	8006114 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b64      	cmp	r3, #100	; 0x64
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e20b      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007caa:	4b57      	ldr	r3, [pc, #348]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0x104>
 8007cb6:	e000      	b.n	8007cba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d06f      	beq.n	8007da6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cc6:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d017      	beq.n	8007d02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cd2:	4b4d      	ldr	r3, [pc, #308]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d105      	bne.n	8007cea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00b      	beq.n	8007d02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cea:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cf2:	2b0c      	cmp	r3, #12
 8007cf4:	d11c      	bne.n	8007d30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cf6:	4b44      	ldr	r3, [pc, #272]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d116      	bne.n	8007d30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d02:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_RCC_OscConfig+0x186>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d001      	beq.n	8007d1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e1d3      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d1a:	4b3b      	ldr	r3, [pc, #236]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4937      	ldr	r1, [pc, #220]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d2e:	e03a      	b.n	8007da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d020      	beq.n	8007d7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d38:	4b34      	ldr	r3, [pc, #208]	; (8007e0c <HAL_RCC_OscConfig+0x278>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3e:	f7fe f9e9 	bl	8006114 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d46:	f7fe f9e5 	bl	8006114 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e1b4      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d64:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	4925      	ldr	r1, [pc, #148]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	600b      	str	r3, [r1, #0]
 8007d78:	e015      	b.n	8007da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <HAL_RCC_OscConfig+0x278>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fe f9c8 	bl	8006114 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d88:	f7fe f9c4 	bl	8006114 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e193      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d036      	beq.n	8007e20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc0:	f7fe f9a8 	bl	8006114 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc8:	f7fe f9a4 	bl	8006114 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e173      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_RCC_OscConfig+0x274>)
 8007ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x234>
 8007de6:	e01b      	b.n	8007e20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dee:	f7fe f991 	bl	8006114 <HAL_GetTick>
 8007df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007df4:	e00e      	b.n	8007e14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df6:	f7fe f98d 	bl	8006114 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d907      	bls.n	8007e14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e15c      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	42470000 	.word	0x42470000
 8007e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e14:	4b8a      	ldr	r3, [pc, #552]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1ea      	bne.n	8007df6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8097 	beq.w	8007f5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e32:	4b83      	ldr	r3, [pc, #524]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10f      	bne.n	8007e5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	4a7e      	ldr	r2, [pc, #504]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e4e:	4b7c      	ldr	r3, [pc, #496]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e5e:	4b79      	ldr	r3, [pc, #484]	; (8008044 <HAL_RCC_OscConfig+0x4b0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d118      	bne.n	8007e9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e6a:	4b76      	ldr	r3, [pc, #472]	; (8008044 <HAL_RCC_OscConfig+0x4b0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a75      	ldr	r2, [pc, #468]	; (8008044 <HAL_RCC_OscConfig+0x4b0>)
 8007e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e76:	f7fe f94d 	bl	8006114 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e7e:	f7fe f949 	bl	8006114 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e118      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e90:	4b6c      	ldr	r3, [pc, #432]	; (8008044 <HAL_RCC_OscConfig+0x4b0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d106      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x31e>
 8007ea4:	4b66      	ldr	r3, [pc, #408]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	4a65      	ldr	r2, [pc, #404]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb0:	e01c      	b.n	8007eec <HAL_RCC_OscConfig+0x358>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	d10c      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x340>
 8007eba:	4b61      	ldr	r3, [pc, #388]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebe:	4a60      	ldr	r2, [pc, #384]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ec0:	f043 0304 	orr.w	r3, r3, #4
 8007ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec6:	4b5e      	ldr	r3, [pc, #376]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	4a5d      	ldr	r2, [pc, #372]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed2:	e00b      	b.n	8007eec <HAL_RCC_OscConfig+0x358>
 8007ed4:	4b5a      	ldr	r3, [pc, #360]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	4a59      	ldr	r2, [pc, #356]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee0:	4b57      	ldr	r3, [pc, #348]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a56      	ldr	r2, [pc, #344]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ee6:	f023 0304 	bic.w	r3, r3, #4
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d015      	beq.n	8007f20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef4:	f7fe f90e 	bl	8006114 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007efa:	e00a      	b.n	8007f12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007efc:	f7fe f90a 	bl	8006114 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e0d7      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f12:	4b4b      	ldr	r3, [pc, #300]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0ee      	beq.n	8007efc <HAL_RCC_OscConfig+0x368>
 8007f1e:	e014      	b.n	8007f4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fe f8f8 	bl	8006114 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f26:	e00a      	b.n	8007f3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f28:	f7fe f8f4 	bl	8006114 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e0c1      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f3e:	4b40      	ldr	r3, [pc, #256]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1ee      	bne.n	8007f28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f50:	4b3b      	ldr	r3, [pc, #236]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	4a3a      	ldr	r2, [pc, #232]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80ad 	beq.w	80080c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f66:	4b36      	ldr	r3, [pc, #216]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d060      	beq.n	8008034 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d145      	bne.n	8008006 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f7a:	4b33      	ldr	r3, [pc, #204]	; (8008048 <HAL_RCC_OscConfig+0x4b4>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fe f8c8 	bl	8006114 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f88:	f7fe f8c4 	bl	8006114 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e093      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9a:	4b29      	ldr	r3, [pc, #164]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69da      	ldr	r2, [r3, #28]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	019b      	lsls	r3, r3, #6
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	061b      	lsls	r3, r3, #24
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd0:	071b      	lsls	r3, r3, #28
 8007fd2:	491b      	ldr	r1, [pc, #108]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fd8:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <HAL_RCC_OscConfig+0x4b4>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fde:	f7fe f899 	bl	8006114 <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fe6:	f7fe f895 	bl	8006114 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e064      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x452>
 8008004:	e05c      	b.n	80080c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <HAL_RCC_OscConfig+0x4b4>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800c:	f7fe f882 	bl	8006114 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008014:	f7fe f87e 	bl	8006114 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e04d      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <HAL_RCC_OscConfig+0x4ac>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0x480>
 8008032:	e045      	b.n	80080c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d107      	bne.n	800804c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e040      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
 8008040:	40023800 	.word	0x40023800
 8008044:	40007000 	.word	0x40007000
 8008048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800804c:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <HAL_RCC_OscConfig+0x538>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d030      	beq.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008064:	429a      	cmp	r2, r3
 8008066:	d129      	bne.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008072:	429a      	cmp	r2, r3
 8008074:	d122      	bne.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800807c:	4013      	ands	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008084:	4293      	cmp	r3, r2
 8008086:	d119      	bne.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	3b01      	subs	r3, #1
 8008096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008098:	429a      	cmp	r2, r3
 800809a:	d10f      	bne.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d107      	bne.n	80080bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d001      	beq.n	80080c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800

080080d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e07b      	b.n	80081da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d108      	bne.n	80080fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080f2:	d009      	beq.n	8008108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	61da      	str	r2, [r3, #28]
 80080fa:	e005      	b.n	8008108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7f9 fe82 	bl	8001e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	ea42 0103 	orr.w	r1, r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	f003 0104 	and.w	r1, r3, #4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	f003 0210 	and.w	r2, r3, #16
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e041      	b.n	8008278 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f9 fe87 	bl	8001f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f000 fb41 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b01      	cmp	r3, #1
 8008292:	d001      	beq.n	8008298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e046      	b.n	8008326 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a23      	ldr	r2, [pc, #140]	; (8008334 <HAL_TIM_Base_Start+0xb4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d022      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b2:	d01d      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1f      	ldr	r2, [pc, #124]	; (8008338 <HAL_TIM_Base_Start+0xb8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d018      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1e      	ldr	r2, [pc, #120]	; (800833c <HAL_TIM_Base_Start+0xbc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d013      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1c      	ldr	r2, [pc, #112]	; (8008340 <HAL_TIM_Base_Start+0xc0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1b      	ldr	r2, [pc, #108]	; (8008344 <HAL_TIM_Base_Start+0xc4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <HAL_TIM_Base_Start+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <HAL_TIM_Base_Start+0xcc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d111      	bne.n	8008314 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d010      	beq.n	8008324 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008312:	e007      	b.n	8008324 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40010400 	.word	0x40010400
 8008348:	40014000 	.word	0x40014000
 800834c:	40001800 	.word	0x40001800

08008350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e041      	b.n	80083e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f839 	bl	80083ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f000 fa8a 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_TIM_PWM_Start+0x24>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	bf14      	ite	ne
 8008420:	2301      	movne	r3, #1
 8008422:	2300      	moveq	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	e022      	b.n	800846e <HAL_TIM_PWM_Start+0x6a>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b04      	cmp	r3, #4
 800842c:	d109      	bne.n	8008442 <HAL_TIM_PWM_Start+0x3e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	bf14      	ite	ne
 800843a:	2301      	movne	r3, #1
 800843c:	2300      	moveq	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	e015      	b.n	800846e <HAL_TIM_PWM_Start+0x6a>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b08      	cmp	r3, #8
 8008446:	d109      	bne.n	800845c <HAL_TIM_PWM_Start+0x58>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b01      	cmp	r3, #1
 8008452:	bf14      	ite	ne
 8008454:	2301      	movne	r3, #1
 8008456:	2300      	moveq	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e008      	b.n	800846e <HAL_TIM_PWM_Start+0x6a>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e07c      	b.n	8008570 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <HAL_TIM_PWM_Start+0x82>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008484:	e013      	b.n	80084ae <HAL_TIM_PWM_Start+0xaa>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b04      	cmp	r3, #4
 800848a:	d104      	bne.n	8008496 <HAL_TIM_PWM_Start+0x92>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008494:	e00b      	b.n	80084ae <HAL_TIM_PWM_Start+0xaa>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d104      	bne.n	80084a6 <HAL_TIM_PWM_Start+0xa2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084a4:	e003      	b.n	80084ae <HAL_TIM_PWM_Start+0xaa>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2201      	movs	r2, #1
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fce0 	bl	8008e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2d      	ldr	r2, [pc, #180]	; (8008578 <HAL_TIM_PWM_Start+0x174>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <HAL_TIM_PWM_Start+0xcc>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a2c      	ldr	r2, [pc, #176]	; (800857c <HAL_TIM_PWM_Start+0x178>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d101      	bne.n	80084d4 <HAL_TIM_PWM_Start+0xd0>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <HAL_TIM_PWM_Start+0xd2>
 80084d4:	2300      	movs	r3, #0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a22      	ldr	r2, [pc, #136]	; (8008578 <HAL_TIM_PWM_Start+0x174>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d01d      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <HAL_TIM_PWM_Start+0x17c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <HAL_TIM_PWM_Start+0x180>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <HAL_TIM_PWM_Start+0x184>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <HAL_TIM_PWM_Start+0x178>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a18      	ldr	r2, [pc, #96]	; (800858c <HAL_TIM_PWM_Start+0x188>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIM_PWM_Start+0x136>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a16      	ldr	r2, [pc, #88]	; (8008590 <HAL_TIM_PWM_Start+0x18c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d111      	bne.n	800855e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b06      	cmp	r3, #6
 800854a:	d010      	beq.n	800856e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855c:	e007      	b.n	800856e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0201 	orr.w	r2, r2, #1
 800856c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40010000 	.word	0x40010000
 800857c:	40010400 	.word	0x40010400
 8008580:	40000400 	.word	0x40000400
 8008584:	40000800 	.word	0x40000800
 8008588:	40000c00 	.word	0x40000c00
 800858c:	40014000 	.word	0x40014000
 8008590:	40001800 	.word	0x40001800

08008594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e0ae      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b0c      	cmp	r3, #12
 80085be:	f200 809f 	bhi.w	8008700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085c2:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085fd 	.word	0x080085fd
 80085cc:	08008701 	.word	0x08008701
 80085d0:	08008701 	.word	0x08008701
 80085d4:	08008701 	.word	0x08008701
 80085d8:	0800863d 	.word	0x0800863d
 80085dc:	08008701 	.word	0x08008701
 80085e0:	08008701 	.word	0x08008701
 80085e4:	08008701 	.word	0x08008701
 80085e8:	0800867f 	.word	0x0800867f
 80085ec:	08008701 	.word	0x08008701
 80085f0:	08008701 	.word	0x08008701
 80085f4:	08008701 	.word	0x08008701
 80085f8:	080086bf 	.word	0x080086bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f9f0 	bl	80089e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0208 	orr.w	r2, r2, #8
 8008616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0204 	bic.w	r2, r2, #4
 8008626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6999      	ldr	r1, [r3, #24]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	619a      	str	r2, [r3, #24]
      break;
 800863a:	e064      	b.n	8008706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fa40 	bl	8008ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699a      	ldr	r2, [r3, #24]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6999      	ldr	r1, [r3, #24]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	021a      	lsls	r2, r3, #8
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	619a      	str	r2, [r3, #24]
      break;
 800867c:	e043      	b.n	8008706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fa95 	bl	8008bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0208 	orr.w	r2, r2, #8
 8008698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0204 	bic.w	r2, r2, #4
 80086a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69d9      	ldr	r1, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	691a      	ldr	r2, [r3, #16]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	61da      	str	r2, [r3, #28]
      break;
 80086bc:	e023      	b.n	8008706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fae9 	bl	8008c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69d9      	ldr	r1, [r3, #28]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	021a      	lsls	r2, r3, #8
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	61da      	str	r2, [r3, #28]
      break;
 80086fe:	e002      	b.n	8008706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	75fb      	strb	r3, [r7, #23]
      break;
 8008704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_TIM_ConfigClockSource+0x1c>
 8008730:	2302      	movs	r3, #2
 8008732:	e0b4      	b.n	800889e <HAL_TIM_ConfigClockSource+0x186>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876c:	d03e      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0xd4>
 800876e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008772:	f200 8087 	bhi.w	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877a:	f000 8086 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x172>
 800877e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008782:	d87f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008784:	2b70      	cmp	r3, #112	; 0x70
 8008786:	d01a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0xa6>
 8008788:	2b70      	cmp	r3, #112	; 0x70
 800878a:	d87b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800878c:	2b60      	cmp	r3, #96	; 0x60
 800878e:	d050      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x11a>
 8008790:	2b60      	cmp	r3, #96	; 0x60
 8008792:	d877      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008794:	2b50      	cmp	r3, #80	; 0x50
 8008796:	d03c      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0xfa>
 8008798:	2b50      	cmp	r3, #80	; 0x50
 800879a:	d873      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d058      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x13a>
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d86f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b30      	cmp	r3, #48	; 0x30
 80087a6:	d064      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087a8:	2b30      	cmp	r3, #48	; 0x30
 80087aa:	d86b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d060      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d867      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d05c      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d05a      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087bc:	e062      	b.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6899      	ldr	r1, [r3, #8]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f000 fb35 	bl	8008e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	609a      	str	r2, [r3, #8]
      break;
 80087ea:	e04f      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	6899      	ldr	r1, [r3, #8]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f000 fb1e 	bl	8008e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800880e:	609a      	str	r2, [r3, #8]
      break;
 8008810:	e03c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	461a      	mov	r2, r3
 8008820:	f000 fa92 	bl	8008d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2150      	movs	r1, #80	; 0x50
 800882a:	4618      	mov	r0, r3
 800882c:	f000 faeb 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 8008830:	e02c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	461a      	mov	r2, r3
 8008840:	f000 fab1 	bl	8008da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2160      	movs	r1, #96	; 0x60
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fadb 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 8008850:	e01c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6859      	ldr	r1, [r3, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	461a      	mov	r2, r3
 8008860:	f000 fa72 	bl	8008d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2140      	movs	r1, #64	; 0x40
 800886a:	4618      	mov	r0, r3
 800886c:	f000 facb 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 8008870:	e00c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f000 fac2 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 8008882:	e003      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e000      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800888a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a40      	ldr	r2, [pc, #256]	; (80089bc <TIM_Base_SetConfig+0x114>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d013      	beq.n	80088e8 <TIM_Base_SetConfig+0x40>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c6:	d00f      	beq.n	80088e8 <TIM_Base_SetConfig+0x40>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a3d      	ldr	r2, [pc, #244]	; (80089c0 <TIM_Base_SetConfig+0x118>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00b      	beq.n	80088e8 <TIM_Base_SetConfig+0x40>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a3c      	ldr	r2, [pc, #240]	; (80089c4 <TIM_Base_SetConfig+0x11c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d007      	beq.n	80088e8 <TIM_Base_SetConfig+0x40>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3b      	ldr	r2, [pc, #236]	; (80089c8 <TIM_Base_SetConfig+0x120>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_Base_SetConfig+0x40>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a3a      	ldr	r2, [pc, #232]	; (80089cc <TIM_Base_SetConfig+0x124>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d108      	bne.n	80088fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2f      	ldr	r2, [pc, #188]	; (80089bc <TIM_Base_SetConfig+0x114>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d02b      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008908:	d027      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <TIM_Base_SetConfig+0x118>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d023      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2b      	ldr	r2, [pc, #172]	; (80089c4 <TIM_Base_SetConfig+0x11c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d01f      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2a      	ldr	r2, [pc, #168]	; (80089c8 <TIM_Base_SetConfig+0x120>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d01b      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a29      	ldr	r2, [pc, #164]	; (80089cc <TIM_Base_SetConfig+0x124>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d017      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a28      	ldr	r2, [pc, #160]	; (80089d0 <TIM_Base_SetConfig+0x128>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d013      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a27      	ldr	r2, [pc, #156]	; (80089d4 <TIM_Base_SetConfig+0x12c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00f      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a26      	ldr	r2, [pc, #152]	; (80089d8 <TIM_Base_SetConfig+0x130>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00b      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a25      	ldr	r2, [pc, #148]	; (80089dc <TIM_Base_SetConfig+0x134>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d007      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a24      	ldr	r2, [pc, #144]	; (80089e0 <TIM_Base_SetConfig+0x138>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a23      	ldr	r2, [pc, #140]	; (80089e4 <TIM_Base_SetConfig+0x13c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d108      	bne.n	800896c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <TIM_Base_SetConfig+0x114>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_Base_SetConfig+0xf8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <TIM_Base_SetConfig+0x124>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d103      	bne.n	80089a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	615a      	str	r2, [r3, #20]
}
 80089ae:	bf00      	nop
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40010000 	.word	0x40010000
 80089c0:	40000400 	.word	0x40000400
 80089c4:	40000800 	.word	0x40000800
 80089c8:	40000c00 	.word	0x40000c00
 80089cc:	40010400 	.word	0x40010400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800
 80089dc:	40001800 	.word	0x40001800
 80089e0:	40001c00 	.word	0x40001c00
 80089e4:	40002000 	.word	0x40002000

080089e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f023 0302 	bic.w	r3, r3, #2
 8008a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a20      	ldr	r2, [pc, #128]	; (8008ac0 <TIM_OC1_SetConfig+0xd8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_OC1_SetConfig+0x64>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1f      	ldr	r2, [pc, #124]	; (8008ac4 <TIM_OC1_SetConfig+0xdc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d10c      	bne.n	8008a66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0308 	bic.w	r3, r3, #8
 8008a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f023 0304 	bic.w	r3, r3, #4
 8008a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <TIM_OC1_SetConfig+0xd8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_OC1_SetConfig+0x8e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a14      	ldr	r2, [pc, #80]	; (8008ac4 <TIM_OC1_SetConfig+0xdc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d111      	bne.n	8008a9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	621a      	str	r2, [r3, #32]
}
 8008ab4:	bf00      	nop
 8008ab6:	371c      	adds	r7, #28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	40010000 	.word	0x40010000
 8008ac4:	40010400 	.word	0x40010400

08008ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f023 0210 	bic.w	r2, r3, #16
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f023 0320 	bic.w	r3, r3, #32
 8008b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	011b      	lsls	r3, r3, #4
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a22      	ldr	r2, [pc, #136]	; (8008bac <TIM_OC2_SetConfig+0xe4>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_OC2_SetConfig+0x68>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a21      	ldr	r2, [pc, #132]	; (8008bb0 <TIM_OC2_SetConfig+0xe8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10d      	bne.n	8008b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a17      	ldr	r2, [pc, #92]	; (8008bac <TIM_OC2_SetConfig+0xe4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_OC2_SetConfig+0x94>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a16      	ldr	r2, [pc, #88]	; (8008bb0 <TIM_OC2_SetConfig+0xe8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d113      	bne.n	8008b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	621a      	str	r2, [r3, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40010400 	.word	0x40010400

08008bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a21      	ldr	r2, [pc, #132]	; (8008c94 <TIM_OC3_SetConfig+0xe0>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d003      	beq.n	8008c1a <TIM_OC3_SetConfig+0x66>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a20      	ldr	r2, [pc, #128]	; (8008c98 <TIM_OC3_SetConfig+0xe4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d10d      	bne.n	8008c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <TIM_OC3_SetConfig+0xe0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d003      	beq.n	8008c46 <TIM_OC3_SetConfig+0x92>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <TIM_OC3_SetConfig+0xe4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d113      	bne.n	8008c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	621a      	str	r2, [r3, #32]
}
 8008c88:	bf00      	nop
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40010400 	.word	0x40010400

08008c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	031b      	lsls	r3, r3, #12
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a12      	ldr	r2, [pc, #72]	; (8008d40 <TIM_OC4_SetConfig+0xa4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_OC4_SetConfig+0x68>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a11      	ldr	r2, [pc, #68]	; (8008d44 <TIM_OC4_SetConfig+0xa8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d109      	bne.n	8008d18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	019b      	lsls	r3, r3, #6
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400

08008d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f023 0201 	bic.w	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 030a 	bic.w	r3, r3, #10
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b087      	sub	sp, #28
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	f023 0210 	bic.w	r2, r3, #16
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	031b      	lsls	r3, r3, #12
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	f043 0307 	orr.w	r3, r3, #7
 8008e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	021a      	lsls	r2, r3, #8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	609a      	str	r2, [r3, #8]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 031f 	and.w	r3, r3, #31
 8008e8e:	2201      	movs	r2, #1
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1a      	ldr	r2, [r3, #32]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	401a      	ands	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	621a      	str	r2, [r3, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
	...

08008ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e05a      	b.n	8008f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a21      	ldr	r2, [pc, #132]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d022      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f2c:	d01d      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1d      	ldr	r2, [pc, #116]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d018      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d013      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1a      	ldr	r2, [pc, #104]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00e      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a18      	ldr	r2, [pc, #96]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d009      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d004      	beq.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a15      	ldr	r2, [pc, #84]	; (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d10c      	bne.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40010400 	.word	0x40010400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40001800 	.word	0x40001800

08008fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e03f      	b.n	8009052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7f9 f80a 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2224      	movs	r2, #36	; 0x24
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f929 	bl	800925c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2220      	movs	r2, #32
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b08a      	sub	sp, #40	; 0x28
 800905e:	af02      	add	r7, sp, #8
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	4613      	mov	r3, r2
 8009068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b20      	cmp	r3, #32
 8009078:	d17c      	bne.n	8009174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <HAL_UART_Transmit+0x2c>
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e075      	b.n	8009176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <HAL_UART_Transmit+0x3e>
 8009094:	2302      	movs	r3, #2
 8009096:	e06e      	b.n	8009176 <HAL_UART_Transmit+0x11c>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2221      	movs	r2, #33	; 0x21
 80090aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090ae:	f7fd f831 	bl	8006114 <HAL_GetTick>
 80090b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	88fa      	ldrh	r2, [r7, #6]
 80090be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c8:	d108      	bne.n	80090dc <HAL_UART_Transmit+0x82>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	61bb      	str	r3, [r7, #24]
 80090da:	e003      	b.n	80090e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090ec:	e02a      	b.n	8009144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2200      	movs	r2, #0
 80090f6:	2180      	movs	r1, #128	; 0x80
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f840 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e036      	b.n	8009176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10b      	bne.n	8009126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800911c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	3302      	adds	r3, #2
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	e007      	b.n	8009136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	781a      	ldrb	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	3301      	adds	r3, #1
 8009134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1cf      	bne.n	80090ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2200      	movs	r2, #0
 8009156:	2140      	movs	r1, #64	; 0x40
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f810 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e006      	b.n	8009176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2220      	movs	r2, #32
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e000      	b.n	8009176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009174:	2302      	movs	r3, #2
  }
}
 8009176:	4618      	mov	r0, r3
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b090      	sub	sp, #64	; 0x40
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918e:	e050      	b.n	8009232 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d04c      	beq.n	8009232 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <UART_WaitOnFlagUntilTimeout+0x30>
 800919e:	f7fc ffb9 	bl	8006114 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d241      	bcs.n	8009232 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	330c      	adds	r3, #12
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	330c      	adds	r3, #12
 80091cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091ce:	637a      	str	r2, [r7, #52]	; 0x34
 80091d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e5      	bne.n	80091ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3314      	adds	r3, #20
 80091e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	613b      	str	r3, [r7, #16]
   return(result);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3314      	adds	r3, #20
 8009200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009202:	623a      	str	r2, [r7, #32]
 8009204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	69f9      	ldr	r1, [r7, #28]
 8009208:	6a3a      	ldr	r2, [r7, #32]
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e5      	bne.n	80091e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2220      	movs	r2, #32
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e00f      	b.n	8009252 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4013      	ands	r3, r2
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	bf0c      	ite	eq
 8009242:	2301      	moveq	r3, #1
 8009244:	2300      	movne	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	461a      	mov	r2, r3
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	429a      	cmp	r2, r3
 800924e:	d09f      	beq.n	8009190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3740      	adds	r7, #64	; 0x40
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	b09f      	sub	sp, #124	; 0x7c
 8009262:	af00      	add	r7, sp, #0
 8009264:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009272:	68d9      	ldr	r1, [r3, #12]
 8009274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	ea40 0301 	orr.w	r3, r0, r1
 800927c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800927e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	431a      	orrs	r2, r3
 8009288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	431a      	orrs	r2, r3
 800928e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	4313      	orrs	r3, r2
 8009294:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092a0:	f021 010c 	bic.w	r1, r1, #12
 80092a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092aa:	430b      	orrs	r3, r1
 80092ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ba:	6999      	ldr	r1, [r3, #24]
 80092bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	ea40 0301 	orr.w	r3, r0, r1
 80092c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4bc5      	ldr	r3, [pc, #788]	; (80095e0 <UART_SetConfig+0x384>)
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d004      	beq.n	80092da <UART_SetConfig+0x7e>
 80092d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	4bc3      	ldr	r3, [pc, #780]	; (80095e4 <UART_SetConfig+0x388>)
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d103      	bne.n	80092e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092da:	f7fe fa95 	bl	8007808 <HAL_RCC_GetPCLK2Freq>
 80092de:	6778      	str	r0, [r7, #116]	; 0x74
 80092e0:	e002      	b.n	80092e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092e2:	f7fe fa7d 	bl	80077e0 <HAL_RCC_GetPCLK1Freq>
 80092e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f0:	f040 80b6 	bne.w	8009460 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092f6:	461c      	mov	r4, r3
 80092f8:	f04f 0500 	mov.w	r5, #0
 80092fc:	4622      	mov	r2, r4
 80092fe:	462b      	mov	r3, r5
 8009300:	1891      	adds	r1, r2, r2
 8009302:	6439      	str	r1, [r7, #64]	; 0x40
 8009304:	415b      	adcs	r3, r3
 8009306:	647b      	str	r3, [r7, #68]	; 0x44
 8009308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800930c:	1912      	adds	r2, r2, r4
 800930e:	eb45 0303 	adc.w	r3, r5, r3
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f04f 0100 	mov.w	r1, #0
 800931a:	00d9      	lsls	r1, r3, #3
 800931c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009320:	00d0      	lsls	r0, r2, #3
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	1911      	adds	r1, r2, r4
 8009328:	6639      	str	r1, [r7, #96]	; 0x60
 800932a:	416b      	adcs	r3, r5
 800932c:	667b      	str	r3, [r7, #100]	; 0x64
 800932e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	461a      	mov	r2, r3
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	1891      	adds	r1, r2, r2
 800933a:	63b9      	str	r1, [r7, #56]	; 0x38
 800933c:	415b      	adcs	r3, r3
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009344:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009348:	f7f7 fc9e 	bl	8000c88 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4ba5      	ldr	r3, [pc, #660]	; (80095e8 <UART_SetConfig+0x38c>)
 8009352:	fba3 2302 	umull	r2, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	011e      	lsls	r6, r3, #4
 800935a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800935c:	461c      	mov	r4, r3
 800935e:	f04f 0500 	mov.w	r5, #0
 8009362:	4622      	mov	r2, r4
 8009364:	462b      	mov	r3, r5
 8009366:	1891      	adds	r1, r2, r2
 8009368:	6339      	str	r1, [r7, #48]	; 0x30
 800936a:	415b      	adcs	r3, r3
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
 800936e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009372:	1912      	adds	r2, r2, r4
 8009374:	eb45 0303 	adc.w	r3, r5, r3
 8009378:	f04f 0000 	mov.w	r0, #0
 800937c:	f04f 0100 	mov.w	r1, #0
 8009380:	00d9      	lsls	r1, r3, #3
 8009382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009386:	00d0      	lsls	r0, r2, #3
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	1911      	adds	r1, r2, r4
 800938e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009390:	416b      	adcs	r3, r5
 8009392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	461a      	mov	r2, r3
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	1891      	adds	r1, r2, r2
 80093a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80093a2:	415b      	adcs	r3, r3
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80093ae:	f7f7 fc6b 	bl	8000c88 <__aeabi_uldivmod>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4b8c      	ldr	r3, [pc, #560]	; (80095e8 <UART_SetConfig+0x38c>)
 80093b8:	fba3 1302 	umull	r1, r3, r3, r2
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	2164      	movs	r1, #100	; 0x64
 80093c0:	fb01 f303 	mul.w	r3, r1, r3
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	3332      	adds	r3, #50	; 0x32
 80093ca:	4a87      	ldr	r2, [pc, #540]	; (80095e8 <UART_SetConfig+0x38c>)
 80093cc:	fba2 2303 	umull	r2, r3, r2, r3
 80093d0:	095b      	lsrs	r3, r3, #5
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093d8:	441e      	add	r6, r3
 80093da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093dc:	4618      	mov	r0, r3
 80093de:	f04f 0100 	mov.w	r1, #0
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	1894      	adds	r4, r2, r2
 80093e8:	623c      	str	r4, [r7, #32]
 80093ea:	415b      	adcs	r3, r3
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093f2:	1812      	adds	r2, r2, r0
 80093f4:	eb41 0303 	adc.w	r3, r1, r3
 80093f8:	f04f 0400 	mov.w	r4, #0
 80093fc:	f04f 0500 	mov.w	r5, #0
 8009400:	00dd      	lsls	r5, r3, #3
 8009402:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009406:	00d4      	lsls	r4, r2, #3
 8009408:	4622      	mov	r2, r4
 800940a:	462b      	mov	r3, r5
 800940c:	1814      	adds	r4, r2, r0
 800940e:	653c      	str	r4, [r7, #80]	; 0x50
 8009410:	414b      	adcs	r3, r1
 8009412:	657b      	str	r3, [r7, #84]	; 0x54
 8009414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	461a      	mov	r2, r3
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	1891      	adds	r1, r2, r2
 8009420:	61b9      	str	r1, [r7, #24]
 8009422:	415b      	adcs	r3, r3
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800942a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800942e:	f7f7 fc2b 	bl	8000c88 <__aeabi_uldivmod>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4b6c      	ldr	r3, [pc, #432]	; (80095e8 <UART_SetConfig+0x38c>)
 8009438:	fba3 1302 	umull	r1, r3, r3, r2
 800943c:	095b      	lsrs	r3, r3, #5
 800943e:	2164      	movs	r1, #100	; 0x64
 8009440:	fb01 f303 	mul.w	r3, r1, r3
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	3332      	adds	r3, #50	; 0x32
 800944a:	4a67      	ldr	r2, [pc, #412]	; (80095e8 <UART_SetConfig+0x38c>)
 800944c:	fba2 2303 	umull	r2, r3, r2, r3
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	f003 0207 	and.w	r2, r3, #7
 8009456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4432      	add	r2, r6
 800945c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800945e:	e0b9      	b.n	80095d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009462:	461c      	mov	r4, r3
 8009464:	f04f 0500 	mov.w	r5, #0
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	1891      	adds	r1, r2, r2
 800946e:	6139      	str	r1, [r7, #16]
 8009470:	415b      	adcs	r3, r3
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009478:	1912      	adds	r2, r2, r4
 800947a:	eb45 0303 	adc.w	r3, r5, r3
 800947e:	f04f 0000 	mov.w	r0, #0
 8009482:	f04f 0100 	mov.w	r1, #0
 8009486:	00d9      	lsls	r1, r3, #3
 8009488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800948c:	00d0      	lsls	r0, r2, #3
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	eb12 0804 	adds.w	r8, r2, r4
 8009496:	eb43 0905 	adc.w	r9, r3, r5
 800949a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	4618      	mov	r0, r3
 80094a0:	f04f 0100 	mov.w	r1, #0
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	008b      	lsls	r3, r1, #2
 80094ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094b2:	0082      	lsls	r2, r0, #2
 80094b4:	4640      	mov	r0, r8
 80094b6:	4649      	mov	r1, r9
 80094b8:	f7f7 fbe6 	bl	8000c88 <__aeabi_uldivmod>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4b49      	ldr	r3, [pc, #292]	; (80095e8 <UART_SetConfig+0x38c>)
 80094c2:	fba3 2302 	umull	r2, r3, r3, r2
 80094c6:	095b      	lsrs	r3, r3, #5
 80094c8:	011e      	lsls	r6, r3, #4
 80094ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094cc:	4618      	mov	r0, r3
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	1894      	adds	r4, r2, r2
 80094d8:	60bc      	str	r4, [r7, #8]
 80094da:	415b      	adcs	r3, r3
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094e2:	1812      	adds	r2, r2, r0
 80094e4:	eb41 0303 	adc.w	r3, r1, r3
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	f04f 0500 	mov.w	r5, #0
 80094f0:	00dd      	lsls	r5, r3, #3
 80094f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094f6:	00d4      	lsls	r4, r2, #3
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	1814      	adds	r4, r2, r0
 80094fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8009500:	414b      	adcs	r3, r1
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4618      	mov	r0, r3
 800950a:	f04f 0100 	mov.w	r1, #0
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	008b      	lsls	r3, r1, #2
 8009518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800951c:	0082      	lsls	r2, r0, #2
 800951e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009522:	f7f7 fbb1 	bl	8000c88 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4b2f      	ldr	r3, [pc, #188]	; (80095e8 <UART_SetConfig+0x38c>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	095b      	lsrs	r3, r3, #5
 8009532:	2164      	movs	r1, #100	; 0x64
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	3332      	adds	r3, #50	; 0x32
 800953e:	4a2a      	ldr	r2, [pc, #168]	; (80095e8 <UART_SetConfig+0x38c>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800954a:	441e      	add	r6, r3
 800954c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800954e:	4618      	mov	r0, r3
 8009550:	f04f 0100 	mov.w	r1, #0
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	1894      	adds	r4, r2, r2
 800955a:	603c      	str	r4, [r7, #0]
 800955c:	415b      	adcs	r3, r3
 800955e:	607b      	str	r3, [r7, #4]
 8009560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009564:	1812      	adds	r2, r2, r0
 8009566:	eb41 0303 	adc.w	r3, r1, r3
 800956a:	f04f 0400 	mov.w	r4, #0
 800956e:	f04f 0500 	mov.w	r5, #0
 8009572:	00dd      	lsls	r5, r3, #3
 8009574:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009578:	00d4      	lsls	r4, r2, #3
 800957a:	4622      	mov	r2, r4
 800957c:	462b      	mov	r3, r5
 800957e:	eb12 0a00 	adds.w	sl, r2, r0
 8009582:	eb43 0b01 	adc.w	fp, r3, r1
 8009586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	4618      	mov	r0, r3
 800958c:	f04f 0100 	mov.w	r1, #0
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	008b      	lsls	r3, r1, #2
 800959a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800959e:	0082      	lsls	r2, r0, #2
 80095a0:	4650      	mov	r0, sl
 80095a2:	4659      	mov	r1, fp
 80095a4:	f7f7 fb70 	bl	8000c88 <__aeabi_uldivmod>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4b0e      	ldr	r3, [pc, #56]	; (80095e8 <UART_SetConfig+0x38c>)
 80095ae:	fba3 1302 	umull	r1, r3, r3, r2
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	2164      	movs	r1, #100	; 0x64
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	3332      	adds	r3, #50	; 0x32
 80095c0:	4a09      	ldr	r2, [pc, #36]	; (80095e8 <UART_SetConfig+0x38c>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	f003 020f 	and.w	r2, r3, #15
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4432      	add	r2, r6
 80095d2:	609a      	str	r2, [r3, #8]
}
 80095d4:	bf00      	nop
 80095d6:	377c      	adds	r7, #124	; 0x7c
 80095d8:	46bd      	mov	sp, r7
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	bf00      	nop
 80095e0:	40011000 	.word	0x40011000
 80095e4:	40011400 	.word	0x40011400
 80095e8:	51eb851f 	.word	0x51eb851f

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	2000001c 	.word	0x2000001c

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f003 f8c6 	bl	800c79c <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	0800d7d8 	.word	0x0800d7d8
 8009634:	0800d7d8 	.word	0x0800d7d8
 8009638:	0800d7d8 	.word	0x0800d7d8
 800963c:	0800d7dc 	.word	0x0800d7dc

08009640 <memset>:
 8009640:	4402      	add	r2, r0
 8009642:	4603      	mov	r3, r0
 8009644:	4293      	cmp	r3, r2
 8009646:	d100      	bne.n	800964a <memset+0xa>
 8009648:	4770      	bx	lr
 800964a:	f803 1b01 	strb.w	r1, [r3], #1
 800964e:	e7f9      	b.n	8009644 <memset+0x4>

08009650 <__cvt>:
 8009650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009654:	ec55 4b10 	vmov	r4, r5, d0
 8009658:	2d00      	cmp	r5, #0
 800965a:	460e      	mov	r6, r1
 800965c:	4619      	mov	r1, r3
 800965e:	462b      	mov	r3, r5
 8009660:	bfbb      	ittet	lt
 8009662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009666:	461d      	movlt	r5, r3
 8009668:	2300      	movge	r3, #0
 800966a:	232d      	movlt	r3, #45	; 0x2d
 800966c:	700b      	strb	r3, [r1, #0]
 800966e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009674:	4691      	mov	r9, r2
 8009676:	f023 0820 	bic.w	r8, r3, #32
 800967a:	bfbc      	itt	lt
 800967c:	4622      	movlt	r2, r4
 800967e:	4614      	movlt	r4, r2
 8009680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009684:	d005      	beq.n	8009692 <__cvt+0x42>
 8009686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800968a:	d100      	bne.n	800968e <__cvt+0x3e>
 800968c:	3601      	adds	r6, #1
 800968e:	2102      	movs	r1, #2
 8009690:	e000      	b.n	8009694 <__cvt+0x44>
 8009692:	2103      	movs	r1, #3
 8009694:	ab03      	add	r3, sp, #12
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	ab02      	add	r3, sp, #8
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	ec45 4b10 	vmov	d0, r4, r5
 80096a0:	4653      	mov	r3, sl
 80096a2:	4632      	mov	r2, r6
 80096a4:	f000 fe00 	bl	800a2a8 <_dtoa_r>
 80096a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096ac:	4607      	mov	r7, r0
 80096ae:	d102      	bne.n	80096b6 <__cvt+0x66>
 80096b0:	f019 0f01 	tst.w	r9, #1
 80096b4:	d022      	beq.n	80096fc <__cvt+0xac>
 80096b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096ba:	eb07 0906 	add.w	r9, r7, r6
 80096be:	d110      	bne.n	80096e2 <__cvt+0x92>
 80096c0:	783b      	ldrb	r3, [r7, #0]
 80096c2:	2b30      	cmp	r3, #48	; 0x30
 80096c4:	d10a      	bne.n	80096dc <__cvt+0x8c>
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	4620      	mov	r0, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7f7 fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 80096d2:	b918      	cbnz	r0, 80096dc <__cvt+0x8c>
 80096d4:	f1c6 0601 	rsb	r6, r6, #1
 80096d8:	f8ca 6000 	str.w	r6, [sl]
 80096dc:	f8da 3000 	ldr.w	r3, [sl]
 80096e0:	4499      	add	r9, r3
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 fa0d 	bl	8000b08 <__aeabi_dcmpeq>
 80096ee:	b108      	cbz	r0, 80096f4 <__cvt+0xa4>
 80096f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80096f4:	2230      	movs	r2, #48	; 0x30
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	454b      	cmp	r3, r9
 80096fa:	d307      	bcc.n	800970c <__cvt+0xbc>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009700:	1bdb      	subs	r3, r3, r7
 8009702:	4638      	mov	r0, r7
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	b004      	add	sp, #16
 8009708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970c:	1c59      	adds	r1, r3, #1
 800970e:	9103      	str	r1, [sp, #12]
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	e7f0      	b.n	80096f6 <__cvt+0xa6>

08009714 <__exponent>:
 8009714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009716:	4603      	mov	r3, r0
 8009718:	2900      	cmp	r1, #0
 800971a:	bfb8      	it	lt
 800971c:	4249      	neglt	r1, r1
 800971e:	f803 2b02 	strb.w	r2, [r3], #2
 8009722:	bfb4      	ite	lt
 8009724:	222d      	movlt	r2, #45	; 0x2d
 8009726:	222b      	movge	r2, #43	; 0x2b
 8009728:	2909      	cmp	r1, #9
 800972a:	7042      	strb	r2, [r0, #1]
 800972c:	dd2a      	ble.n	8009784 <__exponent+0x70>
 800972e:	f10d 0407 	add.w	r4, sp, #7
 8009732:	46a4      	mov	ip, r4
 8009734:	270a      	movs	r7, #10
 8009736:	46a6      	mov	lr, r4
 8009738:	460a      	mov	r2, r1
 800973a:	fb91 f6f7 	sdiv	r6, r1, r7
 800973e:	fb07 1516 	mls	r5, r7, r6, r1
 8009742:	3530      	adds	r5, #48	; 0x30
 8009744:	2a63      	cmp	r2, #99	; 0x63
 8009746:	f104 34ff 	add.w	r4, r4, #4294967295
 800974a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800974e:	4631      	mov	r1, r6
 8009750:	dcf1      	bgt.n	8009736 <__exponent+0x22>
 8009752:	3130      	adds	r1, #48	; 0x30
 8009754:	f1ae 0502 	sub.w	r5, lr, #2
 8009758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800975c:	1c44      	adds	r4, r0, #1
 800975e:	4629      	mov	r1, r5
 8009760:	4561      	cmp	r1, ip
 8009762:	d30a      	bcc.n	800977a <__exponent+0x66>
 8009764:	f10d 0209 	add.w	r2, sp, #9
 8009768:	eba2 020e 	sub.w	r2, r2, lr
 800976c:	4565      	cmp	r5, ip
 800976e:	bf88      	it	hi
 8009770:	2200      	movhi	r2, #0
 8009772:	4413      	add	r3, r2
 8009774:	1a18      	subs	r0, r3, r0
 8009776:	b003      	add	sp, #12
 8009778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800977e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009782:	e7ed      	b.n	8009760 <__exponent+0x4c>
 8009784:	2330      	movs	r3, #48	; 0x30
 8009786:	3130      	adds	r1, #48	; 0x30
 8009788:	7083      	strb	r3, [r0, #2]
 800978a:	70c1      	strb	r1, [r0, #3]
 800978c:	1d03      	adds	r3, r0, #4
 800978e:	e7f1      	b.n	8009774 <__exponent+0x60>

08009790 <_printf_float>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	ed2d 8b02 	vpush	{d8}
 8009798:	b08d      	sub	sp, #52	; 0x34
 800979a:	460c      	mov	r4, r1
 800979c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097a0:	4616      	mov	r6, r2
 80097a2:	461f      	mov	r7, r3
 80097a4:	4605      	mov	r5, r0
 80097a6:	f001 fd23 	bl	800b1f0 <_localeconv_r>
 80097aa:	f8d0 a000 	ldr.w	sl, [r0]
 80097ae:	4650      	mov	r0, sl
 80097b0:	f7f6 fd2e 	bl	8000210 <strlen>
 80097b4:	2300      	movs	r3, #0
 80097b6:	930a      	str	r3, [sp, #40]	; 0x28
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	9305      	str	r3, [sp, #20]
 80097bc:	f8d8 3000 	ldr.w	r3, [r8]
 80097c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097c4:	3307      	adds	r3, #7
 80097c6:	f023 0307 	bic.w	r3, r3, #7
 80097ca:	f103 0208 	add.w	r2, r3, #8
 80097ce:	f8c8 2000 	str.w	r2, [r8]
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097e2:	9307      	str	r3, [sp, #28]
 80097e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80097e8:	ee08 0a10 	vmov	s16, r0
 80097ec:	4b9f      	ldr	r3, [pc, #636]	; (8009a6c <_printf_float+0x2dc>)
 80097ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	f7f7 f9b9 	bl	8000b6c <__aeabi_dcmpun>
 80097fa:	bb88      	cbnz	r0, 8009860 <_printf_float+0xd0>
 80097fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009800:	4b9a      	ldr	r3, [pc, #616]	; (8009a6c <_printf_float+0x2dc>)
 8009802:	f04f 32ff 	mov.w	r2, #4294967295
 8009806:	f7f7 f993 	bl	8000b30 <__aeabi_dcmple>
 800980a:	bb48      	cbnz	r0, 8009860 <_printf_float+0xd0>
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f982 	bl	8000b1c <__aeabi_dcmplt>
 8009818:	b110      	cbz	r0, 8009820 <_printf_float+0x90>
 800981a:	232d      	movs	r3, #45	; 0x2d
 800981c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009820:	4b93      	ldr	r3, [pc, #588]	; (8009a70 <_printf_float+0x2e0>)
 8009822:	4894      	ldr	r0, [pc, #592]	; (8009a74 <_printf_float+0x2e4>)
 8009824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009828:	bf94      	ite	ls
 800982a:	4698      	movls	r8, r3
 800982c:	4680      	movhi	r8, r0
 800982e:	2303      	movs	r3, #3
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	9b05      	ldr	r3, [sp, #20]
 8009834:	f023 0204 	bic.w	r2, r3, #4
 8009838:	6022      	str	r2, [r4, #0]
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	9700      	str	r7, [sp, #0]
 8009840:	4633      	mov	r3, r6
 8009842:	aa0b      	add	r2, sp, #44	; 0x2c
 8009844:	4621      	mov	r1, r4
 8009846:	4628      	mov	r0, r5
 8009848:	f000 f9d8 	bl	8009bfc <_printf_common>
 800984c:	3001      	adds	r0, #1
 800984e:	f040 8090 	bne.w	8009972 <_printf_float+0x1e2>
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	b00d      	add	sp, #52	; 0x34
 8009858:	ecbd 8b02 	vpop	{d8}
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	4642      	mov	r2, r8
 8009862:	464b      	mov	r3, r9
 8009864:	4640      	mov	r0, r8
 8009866:	4649      	mov	r1, r9
 8009868:	f7f7 f980 	bl	8000b6c <__aeabi_dcmpun>
 800986c:	b140      	cbz	r0, 8009880 <_printf_float+0xf0>
 800986e:	464b      	mov	r3, r9
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfbc      	itt	lt
 8009874:	232d      	movlt	r3, #45	; 0x2d
 8009876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800987a:	487f      	ldr	r0, [pc, #508]	; (8009a78 <_printf_float+0x2e8>)
 800987c:	4b7f      	ldr	r3, [pc, #508]	; (8009a7c <_printf_float+0x2ec>)
 800987e:	e7d1      	b.n	8009824 <_printf_float+0x94>
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009886:	9206      	str	r2, [sp, #24]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	d13f      	bne.n	800990c <_printf_float+0x17c>
 800988c:	2306      	movs	r3, #6
 800988e:	6063      	str	r3, [r4, #4]
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	6861      	ldr	r1, [r4, #4]
 8009894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009898:	2300      	movs	r3, #0
 800989a:	9303      	str	r3, [sp, #12]
 800989c:	ab0a      	add	r3, sp, #40	; 0x28
 800989e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098a2:	ab09      	add	r3, sp, #36	; 0x24
 80098a4:	ec49 8b10 	vmov	d0, r8, r9
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098b0:	4628      	mov	r0, r5
 80098b2:	f7ff fecd 	bl	8009650 <__cvt>
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098ba:	2b47      	cmp	r3, #71	; 0x47
 80098bc:	4680      	mov	r8, r0
 80098be:	d108      	bne.n	80098d2 <_printf_float+0x142>
 80098c0:	1cc8      	adds	r0, r1, #3
 80098c2:	db02      	blt.n	80098ca <_printf_float+0x13a>
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	4299      	cmp	r1, r3
 80098c8:	dd41      	ble.n	800994e <_printf_float+0x1be>
 80098ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80098ce:	fa5f fb8b 	uxtb.w	fp, fp
 80098d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098d6:	d820      	bhi.n	800991a <_printf_float+0x18a>
 80098d8:	3901      	subs	r1, #1
 80098da:	465a      	mov	r2, fp
 80098dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098e0:	9109      	str	r1, [sp, #36]	; 0x24
 80098e2:	f7ff ff17 	bl	8009714 <__exponent>
 80098e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e8:	1813      	adds	r3, r2, r0
 80098ea:	2a01      	cmp	r2, #1
 80098ec:	4681      	mov	r9, r0
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	dc02      	bgt.n	80098f8 <_printf_float+0x168>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	07d2      	lsls	r2, r2, #31
 80098f6:	d501      	bpl.n	80098fc <_printf_float+0x16c>
 80098f8:	3301      	adds	r3, #1
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009900:	2b00      	cmp	r3, #0
 8009902:	d09c      	beq.n	800983e <_printf_float+0xae>
 8009904:	232d      	movs	r3, #45	; 0x2d
 8009906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990a:	e798      	b.n	800983e <_printf_float+0xae>
 800990c:	9a06      	ldr	r2, [sp, #24]
 800990e:	2a47      	cmp	r2, #71	; 0x47
 8009910:	d1be      	bne.n	8009890 <_printf_float+0x100>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1bc      	bne.n	8009890 <_printf_float+0x100>
 8009916:	2301      	movs	r3, #1
 8009918:	e7b9      	b.n	800988e <_printf_float+0xfe>
 800991a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800991e:	d118      	bne.n	8009952 <_printf_float+0x1c2>
 8009920:	2900      	cmp	r1, #0
 8009922:	6863      	ldr	r3, [r4, #4]
 8009924:	dd0b      	ble.n	800993e <_printf_float+0x1ae>
 8009926:	6121      	str	r1, [r4, #16]
 8009928:	b913      	cbnz	r3, 8009930 <_printf_float+0x1a0>
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	07d0      	lsls	r0, r2, #31
 800992e:	d502      	bpl.n	8009936 <_printf_float+0x1a6>
 8009930:	3301      	adds	r3, #1
 8009932:	440b      	add	r3, r1
 8009934:	6123      	str	r3, [r4, #16]
 8009936:	65a1      	str	r1, [r4, #88]	; 0x58
 8009938:	f04f 0900 	mov.w	r9, #0
 800993c:	e7de      	b.n	80098fc <_printf_float+0x16c>
 800993e:	b913      	cbnz	r3, 8009946 <_printf_float+0x1b6>
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	07d2      	lsls	r2, r2, #31
 8009944:	d501      	bpl.n	800994a <_printf_float+0x1ba>
 8009946:	3302      	adds	r3, #2
 8009948:	e7f4      	b.n	8009934 <_printf_float+0x1a4>
 800994a:	2301      	movs	r3, #1
 800994c:	e7f2      	b.n	8009934 <_printf_float+0x1a4>
 800994e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009954:	4299      	cmp	r1, r3
 8009956:	db05      	blt.n	8009964 <_printf_float+0x1d4>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	6121      	str	r1, [r4, #16]
 800995c:	07d8      	lsls	r0, r3, #31
 800995e:	d5ea      	bpl.n	8009936 <_printf_float+0x1a6>
 8009960:	1c4b      	adds	r3, r1, #1
 8009962:	e7e7      	b.n	8009934 <_printf_float+0x1a4>
 8009964:	2900      	cmp	r1, #0
 8009966:	bfd4      	ite	le
 8009968:	f1c1 0202 	rsble	r2, r1, #2
 800996c:	2201      	movgt	r2, #1
 800996e:	4413      	add	r3, r2
 8009970:	e7e0      	b.n	8009934 <_printf_float+0x1a4>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	055a      	lsls	r2, r3, #21
 8009976:	d407      	bmi.n	8009988 <_printf_float+0x1f8>
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	4642      	mov	r2, r8
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d12c      	bne.n	80099e0 <_printf_float+0x250>
 8009986:	e764      	b.n	8009852 <_printf_float+0xc2>
 8009988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800998c:	f240 80e0 	bls.w	8009b50 <_printf_float+0x3c0>
 8009990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	f7f7 f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 800999c:	2800      	cmp	r0, #0
 800999e:	d034      	beq.n	8009a0a <_printf_float+0x27a>
 80099a0:	4a37      	ldr	r2, [pc, #220]	; (8009a80 <_printf_float+0x2f0>)
 80099a2:	2301      	movs	r3, #1
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f af51 	beq.w	8009852 <_printf_float+0xc2>
 80099b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b4:	429a      	cmp	r2, r3
 80099b6:	db02      	blt.n	80099be <_printf_float+0x22e>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	07d8      	lsls	r0, r3, #31
 80099bc:	d510      	bpl.n	80099e0 <_printf_float+0x250>
 80099be:	ee18 3a10 	vmov	r3, s16
 80099c2:	4652      	mov	r2, sl
 80099c4:	4631      	mov	r1, r6
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b8      	blx	r7
 80099ca:	3001      	adds	r0, #1
 80099cc:	f43f af41 	beq.w	8009852 <_printf_float+0xc2>
 80099d0:	f04f 0800 	mov.w	r8, #0
 80099d4:	f104 091a 	add.w	r9, r4, #26
 80099d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099da:	3b01      	subs	r3, #1
 80099dc:	4543      	cmp	r3, r8
 80099de:	dc09      	bgt.n	80099f4 <_printf_float+0x264>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	079b      	lsls	r3, r3, #30
 80099e4:	f100 8105 	bmi.w	8009bf2 <_printf_float+0x462>
 80099e8:	68e0      	ldr	r0, [r4, #12]
 80099ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ec:	4298      	cmp	r0, r3
 80099ee:	bfb8      	it	lt
 80099f0:	4618      	movlt	r0, r3
 80099f2:	e730      	b.n	8009856 <_printf_float+0xc6>
 80099f4:	2301      	movs	r3, #1
 80099f6:	464a      	mov	r2, r9
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f af27 	beq.w	8009852 <_printf_float+0xc2>
 8009a04:	f108 0801 	add.w	r8, r8, #1
 8009a08:	e7e6      	b.n	80099d8 <_printf_float+0x248>
 8009a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dc39      	bgt.n	8009a84 <_printf_float+0x2f4>
 8009a10:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <_printf_float+0x2f0>)
 8009a12:	2301      	movs	r3, #1
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f af19 	beq.w	8009852 <_printf_float+0xc2>
 8009a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a24:	4313      	orrs	r3, r2
 8009a26:	d102      	bne.n	8009a2e <_printf_float+0x29e>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	07d9      	lsls	r1, r3, #31
 8009a2c:	d5d8      	bpl.n	80099e0 <_printf_float+0x250>
 8009a2e:	ee18 3a10 	vmov	r3, s16
 8009a32:	4652      	mov	r2, sl
 8009a34:	4631      	mov	r1, r6
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f43f af09 	beq.w	8009852 <_printf_float+0xc2>
 8009a40:	f04f 0900 	mov.w	r9, #0
 8009a44:	f104 0a1a 	add.w	sl, r4, #26
 8009a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4a:	425b      	negs	r3, r3
 8009a4c:	454b      	cmp	r3, r9
 8009a4e:	dc01      	bgt.n	8009a54 <_printf_float+0x2c4>
 8009a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a52:	e792      	b.n	800997a <_printf_float+0x1ea>
 8009a54:	2301      	movs	r3, #1
 8009a56:	4652      	mov	r2, sl
 8009a58:	4631      	mov	r1, r6
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f43f aef7 	beq.w	8009852 <_printf_float+0xc2>
 8009a64:	f109 0901 	add.w	r9, r9, #1
 8009a68:	e7ee      	b.n	8009a48 <_printf_float+0x2b8>
 8009a6a:	bf00      	nop
 8009a6c:	7fefffff 	.word	0x7fefffff
 8009a70:	0800d380 	.word	0x0800d380
 8009a74:	0800d384 	.word	0x0800d384
 8009a78:	0800d38c 	.word	0x0800d38c
 8009a7c:	0800d388 	.word	0x0800d388
 8009a80:	0800d390 	.word	0x0800d390
 8009a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	bfa8      	it	ge
 8009a8c:	461a      	movge	r2, r3
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	4691      	mov	r9, r2
 8009a92:	dc37      	bgt.n	8009b04 <_printf_float+0x374>
 8009a94:	f04f 0b00 	mov.w	fp, #0
 8009a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a9c:	f104 021a 	add.w	r2, r4, #26
 8009aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	eba3 0309 	sub.w	r3, r3, r9
 8009aa8:	455b      	cmp	r3, fp
 8009aaa:	dc33      	bgt.n	8009b14 <_printf_float+0x384>
 8009aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	db3b      	blt.n	8009b2c <_printf_float+0x39c>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d438      	bmi.n	8009b2c <_printf_float+0x39c>
 8009aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009abc:	9b05      	ldr	r3, [sp, #20]
 8009abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	eba2 0901 	sub.w	r9, r2, r1
 8009ac6:	4599      	cmp	r9, r3
 8009ac8:	bfa8      	it	ge
 8009aca:	4699      	movge	r9, r3
 8009acc:	f1b9 0f00 	cmp.w	r9, #0
 8009ad0:	dc35      	bgt.n	8009b3e <_printf_float+0x3ae>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ada:	f104 0a1a 	add.w	sl, r4, #26
 8009ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	eba3 0309 	sub.w	r3, r3, r9
 8009ae8:	4543      	cmp	r3, r8
 8009aea:	f77f af79 	ble.w	80099e0 <_printf_float+0x250>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4652      	mov	r2, sl
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	f43f aeaa 	beq.w	8009852 <_printf_float+0xc2>
 8009afe:	f108 0801 	add.w	r8, r8, #1
 8009b02:	e7ec      	b.n	8009ade <_printf_float+0x34e>
 8009b04:	4613      	mov	r3, r2
 8009b06:	4631      	mov	r1, r6
 8009b08:	4642      	mov	r2, r8
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b8      	blx	r7
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d1c0      	bne.n	8009a94 <_printf_float+0x304>
 8009b12:	e69e      	b.n	8009852 <_printf_float+0xc2>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	9205      	str	r2, [sp, #20]
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f ae97 	beq.w	8009852 <_printf_float+0xc2>
 8009b24:	9a05      	ldr	r2, [sp, #20]
 8009b26:	f10b 0b01 	add.w	fp, fp, #1
 8009b2a:	e7b9      	b.n	8009aa0 <_printf_float+0x310>
 8009b2c:	ee18 3a10 	vmov	r3, s16
 8009b30:	4652      	mov	r2, sl
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1be      	bne.n	8009aba <_printf_float+0x32a>
 8009b3c:	e689      	b.n	8009852 <_printf_float+0xc2>
 8009b3e:	9a05      	ldr	r2, [sp, #20]
 8009b40:	464b      	mov	r3, r9
 8009b42:	4442      	add	r2, r8
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d1c1      	bne.n	8009ad2 <_printf_float+0x342>
 8009b4e:	e680      	b.n	8009852 <_printf_float+0xc2>
 8009b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	dc01      	bgt.n	8009b5a <_printf_float+0x3ca>
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d538      	bpl.n	8009bcc <_printf_float+0x43c>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	f43f ae74 	beq.w	8009852 <_printf_float+0xc2>
 8009b6a:	ee18 3a10 	vmov	r3, s16
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f ae6b 	beq.w	8009852 <_printf_float+0xc2>
 8009b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b80:	2200      	movs	r2, #0
 8009b82:	2300      	movs	r3, #0
 8009b84:	f7f6 ffc0 	bl	8000b08 <__aeabi_dcmpeq>
 8009b88:	b9d8      	cbnz	r0, 8009bc2 <_printf_float+0x432>
 8009b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8c:	f108 0201 	add.w	r2, r8, #1
 8009b90:	3b01      	subs	r3, #1
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d10e      	bne.n	8009bba <_printf_float+0x42a>
 8009b9c:	e659      	b.n	8009852 <_printf_float+0xc2>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b8      	blx	r7
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f43f ae52 	beq.w	8009852 <_printf_float+0xc2>
 8009bae:	f108 0801 	add.w	r8, r8, #1
 8009bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	4543      	cmp	r3, r8
 8009bb8:	dcf1      	bgt.n	8009b9e <_printf_float+0x40e>
 8009bba:	464b      	mov	r3, r9
 8009bbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bc0:	e6dc      	b.n	800997c <_printf_float+0x1ec>
 8009bc2:	f04f 0800 	mov.w	r8, #0
 8009bc6:	f104 0a1a 	add.w	sl, r4, #26
 8009bca:	e7f2      	b.n	8009bb2 <_printf_float+0x422>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	4642      	mov	r2, r8
 8009bd0:	e7df      	b.n	8009b92 <_printf_float+0x402>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	464a      	mov	r2, r9
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b8      	blx	r7
 8009bdc:	3001      	adds	r0, #1
 8009bde:	f43f ae38 	beq.w	8009852 <_printf_float+0xc2>
 8009be2:	f108 0801 	add.w	r8, r8, #1
 8009be6:	68e3      	ldr	r3, [r4, #12]
 8009be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bea:	1a5b      	subs	r3, r3, r1
 8009bec:	4543      	cmp	r3, r8
 8009bee:	dcf0      	bgt.n	8009bd2 <_printf_float+0x442>
 8009bf0:	e6fa      	b.n	80099e8 <_printf_float+0x258>
 8009bf2:	f04f 0800 	mov.w	r8, #0
 8009bf6:	f104 0919 	add.w	r9, r4, #25
 8009bfa:	e7f4      	b.n	8009be6 <_printf_float+0x456>

08009bfc <_printf_common>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	4616      	mov	r6, r2
 8009c02:	4699      	mov	r9, r3
 8009c04:	688a      	ldr	r2, [r1, #8]
 8009c06:	690b      	ldr	r3, [r1, #16]
 8009c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bfb8      	it	lt
 8009c10:	4613      	movlt	r3, r2
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c18:	4607      	mov	r7, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	b10a      	cbz	r2, 8009c22 <_printf_common+0x26>
 8009c1e:	3301      	adds	r3, #1
 8009c20:	6033      	str	r3, [r6, #0]
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	0699      	lsls	r1, r3, #26
 8009c26:	bf42      	ittt	mi
 8009c28:	6833      	ldrmi	r3, [r6, #0]
 8009c2a:	3302      	addmi	r3, #2
 8009c2c:	6033      	strmi	r3, [r6, #0]
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	f015 0506 	ands.w	r5, r5, #6
 8009c34:	d106      	bne.n	8009c44 <_printf_common+0x48>
 8009c36:	f104 0a19 	add.w	sl, r4, #25
 8009c3a:	68e3      	ldr	r3, [r4, #12]
 8009c3c:	6832      	ldr	r2, [r6, #0]
 8009c3e:	1a9b      	subs	r3, r3, r2
 8009c40:	42ab      	cmp	r3, r5
 8009c42:	dc26      	bgt.n	8009c92 <_printf_common+0x96>
 8009c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c48:	1e13      	subs	r3, r2, #0
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	bf18      	it	ne
 8009c4e:	2301      	movne	r3, #1
 8009c50:	0692      	lsls	r2, r2, #26
 8009c52:	d42b      	bmi.n	8009cac <_printf_common+0xb0>
 8009c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c58:	4649      	mov	r1, r9
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	47c0      	blx	r8
 8009c5e:	3001      	adds	r0, #1
 8009c60:	d01e      	beq.n	8009ca0 <_printf_common+0xa4>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	68e5      	ldr	r5, [r4, #12]
 8009c66:	6832      	ldr	r2, [r6, #0]
 8009c68:	f003 0306 	and.w	r3, r3, #6
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	bf08      	it	eq
 8009c70:	1aad      	subeq	r5, r5, r2
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	bf0c      	ite	eq
 8009c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c7c:	2500      	movne	r5, #0
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	bfc4      	itt	gt
 8009c82:	1a9b      	subgt	r3, r3, r2
 8009c84:	18ed      	addgt	r5, r5, r3
 8009c86:	2600      	movs	r6, #0
 8009c88:	341a      	adds	r4, #26
 8009c8a:	42b5      	cmp	r5, r6
 8009c8c:	d11a      	bne.n	8009cc4 <_printf_common+0xc8>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e008      	b.n	8009ca4 <_printf_common+0xa8>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4652      	mov	r2, sl
 8009c96:	4649      	mov	r1, r9
 8009c98:	4638      	mov	r0, r7
 8009c9a:	47c0      	blx	r8
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d103      	bne.n	8009ca8 <_printf_common+0xac>
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca8:	3501      	adds	r5, #1
 8009caa:	e7c6      	b.n	8009c3a <_printf_common+0x3e>
 8009cac:	18e1      	adds	r1, r4, r3
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	2030      	movs	r0, #48	; 0x30
 8009cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cb6:	4422      	add	r2, r4
 8009cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	e7c7      	b.n	8009c54 <_printf_common+0x58>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4649      	mov	r1, r9
 8009cca:	4638      	mov	r0, r7
 8009ccc:	47c0      	blx	r8
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d0e6      	beq.n	8009ca0 <_printf_common+0xa4>
 8009cd2:	3601      	adds	r6, #1
 8009cd4:	e7d9      	b.n	8009c8a <_printf_common+0x8e>
	...

08009cd8 <_printf_i>:
 8009cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	460c      	mov	r4, r1
 8009cde:	4691      	mov	r9, r2
 8009ce0:	7e27      	ldrb	r7, [r4, #24]
 8009ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ce4:	2f78      	cmp	r7, #120	; 0x78
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	469a      	mov	sl, r3
 8009cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cee:	d807      	bhi.n	8009d00 <_printf_i+0x28>
 8009cf0:	2f62      	cmp	r7, #98	; 0x62
 8009cf2:	d80a      	bhi.n	8009d0a <_printf_i+0x32>
 8009cf4:	2f00      	cmp	r7, #0
 8009cf6:	f000 80d8 	beq.w	8009eaa <_printf_i+0x1d2>
 8009cfa:	2f58      	cmp	r7, #88	; 0x58
 8009cfc:	f000 80a3 	beq.w	8009e46 <_printf_i+0x16e>
 8009d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d08:	e03a      	b.n	8009d80 <_printf_i+0xa8>
 8009d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d0e:	2b15      	cmp	r3, #21
 8009d10:	d8f6      	bhi.n	8009d00 <_printf_i+0x28>
 8009d12:	a001      	add	r0, pc, #4	; (adr r0, 8009d18 <_printf_i+0x40>)
 8009d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d18:	08009d71 	.word	0x08009d71
 8009d1c:	08009d85 	.word	0x08009d85
 8009d20:	08009d01 	.word	0x08009d01
 8009d24:	08009d01 	.word	0x08009d01
 8009d28:	08009d01 	.word	0x08009d01
 8009d2c:	08009d01 	.word	0x08009d01
 8009d30:	08009d85 	.word	0x08009d85
 8009d34:	08009d01 	.word	0x08009d01
 8009d38:	08009d01 	.word	0x08009d01
 8009d3c:	08009d01 	.word	0x08009d01
 8009d40:	08009d01 	.word	0x08009d01
 8009d44:	08009e91 	.word	0x08009e91
 8009d48:	08009db5 	.word	0x08009db5
 8009d4c:	08009e73 	.word	0x08009e73
 8009d50:	08009d01 	.word	0x08009d01
 8009d54:	08009d01 	.word	0x08009d01
 8009d58:	08009eb3 	.word	0x08009eb3
 8009d5c:	08009d01 	.word	0x08009d01
 8009d60:	08009db5 	.word	0x08009db5
 8009d64:	08009d01 	.word	0x08009d01
 8009d68:	08009d01 	.word	0x08009d01
 8009d6c:	08009e7b 	.word	0x08009e7b
 8009d70:	680b      	ldr	r3, [r1, #0]
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	600a      	str	r2, [r1, #0]
 8009d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d80:	2301      	movs	r3, #1
 8009d82:	e0a3      	b.n	8009ecc <_printf_i+0x1f4>
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	6808      	ldr	r0, [r1, #0]
 8009d88:	062e      	lsls	r6, r5, #24
 8009d8a:	f100 0304 	add.w	r3, r0, #4
 8009d8e:	d50a      	bpl.n	8009da6 <_printf_i+0xce>
 8009d90:	6805      	ldr	r5, [r0, #0]
 8009d92:	600b      	str	r3, [r1, #0]
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	da03      	bge.n	8009da0 <_printf_i+0xc8>
 8009d98:	232d      	movs	r3, #45	; 0x2d
 8009d9a:	426d      	negs	r5, r5
 8009d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da0:	485e      	ldr	r0, [pc, #376]	; (8009f1c <_printf_i+0x244>)
 8009da2:	230a      	movs	r3, #10
 8009da4:	e019      	b.n	8009dda <_printf_i+0x102>
 8009da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009daa:	6805      	ldr	r5, [r0, #0]
 8009dac:	600b      	str	r3, [r1, #0]
 8009dae:	bf18      	it	ne
 8009db0:	b22d      	sxthne	r5, r5
 8009db2:	e7ef      	b.n	8009d94 <_printf_i+0xbc>
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	1d18      	adds	r0, r3, #4
 8009dba:	6008      	str	r0, [r1, #0]
 8009dbc:	0628      	lsls	r0, r5, #24
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0xec>
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0xf2>
 8009dc4:	0669      	lsls	r1, r5, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0xe8>
 8009dc8:	881d      	ldrh	r5, [r3, #0]
 8009dca:	4854      	ldr	r0, [pc, #336]	; (8009f1c <_printf_i+0x244>)
 8009dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8009dce:	bf0c      	ite	eq
 8009dd0:	2308      	moveq	r3, #8
 8009dd2:	230a      	movne	r3, #10
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dda:	6866      	ldr	r6, [r4, #4]
 8009ddc:	60a6      	str	r6, [r4, #8]
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	bfa2      	ittt	ge
 8009de2:	6821      	ldrge	r1, [r4, #0]
 8009de4:	f021 0104 	bicge.w	r1, r1, #4
 8009de8:	6021      	strge	r1, [r4, #0]
 8009dea:	b90d      	cbnz	r5, 8009df0 <_printf_i+0x118>
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	d04d      	beq.n	8009e8c <_printf_i+0x1b4>
 8009df0:	4616      	mov	r6, r2
 8009df2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009df6:	fb03 5711 	mls	r7, r3, r1, r5
 8009dfa:	5dc7      	ldrb	r7, [r0, r7]
 8009dfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e00:	462f      	mov	r7, r5
 8009e02:	42bb      	cmp	r3, r7
 8009e04:	460d      	mov	r5, r1
 8009e06:	d9f4      	bls.n	8009df2 <_printf_i+0x11a>
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	d10b      	bne.n	8009e24 <_printf_i+0x14c>
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	07df      	lsls	r7, r3, #31
 8009e10:	d508      	bpl.n	8009e24 <_printf_i+0x14c>
 8009e12:	6923      	ldr	r3, [r4, #16]
 8009e14:	6861      	ldr	r1, [r4, #4]
 8009e16:	4299      	cmp	r1, r3
 8009e18:	bfde      	ittt	le
 8009e1a:	2330      	movle	r3, #48	; 0x30
 8009e1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e24:	1b92      	subs	r2, r2, r6
 8009e26:	6122      	str	r2, [r4, #16]
 8009e28:	f8cd a000 	str.w	sl, [sp]
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	aa03      	add	r2, sp, #12
 8009e30:	4621      	mov	r1, r4
 8009e32:	4640      	mov	r0, r8
 8009e34:	f7ff fee2 	bl	8009bfc <_printf_common>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d14c      	bne.n	8009ed6 <_printf_i+0x1fe>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	b004      	add	sp, #16
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	4835      	ldr	r0, [pc, #212]	; (8009f1c <_printf_i+0x244>)
 8009e48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	680e      	ldr	r6, [r1, #0]
 8009e50:	061f      	lsls	r7, r3, #24
 8009e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e56:	600e      	str	r6, [r1, #0]
 8009e58:	d514      	bpl.n	8009e84 <_printf_i+0x1ac>
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	bf44      	itt	mi
 8009e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e62:	6023      	strmi	r3, [r4, #0]
 8009e64:	b91d      	cbnz	r5, 8009e6e <_printf_i+0x196>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	f023 0320 	bic.w	r3, r3, #32
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	2310      	movs	r3, #16
 8009e70:	e7b0      	b.n	8009dd4 <_printf_i+0xfc>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	f043 0320 	orr.w	r3, r3, #32
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	2378      	movs	r3, #120	; 0x78
 8009e7c:	4828      	ldr	r0, [pc, #160]	; (8009f20 <_printf_i+0x248>)
 8009e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e82:	e7e3      	b.n	8009e4c <_printf_i+0x174>
 8009e84:	065e      	lsls	r6, r3, #25
 8009e86:	bf48      	it	mi
 8009e88:	b2ad      	uxthmi	r5, r5
 8009e8a:	e7e6      	b.n	8009e5a <_printf_i+0x182>
 8009e8c:	4616      	mov	r6, r2
 8009e8e:	e7bb      	b.n	8009e08 <_printf_i+0x130>
 8009e90:	680b      	ldr	r3, [r1, #0]
 8009e92:	6826      	ldr	r6, [r4, #0]
 8009e94:	6960      	ldr	r0, [r4, #20]
 8009e96:	1d1d      	adds	r5, r3, #4
 8009e98:	600d      	str	r5, [r1, #0]
 8009e9a:	0635      	lsls	r5, r6, #24
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	d501      	bpl.n	8009ea4 <_printf_i+0x1cc>
 8009ea0:	6018      	str	r0, [r3, #0]
 8009ea2:	e002      	b.n	8009eaa <_printf_i+0x1d2>
 8009ea4:	0671      	lsls	r1, r6, #25
 8009ea6:	d5fb      	bpl.n	8009ea0 <_printf_i+0x1c8>
 8009ea8:	8018      	strh	r0, [r3, #0]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	4616      	mov	r6, r2
 8009eb0:	e7ba      	b.n	8009e28 <_printf_i+0x150>
 8009eb2:	680b      	ldr	r3, [r1, #0]
 8009eb4:	1d1a      	adds	r2, r3, #4
 8009eb6:	600a      	str	r2, [r1, #0]
 8009eb8:	681e      	ldr	r6, [r3, #0]
 8009eba:	6862      	ldr	r2, [r4, #4]
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7f6 f9ae 	bl	8000220 <memchr>
 8009ec4:	b108      	cbz	r0, 8009eca <_printf_i+0x1f2>
 8009ec6:	1b80      	subs	r0, r0, r6
 8009ec8:	6060      	str	r0, [r4, #4]
 8009eca:	6863      	ldr	r3, [r4, #4]
 8009ecc:	6123      	str	r3, [r4, #16]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed4:	e7a8      	b.n	8009e28 <_printf_i+0x150>
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	4632      	mov	r2, r6
 8009eda:	4649      	mov	r1, r9
 8009edc:	4640      	mov	r0, r8
 8009ede:	47d0      	blx	sl
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d0ab      	beq.n	8009e3c <_printf_i+0x164>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	079b      	lsls	r3, r3, #30
 8009ee8:	d413      	bmi.n	8009f12 <_printf_i+0x23a>
 8009eea:	68e0      	ldr	r0, [r4, #12]
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	4298      	cmp	r0, r3
 8009ef0:	bfb8      	it	lt
 8009ef2:	4618      	movlt	r0, r3
 8009ef4:	e7a4      	b.n	8009e40 <_printf_i+0x168>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4632      	mov	r2, r6
 8009efa:	4649      	mov	r1, r9
 8009efc:	4640      	mov	r0, r8
 8009efe:	47d0      	blx	sl
 8009f00:	3001      	adds	r0, #1
 8009f02:	d09b      	beq.n	8009e3c <_printf_i+0x164>
 8009f04:	3501      	adds	r5, #1
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	9903      	ldr	r1, [sp, #12]
 8009f0a:	1a5b      	subs	r3, r3, r1
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dcf2      	bgt.n	8009ef6 <_printf_i+0x21e>
 8009f10:	e7eb      	b.n	8009eea <_printf_i+0x212>
 8009f12:	2500      	movs	r5, #0
 8009f14:	f104 0619 	add.w	r6, r4, #25
 8009f18:	e7f5      	b.n	8009f06 <_printf_i+0x22e>
 8009f1a:	bf00      	nop
 8009f1c:	0800d392 	.word	0x0800d392
 8009f20:	0800d3a3 	.word	0x0800d3a3

08009f24 <_puts_r>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	460e      	mov	r6, r1
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b118      	cbz	r0, 8009f34 <_puts_r+0x10>
 8009f2c:	6983      	ldr	r3, [r0, #24]
 8009f2e:	b90b      	cbnz	r3, 8009f34 <_puts_r+0x10>
 8009f30:	f001 f8c0 	bl	800b0b4 <__sinit>
 8009f34:	69ab      	ldr	r3, [r5, #24]
 8009f36:	68ac      	ldr	r4, [r5, #8]
 8009f38:	b913      	cbnz	r3, 8009f40 <_puts_r+0x1c>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f001 f8ba 	bl	800b0b4 <__sinit>
 8009f40:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <_puts_r+0xd0>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	d120      	bne.n	8009f88 <_puts_r+0x64>
 8009f46:	686c      	ldr	r4, [r5, #4]
 8009f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d405      	bmi.n	8009f5a <_puts_r+0x36>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	0598      	lsls	r0, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <_puts_r+0x36>
 8009f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f56:	f001 f950 	bl	800b1fa <__retarget_lock_acquire_recursive>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	0719      	lsls	r1, r3, #28
 8009f5e:	d51d      	bpl.n	8009f9c <_puts_r+0x78>
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	b1db      	cbz	r3, 8009f9c <_puts_r+0x78>
 8009f64:	3e01      	subs	r6, #1
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	60a3      	str	r3, [r4, #8]
 8009f70:	bb39      	cbnz	r1, 8009fc2 <_puts_r+0x9e>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da38      	bge.n	8009fe8 <_puts_r+0xc4>
 8009f76:	4622      	mov	r2, r4
 8009f78:	210a      	movs	r1, #10
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f848 	bl	800a010 <__swbuf_r>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d011      	beq.n	8009fa8 <_puts_r+0x84>
 8009f84:	250a      	movs	r5, #10
 8009f86:	e011      	b.n	8009fac <_puts_r+0x88>
 8009f88:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <_puts_r+0xd4>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d101      	bne.n	8009f92 <_puts_r+0x6e>
 8009f8e:	68ac      	ldr	r4, [r5, #8]
 8009f90:	e7da      	b.n	8009f48 <_puts_r+0x24>
 8009f92:	4b1a      	ldr	r3, [pc, #104]	; (8009ffc <_puts_r+0xd8>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	bf08      	it	eq
 8009f98:	68ec      	ldreq	r4, [r5, #12]
 8009f9a:	e7d5      	b.n	8009f48 <_puts_r+0x24>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f888 	bl	800a0b4 <__swsetup_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d0dd      	beq.n	8009f64 <_puts_r+0x40>
 8009fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d405      	bmi.n	8009fbe <_puts_r+0x9a>
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	059b      	lsls	r3, r3, #22
 8009fb6:	d402      	bmi.n	8009fbe <_puts_r+0x9a>
 8009fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fba:	f001 f91f 	bl	800b1fc <__retarget_lock_release_recursive>
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da04      	bge.n	8009fd0 <_puts_r+0xac>
 8009fc6:	69a2      	ldr	r2, [r4, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	dc06      	bgt.n	8009fda <_puts_r+0xb6>
 8009fcc:	290a      	cmp	r1, #10
 8009fce:	d004      	beq.n	8009fda <_puts_r+0xb6>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	6022      	str	r2, [r4, #0]
 8009fd6:	7019      	strb	r1, [r3, #0]
 8009fd8:	e7c5      	b.n	8009f66 <_puts_r+0x42>
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 f817 	bl	800a010 <__swbuf_r>
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d1bf      	bne.n	8009f66 <_puts_r+0x42>
 8009fe6:	e7df      	b.n	8009fa8 <_puts_r+0x84>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	250a      	movs	r5, #10
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	6022      	str	r2, [r4, #0]
 8009ff0:	701d      	strb	r5, [r3, #0]
 8009ff2:	e7db      	b.n	8009fac <_puts_r+0x88>
 8009ff4:	0800d468 	.word	0x0800d468
 8009ff8:	0800d488 	.word	0x0800d488
 8009ffc:	0800d448 	.word	0x0800d448

0800a000 <puts>:
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <puts+0xc>)
 800a002:	4601      	mov	r1, r0
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	f7ff bf8d 	b.w	8009f24 <_puts_r>
 800a00a:	bf00      	nop
 800a00c:	2000001c 	.word	0x2000001c

0800a010 <__swbuf_r>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	460e      	mov	r6, r1
 800a014:	4614      	mov	r4, r2
 800a016:	4605      	mov	r5, r0
 800a018:	b118      	cbz	r0, 800a022 <__swbuf_r+0x12>
 800a01a:	6983      	ldr	r3, [r0, #24]
 800a01c:	b90b      	cbnz	r3, 800a022 <__swbuf_r+0x12>
 800a01e:	f001 f849 	bl	800b0b4 <__sinit>
 800a022:	4b21      	ldr	r3, [pc, #132]	; (800a0a8 <__swbuf_r+0x98>)
 800a024:	429c      	cmp	r4, r3
 800a026:	d12b      	bne.n	800a080 <__swbuf_r+0x70>
 800a028:	686c      	ldr	r4, [r5, #4]
 800a02a:	69a3      	ldr	r3, [r4, #24]
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	071a      	lsls	r2, r3, #28
 800a032:	d52f      	bpl.n	800a094 <__swbuf_r+0x84>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	b36b      	cbz	r3, 800a094 <__swbuf_r+0x84>
 800a038:	6923      	ldr	r3, [r4, #16]
 800a03a:	6820      	ldr	r0, [r4, #0]
 800a03c:	1ac0      	subs	r0, r0, r3
 800a03e:	6963      	ldr	r3, [r4, #20]
 800a040:	b2f6      	uxtb	r6, r6
 800a042:	4283      	cmp	r3, r0
 800a044:	4637      	mov	r7, r6
 800a046:	dc04      	bgt.n	800a052 <__swbuf_r+0x42>
 800a048:	4621      	mov	r1, r4
 800a04a:	4628      	mov	r0, r5
 800a04c:	f000 ff9e 	bl	800af8c <_fflush_r>
 800a050:	bb30      	cbnz	r0, 800a0a0 <__swbuf_r+0x90>
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	6022      	str	r2, [r4, #0]
 800a05e:	701e      	strb	r6, [r3, #0]
 800a060:	6963      	ldr	r3, [r4, #20]
 800a062:	3001      	adds	r0, #1
 800a064:	4283      	cmp	r3, r0
 800a066:	d004      	beq.n	800a072 <__swbuf_r+0x62>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	07db      	lsls	r3, r3, #31
 800a06c:	d506      	bpl.n	800a07c <__swbuf_r+0x6c>
 800a06e:	2e0a      	cmp	r6, #10
 800a070:	d104      	bne.n	800a07c <__swbuf_r+0x6c>
 800a072:	4621      	mov	r1, r4
 800a074:	4628      	mov	r0, r5
 800a076:	f000 ff89 	bl	800af8c <_fflush_r>
 800a07a:	b988      	cbnz	r0, 800a0a0 <__swbuf_r+0x90>
 800a07c:	4638      	mov	r0, r7
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <__swbuf_r+0x9c>)
 800a082:	429c      	cmp	r4, r3
 800a084:	d101      	bne.n	800a08a <__swbuf_r+0x7a>
 800a086:	68ac      	ldr	r4, [r5, #8]
 800a088:	e7cf      	b.n	800a02a <__swbuf_r+0x1a>
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <__swbuf_r+0xa0>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	bf08      	it	eq
 800a090:	68ec      	ldreq	r4, [r5, #12]
 800a092:	e7ca      	b.n	800a02a <__swbuf_r+0x1a>
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	f000 f80c 	bl	800a0b4 <__swsetup_r>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d0cb      	beq.n	800a038 <__swbuf_r+0x28>
 800a0a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0a4:	e7ea      	b.n	800a07c <__swbuf_r+0x6c>
 800a0a6:	bf00      	nop
 800a0a8:	0800d468 	.word	0x0800d468
 800a0ac:	0800d488 	.word	0x0800d488
 800a0b0:	0800d448 	.word	0x0800d448

0800a0b4 <__swsetup_r>:
 800a0b4:	4b32      	ldr	r3, [pc, #200]	; (800a180 <__swsetup_r+0xcc>)
 800a0b6:	b570      	push	{r4, r5, r6, lr}
 800a0b8:	681d      	ldr	r5, [r3, #0]
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	b125      	cbz	r5, 800a0ca <__swsetup_r+0x16>
 800a0c0:	69ab      	ldr	r3, [r5, #24]
 800a0c2:	b913      	cbnz	r3, 800a0ca <__swsetup_r+0x16>
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 fff5 	bl	800b0b4 <__sinit>
 800a0ca:	4b2e      	ldr	r3, [pc, #184]	; (800a184 <__swsetup_r+0xd0>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	d10f      	bne.n	800a0f0 <__swsetup_r+0x3c>
 800a0d0:	686c      	ldr	r4, [r5, #4]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0d8:	0719      	lsls	r1, r3, #28
 800a0da:	d42c      	bmi.n	800a136 <__swsetup_r+0x82>
 800a0dc:	06dd      	lsls	r5, r3, #27
 800a0de:	d411      	bmi.n	800a104 <__swsetup_r+0x50>
 800a0e0:	2309      	movs	r3, #9
 800a0e2:	6033      	str	r3, [r6, #0]
 800a0e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	e03e      	b.n	800a16e <__swsetup_r+0xba>
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <__swsetup_r+0xd4>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <__swsetup_r+0x46>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7eb      	b.n	800a0d2 <__swsetup_r+0x1e>
 800a0fa:	4b24      	ldr	r3, [pc, #144]	; (800a18c <__swsetup_r+0xd8>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	bf08      	it	eq
 800a100:	68ec      	ldreq	r4, [r5, #12]
 800a102:	e7e6      	b.n	800a0d2 <__swsetup_r+0x1e>
 800a104:	0758      	lsls	r0, r3, #29
 800a106:	d512      	bpl.n	800a12e <__swsetup_r+0x7a>
 800a108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a10a:	b141      	cbz	r1, 800a11e <__swsetup_r+0x6a>
 800a10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a110:	4299      	cmp	r1, r3
 800a112:	d002      	beq.n	800a11a <__swsetup_r+0x66>
 800a114:	4630      	mov	r0, r6
 800a116:	f001 fc7b 	bl	800ba10 <_free_r>
 800a11a:	2300      	movs	r3, #0
 800a11c:	6363      	str	r3, [r4, #52]	; 0x34
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	2300      	movs	r3, #0
 800a128:	6063      	str	r3, [r4, #4]
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f043 0308 	orr.w	r3, r3, #8
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	b94b      	cbnz	r3, 800a14e <__swsetup_r+0x9a>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a144:	d003      	beq.n	800a14e <__swsetup_r+0x9a>
 800a146:	4621      	mov	r1, r4
 800a148:	4630      	mov	r0, r6
 800a14a:	f001 f87d 	bl	800b248 <__smakebuf_r>
 800a14e:	89a0      	ldrh	r0, [r4, #12]
 800a150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a154:	f010 0301 	ands.w	r3, r0, #1
 800a158:	d00a      	beq.n	800a170 <__swsetup_r+0xbc>
 800a15a:	2300      	movs	r3, #0
 800a15c:	60a3      	str	r3, [r4, #8]
 800a15e:	6963      	ldr	r3, [r4, #20]
 800a160:	425b      	negs	r3, r3
 800a162:	61a3      	str	r3, [r4, #24]
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	b943      	cbnz	r3, 800a17a <__swsetup_r+0xc6>
 800a168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a16c:	d1ba      	bne.n	800a0e4 <__swsetup_r+0x30>
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	0781      	lsls	r1, r0, #30
 800a172:	bf58      	it	pl
 800a174:	6963      	ldrpl	r3, [r4, #20]
 800a176:	60a3      	str	r3, [r4, #8]
 800a178:	e7f4      	b.n	800a164 <__swsetup_r+0xb0>
 800a17a:	2000      	movs	r0, #0
 800a17c:	e7f7      	b.n	800a16e <__swsetup_r+0xba>
 800a17e:	bf00      	nop
 800a180:	2000001c 	.word	0x2000001c
 800a184:	0800d468 	.word	0x0800d468
 800a188:	0800d488 	.word	0x0800d488
 800a18c:	0800d448 	.word	0x0800d448

0800a190 <quorem>:
 800a190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	6903      	ldr	r3, [r0, #16]
 800a196:	690c      	ldr	r4, [r1, #16]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	4607      	mov	r7, r0
 800a19c:	f2c0 8081 	blt.w	800a2a2 <quorem+0x112>
 800a1a0:	3c01      	subs	r4, #1
 800a1a2:	f101 0814 	add.w	r8, r1, #20
 800a1a6:	f100 0514 	add.w	r5, r0, #20
 800a1aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1c8:	d331      	bcc.n	800a22e <quorem+0x9e>
 800a1ca:	f04f 0e00 	mov.w	lr, #0
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	46ac      	mov	ip, r5
 800a1d2:	46f2      	mov	sl, lr
 800a1d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1d8:	b293      	uxth	r3, r2
 800a1da:	fb06 e303 	mla	r3, r6, r3, lr
 800a1de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a1e8:	0c12      	lsrs	r2, r2, #16
 800a1ea:	f8dc a000 	ldr.w	sl, [ip]
 800a1ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a1f2:	fa13 f38a 	uxtah	r3, r3, sl
 800a1f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1fa:	fa1f fa82 	uxth.w	sl, r2
 800a1fe:	f8dc 2000 	ldr.w	r2, [ip]
 800a202:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a210:	4581      	cmp	r9, r0
 800a212:	f84c 3b04 	str.w	r3, [ip], #4
 800a216:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a21a:	d2db      	bcs.n	800a1d4 <quorem+0x44>
 800a21c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a220:	b92b      	cbnz	r3, 800a22e <quorem+0x9e>
 800a222:	9b01      	ldr	r3, [sp, #4]
 800a224:	3b04      	subs	r3, #4
 800a226:	429d      	cmp	r5, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	d32e      	bcc.n	800a28a <quorem+0xfa>
 800a22c:	613c      	str	r4, [r7, #16]
 800a22e:	4638      	mov	r0, r7
 800a230:	f001 fade 	bl	800b7f0 <__mcmp>
 800a234:	2800      	cmp	r0, #0
 800a236:	db24      	blt.n	800a282 <quorem+0xf2>
 800a238:	3601      	adds	r6, #1
 800a23a:	4628      	mov	r0, r5
 800a23c:	f04f 0c00 	mov.w	ip, #0
 800a240:	f858 2b04 	ldr.w	r2, [r8], #4
 800a244:	f8d0 e000 	ldr.w	lr, [r0]
 800a248:	b293      	uxth	r3, r2
 800a24a:	ebac 0303 	sub.w	r3, ip, r3
 800a24e:	0c12      	lsrs	r2, r2, #16
 800a250:	fa13 f38e 	uxtah	r3, r3, lr
 800a254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a262:	45c1      	cmp	r9, r8
 800a264:	f840 3b04 	str.w	r3, [r0], #4
 800a268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a26c:	d2e8      	bcs.n	800a240 <quorem+0xb0>
 800a26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a276:	b922      	cbnz	r2, 800a282 <quorem+0xf2>
 800a278:	3b04      	subs	r3, #4
 800a27a:	429d      	cmp	r5, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	d30a      	bcc.n	800a296 <quorem+0x106>
 800a280:	613c      	str	r4, [r7, #16]
 800a282:	4630      	mov	r0, r6
 800a284:	b003      	add	sp, #12
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	3b04      	subs	r3, #4
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d1cc      	bne.n	800a22c <quorem+0x9c>
 800a292:	3c01      	subs	r4, #1
 800a294:	e7c7      	b.n	800a226 <quorem+0x96>
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	3b04      	subs	r3, #4
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d1f0      	bne.n	800a280 <quorem+0xf0>
 800a29e:	3c01      	subs	r4, #1
 800a2a0:	e7eb      	b.n	800a27a <quorem+0xea>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e7ee      	b.n	800a284 <quorem+0xf4>
	...

0800a2a8 <_dtoa_r>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	ed2d 8b02 	vpush	{d8}
 800a2b0:	ec57 6b10 	vmov	r6, r7, d0
 800a2b4:	b095      	sub	sp, #84	; 0x54
 800a2b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2bc:	9105      	str	r1, [sp, #20]
 800a2be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c8:	b975      	cbnz	r5, 800a2e8 <_dtoa_r+0x40>
 800a2ca:	2010      	movs	r0, #16
 800a2cc:	f000 fffc 	bl	800b2c8 <malloc>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6260      	str	r0, [r4, #36]	; 0x24
 800a2d4:	b920      	cbnz	r0, 800a2e0 <_dtoa_r+0x38>
 800a2d6:	4bb2      	ldr	r3, [pc, #712]	; (800a5a0 <_dtoa_r+0x2f8>)
 800a2d8:	21ea      	movs	r1, #234	; 0xea
 800a2da:	48b2      	ldr	r0, [pc, #712]	; (800a5a4 <_dtoa_r+0x2fc>)
 800a2dc:	f001 fca8 	bl	800bc30 <__assert_func>
 800a2e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2e4:	6005      	str	r5, [r0, #0]
 800a2e6:	60c5      	str	r5, [r0, #12]
 800a2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ea:	6819      	ldr	r1, [r3, #0]
 800a2ec:	b151      	cbz	r1, 800a304 <_dtoa_r+0x5c>
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	604a      	str	r2, [r1, #4]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4093      	lsls	r3, r2
 800a2f6:	608b      	str	r3, [r1, #8]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 f83b 	bl	800b374 <_Bfree>
 800a2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	1e3b      	subs	r3, r7, #0
 800a306:	bfb9      	ittee	lt
 800a308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a30c:	9303      	strlt	r3, [sp, #12]
 800a30e:	2300      	movge	r3, #0
 800a310:	f8c8 3000 	strge.w	r3, [r8]
 800a314:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a318:	4ba3      	ldr	r3, [pc, #652]	; (800a5a8 <_dtoa_r+0x300>)
 800a31a:	bfbc      	itt	lt
 800a31c:	2201      	movlt	r2, #1
 800a31e:	f8c8 2000 	strlt.w	r2, [r8]
 800a322:	ea33 0309 	bics.w	r3, r3, r9
 800a326:	d11b      	bne.n	800a360 <_dtoa_r+0xb8>
 800a328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a32a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a334:	4333      	orrs	r3, r6
 800a336:	f000 857a 	beq.w	800ae2e <_dtoa_r+0xb86>
 800a33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a33c:	b963      	cbnz	r3, 800a358 <_dtoa_r+0xb0>
 800a33e:	4b9b      	ldr	r3, [pc, #620]	; (800a5ac <_dtoa_r+0x304>)
 800a340:	e024      	b.n	800a38c <_dtoa_r+0xe4>
 800a342:	4b9b      	ldr	r3, [pc, #620]	; (800a5b0 <_dtoa_r+0x308>)
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	9800      	ldr	r0, [sp, #0]
 800a34e:	b015      	add	sp, #84	; 0x54
 800a350:	ecbd 8b02 	vpop	{d8}
 800a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a358:	4b94      	ldr	r3, [pc, #592]	; (800a5ac <_dtoa_r+0x304>)
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	3303      	adds	r3, #3
 800a35e:	e7f3      	b.n	800a348 <_dtoa_r+0xa0>
 800a360:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	ec51 0b17 	vmov	r0, r1, d7
 800a36a:	2300      	movs	r3, #0
 800a36c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a370:	f7f6 fbca 	bl	8000b08 <__aeabi_dcmpeq>
 800a374:	4680      	mov	r8, r0
 800a376:	b158      	cbz	r0, 800a390 <_dtoa_r+0xe8>
 800a378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a37a:	2301      	movs	r3, #1
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 8551 	beq.w	800ae28 <_dtoa_r+0xb80>
 800a386:	488b      	ldr	r0, [pc, #556]	; (800a5b4 <_dtoa_r+0x30c>)
 800a388:	6018      	str	r0, [r3, #0]
 800a38a:	1e43      	subs	r3, r0, #1
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	e7dd      	b.n	800a34c <_dtoa_r+0xa4>
 800a390:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a394:	aa12      	add	r2, sp, #72	; 0x48
 800a396:	a913      	add	r1, sp, #76	; 0x4c
 800a398:	4620      	mov	r0, r4
 800a39a:	f001 facd 	bl	800b938 <__d2b>
 800a39e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3a2:	4683      	mov	fp, r0
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	d07c      	beq.n	800a4a2 <_dtoa_r+0x1fa>
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3c2:	4b7d      	ldr	r3, [pc, #500]	; (800a5b8 <_dtoa_r+0x310>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff7d 	bl	80002c8 <__aeabi_dsub>
 800a3ce:	a36e      	add	r3, pc, #440	; (adr r3, 800a588 <_dtoa_r+0x2e0>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 f930 	bl	8000638 <__aeabi_dmul>
 800a3d8:	a36d      	add	r3, pc, #436	; (adr r3, 800a590 <_dtoa_r+0x2e8>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f5 ff75 	bl	80002cc <__adddf3>
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	f7f6 f8bc 	bl	8000564 <__aeabi_i2d>
 800a3ec:	a36a      	add	r3, pc, #424	; (adr r3, 800a598 <_dtoa_r+0x2f0>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f7f6 f921 	bl	8000638 <__aeabi_dmul>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	f7f5 ff65 	bl	80002cc <__adddf3>
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	f7f6 fbc7 	bl	8000b98 <__aeabi_d2iz>
 800a40a:	2200      	movs	r2, #0
 800a40c:	4682      	mov	sl, r0
 800a40e:	2300      	movs	r3, #0
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f6 fb82 	bl	8000b1c <__aeabi_dcmplt>
 800a418:	b148      	cbz	r0, 800a42e <_dtoa_r+0x186>
 800a41a:	4650      	mov	r0, sl
 800a41c:	f7f6 f8a2 	bl	8000564 <__aeabi_i2d>
 800a420:	4632      	mov	r2, r6
 800a422:	463b      	mov	r3, r7
 800a424:	f7f6 fb70 	bl	8000b08 <__aeabi_dcmpeq>
 800a428:	b908      	cbnz	r0, 800a42e <_dtoa_r+0x186>
 800a42a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a42e:	f1ba 0f16 	cmp.w	sl, #22
 800a432:	d854      	bhi.n	800a4de <_dtoa_r+0x236>
 800a434:	4b61      	ldr	r3, [pc, #388]	; (800a5bc <_dtoa_r+0x314>)
 800a436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a442:	f7f6 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d04b      	beq.n	800a4e2 <_dtoa_r+0x23a>
 800a44a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a44e:	2300      	movs	r3, #0
 800a450:	930e      	str	r3, [sp, #56]	; 0x38
 800a452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a454:	1b5d      	subs	r5, r3, r5
 800a456:	1e6b      	subs	r3, r5, #1
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	bf43      	ittte	mi
 800a45c:	2300      	movmi	r3, #0
 800a45e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a462:	9304      	strmi	r3, [sp, #16]
 800a464:	f04f 0800 	movpl.w	r8, #0
 800a468:	f1ba 0f00 	cmp.w	sl, #0
 800a46c:	db3b      	blt.n	800a4e6 <_dtoa_r+0x23e>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a474:	4453      	add	r3, sl
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	2300      	movs	r3, #0
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	9b05      	ldr	r3, [sp, #20]
 800a47e:	2b09      	cmp	r3, #9
 800a480:	d869      	bhi.n	800a556 <_dtoa_r+0x2ae>
 800a482:	2b05      	cmp	r3, #5
 800a484:	bfc4      	itt	gt
 800a486:	3b04      	subgt	r3, #4
 800a488:	9305      	strgt	r3, [sp, #20]
 800a48a:	9b05      	ldr	r3, [sp, #20]
 800a48c:	f1a3 0302 	sub.w	r3, r3, #2
 800a490:	bfcc      	ite	gt
 800a492:	2500      	movgt	r5, #0
 800a494:	2501      	movle	r5, #1
 800a496:	2b03      	cmp	r3, #3
 800a498:	d869      	bhi.n	800a56e <_dtoa_r+0x2c6>
 800a49a:	e8df f003 	tbb	[pc, r3]
 800a49e:	4e2c      	.short	0x4e2c
 800a4a0:	5a4c      	.short	0x5a4c
 800a4a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4a6:	441d      	add	r5, r3
 800a4a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	bfc1      	itttt	gt
 800a4b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4b8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4c0:	bfda      	itte	le
 800a4c2:	f1c3 0320 	rsble	r3, r3, #32
 800a4c6:	fa06 f003 	lslle.w	r0, r6, r3
 800a4ca:	4318      	orrgt	r0, r3
 800a4cc:	f7f6 f83a 	bl	8000544 <__aeabi_ui2d>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4d8:	3d01      	subs	r5, #1
 800a4da:	9310      	str	r3, [sp, #64]	; 0x40
 800a4dc:	e771      	b.n	800a3c2 <_dtoa_r+0x11a>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e7b6      	b.n	800a450 <_dtoa_r+0x1a8>
 800a4e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a4e4:	e7b5      	b.n	800a452 <_dtoa_r+0x1aa>
 800a4e6:	f1ca 0300 	rsb	r3, sl, #0
 800a4ea:	9306      	str	r3, [sp, #24]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	eba8 080a 	sub.w	r8, r8, sl
 800a4f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4f4:	e7c2      	b.n	800a47c <_dtoa_r+0x1d4>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	9308      	str	r3, [sp, #32]
 800a4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dc39      	bgt.n	800a574 <_dtoa_r+0x2cc>
 800a500:	f04f 0901 	mov.w	r9, #1
 800a504:	f8cd 9004 	str.w	r9, [sp, #4]
 800a508:	464b      	mov	r3, r9
 800a50a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a50e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a510:	2200      	movs	r2, #0
 800a512:	6042      	str	r2, [r0, #4]
 800a514:	2204      	movs	r2, #4
 800a516:	f102 0614 	add.w	r6, r2, #20
 800a51a:	429e      	cmp	r6, r3
 800a51c:	6841      	ldr	r1, [r0, #4]
 800a51e:	d92f      	bls.n	800a580 <_dtoa_r+0x2d8>
 800a520:	4620      	mov	r0, r4
 800a522:	f000 fee7 	bl	800b2f4 <_Balloc>
 800a526:	9000      	str	r0, [sp, #0]
 800a528:	2800      	cmp	r0, #0
 800a52a:	d14b      	bne.n	800a5c4 <_dtoa_r+0x31c>
 800a52c:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <_dtoa_r+0x318>)
 800a52e:	4602      	mov	r2, r0
 800a530:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a534:	e6d1      	b.n	800a2da <_dtoa_r+0x32>
 800a536:	2301      	movs	r3, #1
 800a538:	e7de      	b.n	800a4f8 <_dtoa_r+0x250>
 800a53a:	2300      	movs	r3, #0
 800a53c:	9308      	str	r3, [sp, #32]
 800a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a540:	eb0a 0903 	add.w	r9, sl, r3
 800a544:	f109 0301 	add.w	r3, r9, #1
 800a548:	2b01      	cmp	r3, #1
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	bfb8      	it	lt
 800a54e:	2301      	movlt	r3, #1
 800a550:	e7dd      	b.n	800a50e <_dtoa_r+0x266>
 800a552:	2301      	movs	r3, #1
 800a554:	e7f2      	b.n	800a53c <_dtoa_r+0x294>
 800a556:	2501      	movs	r5, #1
 800a558:	2300      	movs	r3, #0
 800a55a:	9305      	str	r3, [sp, #20]
 800a55c:	9508      	str	r5, [sp, #32]
 800a55e:	f04f 39ff 	mov.w	r9, #4294967295
 800a562:	2200      	movs	r2, #0
 800a564:	f8cd 9004 	str.w	r9, [sp, #4]
 800a568:	2312      	movs	r3, #18
 800a56a:	9209      	str	r2, [sp, #36]	; 0x24
 800a56c:	e7cf      	b.n	800a50e <_dtoa_r+0x266>
 800a56e:	2301      	movs	r3, #1
 800a570:	9308      	str	r3, [sp, #32]
 800a572:	e7f4      	b.n	800a55e <_dtoa_r+0x2b6>
 800a574:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a578:	f8cd 9004 	str.w	r9, [sp, #4]
 800a57c:	464b      	mov	r3, r9
 800a57e:	e7c6      	b.n	800a50e <_dtoa_r+0x266>
 800a580:	3101      	adds	r1, #1
 800a582:	6041      	str	r1, [r0, #4]
 800a584:	0052      	lsls	r2, r2, #1
 800a586:	e7c6      	b.n	800a516 <_dtoa_r+0x26e>
 800a588:	636f4361 	.word	0x636f4361
 800a58c:	3fd287a7 	.word	0x3fd287a7
 800a590:	8b60c8b3 	.word	0x8b60c8b3
 800a594:	3fc68a28 	.word	0x3fc68a28
 800a598:	509f79fb 	.word	0x509f79fb
 800a59c:	3fd34413 	.word	0x3fd34413
 800a5a0:	0800d3c1 	.word	0x0800d3c1
 800a5a4:	0800d3d8 	.word	0x0800d3d8
 800a5a8:	7ff00000 	.word	0x7ff00000
 800a5ac:	0800d3bd 	.word	0x0800d3bd
 800a5b0:	0800d3b4 	.word	0x0800d3b4
 800a5b4:	0800d391 	.word	0x0800d391
 800a5b8:	3ff80000 	.word	0x3ff80000
 800a5bc:	0800d530 	.word	0x0800d530
 800a5c0:	0800d437 	.word	0x0800d437
 800a5c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5c6:	9a00      	ldr	r2, [sp, #0]
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	2b0e      	cmp	r3, #14
 800a5ce:	f200 80ad 	bhi.w	800a72c <_dtoa_r+0x484>
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	f000 80aa 	beq.w	800a72c <_dtoa_r+0x484>
 800a5d8:	f1ba 0f00 	cmp.w	sl, #0
 800a5dc:	dd36      	ble.n	800a64c <_dtoa_r+0x3a4>
 800a5de:	4ac3      	ldr	r2, [pc, #780]	; (800a8ec <_dtoa_r+0x644>)
 800a5e0:	f00a 030f 	and.w	r3, sl, #15
 800a5e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5e8:	ed93 7b00 	vldr	d7, [r3]
 800a5ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5f4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5f8:	eef0 8a67 	vmov.f32	s17, s15
 800a5fc:	d016      	beq.n	800a62c <_dtoa_r+0x384>
 800a5fe:	4bbc      	ldr	r3, [pc, #752]	; (800a8f0 <_dtoa_r+0x648>)
 800a600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a608:	f7f6 f940 	bl	800088c <__aeabi_ddiv>
 800a60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a610:	f007 070f 	and.w	r7, r7, #15
 800a614:	2503      	movs	r5, #3
 800a616:	4eb6      	ldr	r6, [pc, #728]	; (800a8f0 <_dtoa_r+0x648>)
 800a618:	b957      	cbnz	r7, 800a630 <_dtoa_r+0x388>
 800a61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61e:	ec53 2b18 	vmov	r2, r3, d8
 800a622:	f7f6 f933 	bl	800088c <__aeabi_ddiv>
 800a626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62a:	e029      	b.n	800a680 <_dtoa_r+0x3d8>
 800a62c:	2502      	movs	r5, #2
 800a62e:	e7f2      	b.n	800a616 <_dtoa_r+0x36e>
 800a630:	07f9      	lsls	r1, r7, #31
 800a632:	d508      	bpl.n	800a646 <_dtoa_r+0x39e>
 800a634:	ec51 0b18 	vmov	r0, r1, d8
 800a638:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a63c:	f7f5 fffc 	bl	8000638 <__aeabi_dmul>
 800a640:	ec41 0b18 	vmov	d8, r0, r1
 800a644:	3501      	adds	r5, #1
 800a646:	107f      	asrs	r7, r7, #1
 800a648:	3608      	adds	r6, #8
 800a64a:	e7e5      	b.n	800a618 <_dtoa_r+0x370>
 800a64c:	f000 80a6 	beq.w	800a79c <_dtoa_r+0x4f4>
 800a650:	f1ca 0600 	rsb	r6, sl, #0
 800a654:	4ba5      	ldr	r3, [pc, #660]	; (800a8ec <_dtoa_r+0x644>)
 800a656:	4fa6      	ldr	r7, [pc, #664]	; (800a8f0 <_dtoa_r+0x648>)
 800a658:	f006 020f 	and.w	r2, r6, #15
 800a65c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a668:	f7f5 ffe6 	bl	8000638 <__aeabi_dmul>
 800a66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a670:	1136      	asrs	r6, r6, #4
 800a672:	2300      	movs	r3, #0
 800a674:	2502      	movs	r5, #2
 800a676:	2e00      	cmp	r6, #0
 800a678:	f040 8085 	bne.w	800a786 <_dtoa_r+0x4de>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1d2      	bne.n	800a626 <_dtoa_r+0x37e>
 800a680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 808c 	beq.w	800a7a0 <_dtoa_r+0x4f8>
 800a688:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a68c:	4b99      	ldr	r3, [pc, #612]	; (800a8f4 <_dtoa_r+0x64c>)
 800a68e:	2200      	movs	r2, #0
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f6 fa42 	bl	8000b1c <__aeabi_dcmplt>
 800a698:	2800      	cmp	r0, #0
 800a69a:	f000 8081 	beq.w	800a7a0 <_dtoa_r+0x4f8>
 800a69e:	9b01      	ldr	r3, [sp, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d07d      	beq.n	800a7a0 <_dtoa_r+0x4f8>
 800a6a4:	f1b9 0f00 	cmp.w	r9, #0
 800a6a8:	dd3c      	ble.n	800a724 <_dtoa_r+0x47c>
 800a6aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a6ae:	9307      	str	r3, [sp, #28]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4b91      	ldr	r3, [pc, #580]	; (800a8f8 <_dtoa_r+0x650>)
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f5 ffbe 	bl	8000638 <__aeabi_dmul>
 800a6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c0:	3501      	adds	r5, #1
 800a6c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7f5 ff4a 	bl	8000564 <__aeabi_i2d>
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	f7f5 ffb0 	bl	8000638 <__aeabi_dmul>
 800a6d8:	4b88      	ldr	r3, [pc, #544]	; (800a8fc <_dtoa_r+0x654>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f5 fdf6 	bl	80002cc <__adddf3>
 800a6e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d15c      	bne.n	800a7aa <_dtoa_r+0x502>
 800a6f0:	4b83      	ldr	r3, [pc, #524]	; (800a900 <_dtoa_r+0x658>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	f7f5 fde6 	bl	80002c8 <__aeabi_dsub>
 800a6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a700:	4606      	mov	r6, r0
 800a702:	460f      	mov	r7, r1
 800a704:	f7f6 fa28 	bl	8000b58 <__aeabi_dcmpgt>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f040 8296 	bne.w	800ac3a <_dtoa_r+0x992>
 800a70e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a712:	4630      	mov	r0, r6
 800a714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a718:	4639      	mov	r1, r7
 800a71a:	f7f6 f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f040 8288 	bne.w	800ac34 <_dtoa_r+0x98c>
 800a724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a72c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f2c0 8158 	blt.w	800a9e4 <_dtoa_r+0x73c>
 800a734:	f1ba 0f0e 	cmp.w	sl, #14
 800a738:	f300 8154 	bgt.w	800a9e4 <_dtoa_r+0x73c>
 800a73c:	4b6b      	ldr	r3, [pc, #428]	; (800a8ec <_dtoa_r+0x644>)
 800a73e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a742:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f280 80e3 	bge.w	800a914 <_dtoa_r+0x66c>
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f300 80df 	bgt.w	800a914 <_dtoa_r+0x66c>
 800a756:	f040 826d 	bne.w	800ac34 <_dtoa_r+0x98c>
 800a75a:	4b69      	ldr	r3, [pc, #420]	; (800a900 <_dtoa_r+0x658>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f5 ff69 	bl	8000638 <__aeabi_dmul>
 800a766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a76a:	f7f6 f9eb 	bl	8000b44 <__aeabi_dcmpge>
 800a76e:	9e01      	ldr	r6, [sp, #4]
 800a770:	4637      	mov	r7, r6
 800a772:	2800      	cmp	r0, #0
 800a774:	f040 8243 	bne.w	800abfe <_dtoa_r+0x956>
 800a778:	9d00      	ldr	r5, [sp, #0]
 800a77a:	2331      	movs	r3, #49	; 0x31
 800a77c:	f805 3b01 	strb.w	r3, [r5], #1
 800a780:	f10a 0a01 	add.w	sl, sl, #1
 800a784:	e23f      	b.n	800ac06 <_dtoa_r+0x95e>
 800a786:	07f2      	lsls	r2, r6, #31
 800a788:	d505      	bpl.n	800a796 <_dtoa_r+0x4ee>
 800a78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78e:	f7f5 ff53 	bl	8000638 <__aeabi_dmul>
 800a792:	3501      	adds	r5, #1
 800a794:	2301      	movs	r3, #1
 800a796:	1076      	asrs	r6, r6, #1
 800a798:	3708      	adds	r7, #8
 800a79a:	e76c      	b.n	800a676 <_dtoa_r+0x3ce>
 800a79c:	2502      	movs	r5, #2
 800a79e:	e76f      	b.n	800a680 <_dtoa_r+0x3d8>
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a7a8:	e78d      	b.n	800a6c6 <_dtoa_r+0x41e>
 800a7aa:	9900      	ldr	r1, [sp, #0]
 800a7ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7b0:	4b4e      	ldr	r3, [pc, #312]	; (800a8ec <_dtoa_r+0x644>)
 800a7b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7b6:	4401      	add	r1, r0
 800a7b8:	9102      	str	r1, [sp, #8]
 800a7ba:	9908      	ldr	r1, [sp, #32]
 800a7bc:	eeb0 8a47 	vmov.f32	s16, s14
 800a7c0:	eef0 8a67 	vmov.f32	s17, s15
 800a7c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	d045      	beq.n	800a85c <_dtoa_r+0x5b4>
 800a7d0:	494c      	ldr	r1, [pc, #304]	; (800a904 <_dtoa_r+0x65c>)
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f7f6 f85a 	bl	800088c <__aeabi_ddiv>
 800a7d8:	ec53 2b18 	vmov	r2, r3, d8
 800a7dc:	f7f5 fd74 	bl	80002c8 <__aeabi_dsub>
 800a7e0:	9d00      	ldr	r5, [sp, #0]
 800a7e2:	ec41 0b18 	vmov	d8, r0, r1
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f7f6 f9d5 	bl	8000b98 <__aeabi_d2iz>
 800a7ee:	900c      	str	r0, [sp, #48]	; 0x30
 800a7f0:	f7f5 feb8 	bl	8000564 <__aeabi_i2d>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f5 fd64 	bl	80002c8 <__aeabi_dsub>
 800a800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a802:	3330      	adds	r3, #48	; 0x30
 800a804:	f805 3b01 	strb.w	r3, [r5], #1
 800a808:	ec53 2b18 	vmov	r2, r3, d8
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	f7f6 f984 	bl	8000b1c <__aeabi_dcmplt>
 800a814:	2800      	cmp	r0, #0
 800a816:	d165      	bne.n	800a8e4 <_dtoa_r+0x63c>
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	4935      	ldr	r1, [pc, #212]	; (800a8f4 <_dtoa_r+0x64c>)
 800a81e:	2000      	movs	r0, #0
 800a820:	f7f5 fd52 	bl	80002c8 <__aeabi_dsub>
 800a824:	ec53 2b18 	vmov	r2, r3, d8
 800a828:	f7f6 f978 	bl	8000b1c <__aeabi_dcmplt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f040 80b9 	bne.w	800a9a4 <_dtoa_r+0x6fc>
 800a832:	9b02      	ldr	r3, [sp, #8]
 800a834:	429d      	cmp	r5, r3
 800a836:	f43f af75 	beq.w	800a724 <_dtoa_r+0x47c>
 800a83a:	4b2f      	ldr	r3, [pc, #188]	; (800a8f8 <_dtoa_r+0x650>)
 800a83c:	ec51 0b18 	vmov	r0, r1, d8
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fef9 	bl	8000638 <__aeabi_dmul>
 800a846:	4b2c      	ldr	r3, [pc, #176]	; (800a8f8 <_dtoa_r+0x650>)
 800a848:	ec41 0b18 	vmov	d8, r0, r1
 800a84c:	2200      	movs	r2, #0
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f5 fef1 	bl	8000638 <__aeabi_dmul>
 800a856:	4606      	mov	r6, r0
 800a858:	460f      	mov	r7, r1
 800a85a:	e7c4      	b.n	800a7e6 <_dtoa_r+0x53e>
 800a85c:	ec51 0b17 	vmov	r0, r1, d7
 800a860:	f7f5 feea 	bl	8000638 <__aeabi_dmul>
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	9d00      	ldr	r5, [sp, #0]
 800a868:	930c      	str	r3, [sp, #48]	; 0x30
 800a86a:	ec41 0b18 	vmov	d8, r0, r1
 800a86e:	4639      	mov	r1, r7
 800a870:	4630      	mov	r0, r6
 800a872:	f7f6 f991 	bl	8000b98 <__aeabi_d2iz>
 800a876:	9011      	str	r0, [sp, #68]	; 0x44
 800a878:	f7f5 fe74 	bl	8000564 <__aeabi_i2d>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f5 fd20 	bl	80002c8 <__aeabi_dsub>
 800a888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a88a:	3330      	adds	r3, #48	; 0x30
 800a88c:	f805 3b01 	strb.w	r3, [r5], #1
 800a890:	9b02      	ldr	r3, [sp, #8]
 800a892:	429d      	cmp	r5, r3
 800a894:	4606      	mov	r6, r0
 800a896:	460f      	mov	r7, r1
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	d134      	bne.n	800a908 <_dtoa_r+0x660>
 800a89e:	4b19      	ldr	r3, [pc, #100]	; (800a904 <_dtoa_r+0x65c>)
 800a8a0:	ec51 0b18 	vmov	r0, r1, d8
 800a8a4:	f7f5 fd12 	bl	80002cc <__adddf3>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f6 f952 	bl	8000b58 <__aeabi_dcmpgt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d175      	bne.n	800a9a4 <_dtoa_r+0x6fc>
 800a8b8:	ec53 2b18 	vmov	r2, r3, d8
 800a8bc:	4911      	ldr	r1, [pc, #68]	; (800a904 <_dtoa_r+0x65c>)
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f5 fd02 	bl	80002c8 <__aeabi_dsub>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f6 f926 	bl	8000b1c <__aeabi_dcmplt>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f43f af27 	beq.w	800a724 <_dtoa_r+0x47c>
 800a8d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d8:	1e6b      	subs	r3, r5, #1
 800a8da:	930c      	str	r3, [sp, #48]	; 0x30
 800a8dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8e0:	2b30      	cmp	r3, #48	; 0x30
 800a8e2:	d0f8      	beq.n	800a8d6 <_dtoa_r+0x62e>
 800a8e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8e8:	e04a      	b.n	800a980 <_dtoa_r+0x6d8>
 800a8ea:	bf00      	nop
 800a8ec:	0800d530 	.word	0x0800d530
 800a8f0:	0800d508 	.word	0x0800d508
 800a8f4:	3ff00000 	.word	0x3ff00000
 800a8f8:	40240000 	.word	0x40240000
 800a8fc:	401c0000 	.word	0x401c0000
 800a900:	40140000 	.word	0x40140000
 800a904:	3fe00000 	.word	0x3fe00000
 800a908:	4baf      	ldr	r3, [pc, #700]	; (800abc8 <_dtoa_r+0x920>)
 800a90a:	f7f5 fe95 	bl	8000638 <__aeabi_dmul>
 800a90e:	4606      	mov	r6, r0
 800a910:	460f      	mov	r7, r1
 800a912:	e7ac      	b.n	800a86e <_dtoa_r+0x5c6>
 800a914:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a918:	9d00      	ldr	r5, [sp, #0]
 800a91a:	4642      	mov	r2, r8
 800a91c:	464b      	mov	r3, r9
 800a91e:	4630      	mov	r0, r6
 800a920:	4639      	mov	r1, r7
 800a922:	f7f5 ffb3 	bl	800088c <__aeabi_ddiv>
 800a926:	f7f6 f937 	bl	8000b98 <__aeabi_d2iz>
 800a92a:	9002      	str	r0, [sp, #8]
 800a92c:	f7f5 fe1a 	bl	8000564 <__aeabi_i2d>
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	f7f5 fe80 	bl	8000638 <__aeabi_dmul>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4630      	mov	r0, r6
 800a93e:	4639      	mov	r1, r7
 800a940:	f7f5 fcc2 	bl	80002c8 <__aeabi_dsub>
 800a944:	9e02      	ldr	r6, [sp, #8]
 800a946:	9f01      	ldr	r7, [sp, #4]
 800a948:	3630      	adds	r6, #48	; 0x30
 800a94a:	f805 6b01 	strb.w	r6, [r5], #1
 800a94e:	9e00      	ldr	r6, [sp, #0]
 800a950:	1bae      	subs	r6, r5, r6
 800a952:	42b7      	cmp	r7, r6
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	d137      	bne.n	800a9ca <_dtoa_r+0x722>
 800a95a:	f7f5 fcb7 	bl	80002cc <__adddf3>
 800a95e:	4642      	mov	r2, r8
 800a960:	464b      	mov	r3, r9
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	f7f6 f8f7 	bl	8000b58 <__aeabi_dcmpgt>
 800a96a:	b9c8      	cbnz	r0, 800a9a0 <_dtoa_r+0x6f8>
 800a96c:	4642      	mov	r2, r8
 800a96e:	464b      	mov	r3, r9
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f6 f8c8 	bl	8000b08 <__aeabi_dcmpeq>
 800a978:	b110      	cbz	r0, 800a980 <_dtoa_r+0x6d8>
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	07d9      	lsls	r1, r3, #31
 800a97e:	d40f      	bmi.n	800a9a0 <_dtoa_r+0x6f8>
 800a980:	4620      	mov	r0, r4
 800a982:	4659      	mov	r1, fp
 800a984:	f000 fcf6 	bl	800b374 <_Bfree>
 800a988:	2300      	movs	r3, #0
 800a98a:	702b      	strb	r3, [r5, #0]
 800a98c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a98e:	f10a 0001 	add.w	r0, sl, #1
 800a992:	6018      	str	r0, [r3, #0]
 800a994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f acd8 	beq.w	800a34c <_dtoa_r+0xa4>
 800a99c:	601d      	str	r5, [r3, #0]
 800a99e:	e4d5      	b.n	800a34c <_dtoa_r+0xa4>
 800a9a0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9ac:	2a39      	cmp	r2, #57	; 0x39
 800a9ae:	d108      	bne.n	800a9c2 <_dtoa_r+0x71a>
 800a9b0:	9a00      	ldr	r2, [sp, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d1f7      	bne.n	800a9a6 <_dtoa_r+0x6fe>
 800a9b6:	9a07      	ldr	r2, [sp, #28]
 800a9b8:	9900      	ldr	r1, [sp, #0]
 800a9ba:	3201      	adds	r2, #1
 800a9bc:	9207      	str	r2, [sp, #28]
 800a9be:	2230      	movs	r2, #48	; 0x30
 800a9c0:	700a      	strb	r2, [r1, #0]
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	3201      	adds	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e78c      	b.n	800a8e4 <_dtoa_r+0x63c>
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	; (800abc8 <_dtoa_r+0x920>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f7f5 fe33 	bl	8000638 <__aeabi_dmul>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	f7f6 f895 	bl	8000b08 <__aeabi_dcmpeq>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d09b      	beq.n	800a91a <_dtoa_r+0x672>
 800a9e2:	e7cd      	b.n	800a980 <_dtoa_r+0x6d8>
 800a9e4:	9a08      	ldr	r2, [sp, #32]
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	f000 80c4 	beq.w	800ab74 <_dtoa_r+0x8cc>
 800a9ec:	9a05      	ldr	r2, [sp, #20]
 800a9ee:	2a01      	cmp	r2, #1
 800a9f0:	f300 80a8 	bgt.w	800ab44 <_dtoa_r+0x89c>
 800a9f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	f000 80a0 	beq.w	800ab3c <_dtoa_r+0x894>
 800a9fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa00:	9e06      	ldr	r6, [sp, #24]
 800aa02:	4645      	mov	r5, r8
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	2101      	movs	r1, #1
 800aa08:	441a      	add	r2, r3
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	4498      	add	r8, r3
 800aa0e:	9204      	str	r2, [sp, #16]
 800aa10:	f000 fd6c 	bl	800b4ec <__i2b>
 800aa14:	4607      	mov	r7, r0
 800aa16:	2d00      	cmp	r5, #0
 800aa18:	dd0b      	ble.n	800aa32 <_dtoa_r+0x78a>
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd08      	ble.n	800aa32 <_dtoa_r+0x78a>
 800aa20:	42ab      	cmp	r3, r5
 800aa22:	9a04      	ldr	r2, [sp, #16]
 800aa24:	bfa8      	it	ge
 800aa26:	462b      	movge	r3, r5
 800aa28:	eba8 0803 	sub.w	r8, r8, r3
 800aa2c:	1aed      	subs	r5, r5, r3
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	9b06      	ldr	r3, [sp, #24]
 800aa34:	b1fb      	cbz	r3, 800aa76 <_dtoa_r+0x7ce>
 800aa36:	9b08      	ldr	r3, [sp, #32]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 809f 	beq.w	800ab7c <_dtoa_r+0x8d4>
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	dd11      	ble.n	800aa66 <_dtoa_r+0x7be>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4632      	mov	r2, r6
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 fe0c 	bl	800b664 <__pow5mult>
 800aa4c:	465a      	mov	r2, fp
 800aa4e:	4601      	mov	r1, r0
 800aa50:	4607      	mov	r7, r0
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fd60 	bl	800b518 <__multiply>
 800aa58:	4659      	mov	r1, fp
 800aa5a:	9007      	str	r0, [sp, #28]
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fc89 	bl	800b374 <_Bfree>
 800aa62:	9b07      	ldr	r3, [sp, #28]
 800aa64:	469b      	mov	fp, r3
 800aa66:	9b06      	ldr	r3, [sp, #24]
 800aa68:	1b9a      	subs	r2, r3, r6
 800aa6a:	d004      	beq.n	800aa76 <_dtoa_r+0x7ce>
 800aa6c:	4659      	mov	r1, fp
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fdf8 	bl	800b664 <__pow5mult>
 800aa74:	4683      	mov	fp, r0
 800aa76:	2101      	movs	r1, #1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fd37 	bl	800b4ec <__i2b>
 800aa7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	4606      	mov	r6, r0
 800aa84:	dd7c      	ble.n	800ab80 <_dtoa_r+0x8d8>
 800aa86:	461a      	mov	r2, r3
 800aa88:	4601      	mov	r1, r0
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fdea 	bl	800b664 <__pow5mult>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	4606      	mov	r6, r0
 800aa96:	dd76      	ble.n	800ab86 <_dtoa_r+0x8de>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	6933      	ldr	r3, [r6, #16]
 800aa9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaa2:	6918      	ldr	r0, [r3, #16]
 800aaa4:	f000 fcd2 	bl	800b44c <__hi0bits>
 800aaa8:	f1c0 0020 	rsb	r0, r0, #32
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	4418      	add	r0, r3
 800aab0:	f010 001f 	ands.w	r0, r0, #31
 800aab4:	f000 8086 	beq.w	800abc4 <_dtoa_r+0x91c>
 800aab8:	f1c0 0320 	rsb	r3, r0, #32
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	dd7f      	ble.n	800abc0 <_dtoa_r+0x918>
 800aac0:	f1c0 001c 	rsb	r0, r0, #28
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4403      	add	r3, r0
 800aac8:	4480      	add	r8, r0
 800aaca:	4405      	add	r5, r0
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	f1b8 0f00 	cmp.w	r8, #0
 800aad2:	dd05      	ble.n	800aae0 <_dtoa_r+0x838>
 800aad4:	4659      	mov	r1, fp
 800aad6:	4642      	mov	r2, r8
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fe1d 	bl	800b718 <__lshift>
 800aade:	4683      	mov	fp, r0
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	dd05      	ble.n	800aaf2 <_dtoa_r+0x84a>
 800aae6:	4631      	mov	r1, r6
 800aae8:	461a      	mov	r2, r3
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fe14 	bl	800b718 <__lshift>
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d069      	beq.n	800abcc <_dtoa_r+0x924>
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4658      	mov	r0, fp
 800aafc:	f000 fe78 	bl	800b7f0 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	da63      	bge.n	800abcc <_dtoa_r+0x924>
 800ab04:	2300      	movs	r3, #0
 800ab06:	4659      	mov	r1, fp
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fc54 	bl	800b3b8 <__multadd>
 800ab10:	9b08      	ldr	r3, [sp, #32]
 800ab12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab16:	4683      	mov	fp, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 818f 	beq.w	800ae3c <_dtoa_r+0xb94>
 800ab1e:	4639      	mov	r1, r7
 800ab20:	2300      	movs	r3, #0
 800ab22:	220a      	movs	r2, #10
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fc47 	bl	800b3b8 <__multadd>
 800ab2a:	f1b9 0f00 	cmp.w	r9, #0
 800ab2e:	4607      	mov	r7, r0
 800ab30:	f300 808e 	bgt.w	800ac50 <_dtoa_r+0x9a8>
 800ab34:	9b05      	ldr	r3, [sp, #20]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dc50      	bgt.n	800abdc <_dtoa_r+0x934>
 800ab3a:	e089      	b.n	800ac50 <_dtoa_r+0x9a8>
 800ab3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab42:	e75d      	b.n	800aa00 <_dtoa_r+0x758>
 800ab44:	9b01      	ldr	r3, [sp, #4]
 800ab46:	1e5e      	subs	r6, r3, #1
 800ab48:	9b06      	ldr	r3, [sp, #24]
 800ab4a:	42b3      	cmp	r3, r6
 800ab4c:	bfbf      	itttt	lt
 800ab4e:	9b06      	ldrlt	r3, [sp, #24]
 800ab50:	9606      	strlt	r6, [sp, #24]
 800ab52:	1af2      	sublt	r2, r6, r3
 800ab54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab56:	bfb6      	itet	lt
 800ab58:	189b      	addlt	r3, r3, r2
 800ab5a:	1b9e      	subge	r6, r3, r6
 800ab5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	bfb8      	it	lt
 800ab62:	2600      	movlt	r6, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfb5      	itete	lt
 800ab68:	eba8 0503 	sublt.w	r5, r8, r3
 800ab6c:	9b01      	ldrge	r3, [sp, #4]
 800ab6e:	2300      	movlt	r3, #0
 800ab70:	4645      	movge	r5, r8
 800ab72:	e747      	b.n	800aa04 <_dtoa_r+0x75c>
 800ab74:	9e06      	ldr	r6, [sp, #24]
 800ab76:	9f08      	ldr	r7, [sp, #32]
 800ab78:	4645      	mov	r5, r8
 800ab7a:	e74c      	b.n	800aa16 <_dtoa_r+0x76e>
 800ab7c:	9a06      	ldr	r2, [sp, #24]
 800ab7e:	e775      	b.n	800aa6c <_dtoa_r+0x7c4>
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	dc18      	bgt.n	800abb8 <_dtoa_r+0x910>
 800ab86:	9b02      	ldr	r3, [sp, #8]
 800ab88:	b9b3      	cbnz	r3, 800abb8 <_dtoa_r+0x910>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab90:	b9a3      	cbnz	r3, 800abbc <_dtoa_r+0x914>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab98:	0d1b      	lsrs	r3, r3, #20
 800ab9a:	051b      	lsls	r3, r3, #20
 800ab9c:	b12b      	cbz	r3, 800abaa <_dtoa_r+0x902>
 800ab9e:	9b04      	ldr	r3, [sp, #16]
 800aba0:	3301      	adds	r3, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	f108 0801 	add.w	r8, r8, #1
 800aba8:	2301      	movs	r3, #1
 800abaa:	9306      	str	r3, [sp, #24]
 800abac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f47f af74 	bne.w	800aa9c <_dtoa_r+0x7f4>
 800abb4:	2001      	movs	r0, #1
 800abb6:	e779      	b.n	800aaac <_dtoa_r+0x804>
 800abb8:	2300      	movs	r3, #0
 800abba:	e7f6      	b.n	800abaa <_dtoa_r+0x902>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	e7f4      	b.n	800abaa <_dtoa_r+0x902>
 800abc0:	d085      	beq.n	800aace <_dtoa_r+0x826>
 800abc2:	4618      	mov	r0, r3
 800abc4:	301c      	adds	r0, #28
 800abc6:	e77d      	b.n	800aac4 <_dtoa_r+0x81c>
 800abc8:	40240000 	.word	0x40240000
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dc38      	bgt.n	800ac44 <_dtoa_r+0x99c>
 800abd2:	9b05      	ldr	r3, [sp, #20]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	dd35      	ble.n	800ac44 <_dtoa_r+0x99c>
 800abd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abdc:	f1b9 0f00 	cmp.w	r9, #0
 800abe0:	d10d      	bne.n	800abfe <_dtoa_r+0x956>
 800abe2:	4631      	mov	r1, r6
 800abe4:	464b      	mov	r3, r9
 800abe6:	2205      	movs	r2, #5
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fbe5 	bl	800b3b8 <__multadd>
 800abee:	4601      	mov	r1, r0
 800abf0:	4606      	mov	r6, r0
 800abf2:	4658      	mov	r0, fp
 800abf4:	f000 fdfc 	bl	800b7f0 <__mcmp>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	f73f adbd 	bgt.w	800a778 <_dtoa_r+0x4d0>
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	9d00      	ldr	r5, [sp, #0]
 800ac02:	ea6f 0a03 	mvn.w	sl, r3
 800ac06:	f04f 0800 	mov.w	r8, #0
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fbb1 	bl	800b374 <_Bfree>
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	f43f aeb4 	beq.w	800a980 <_dtoa_r+0x6d8>
 800ac18:	f1b8 0f00 	cmp.w	r8, #0
 800ac1c:	d005      	beq.n	800ac2a <_dtoa_r+0x982>
 800ac1e:	45b8      	cmp	r8, r7
 800ac20:	d003      	beq.n	800ac2a <_dtoa_r+0x982>
 800ac22:	4641      	mov	r1, r8
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 fba5 	bl	800b374 <_Bfree>
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 fba1 	bl	800b374 <_Bfree>
 800ac32:	e6a5      	b.n	800a980 <_dtoa_r+0x6d8>
 800ac34:	2600      	movs	r6, #0
 800ac36:	4637      	mov	r7, r6
 800ac38:	e7e1      	b.n	800abfe <_dtoa_r+0x956>
 800ac3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac40:	4637      	mov	r7, r6
 800ac42:	e599      	b.n	800a778 <_dtoa_r+0x4d0>
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80fd 	beq.w	800ae4a <_dtoa_r+0xba2>
 800ac50:	2d00      	cmp	r5, #0
 800ac52:	dd05      	ble.n	800ac60 <_dtoa_r+0x9b8>
 800ac54:	4639      	mov	r1, r7
 800ac56:	462a      	mov	r2, r5
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fd5d 	bl	800b718 <__lshift>
 800ac5e:	4607      	mov	r7, r0
 800ac60:	9b06      	ldr	r3, [sp, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d05c      	beq.n	800ad20 <_dtoa_r+0xa78>
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fb43 	bl	800b2f4 <_Balloc>
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b928      	cbnz	r0, 800ac7e <_dtoa_r+0x9d6>
 800ac72:	4b80      	ldr	r3, [pc, #512]	; (800ae74 <_dtoa_r+0xbcc>)
 800ac74:	4602      	mov	r2, r0
 800ac76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac7a:	f7ff bb2e 	b.w	800a2da <_dtoa_r+0x32>
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	3202      	adds	r2, #2
 800ac82:	0092      	lsls	r2, r2, #2
 800ac84:	f107 010c 	add.w	r1, r7, #12
 800ac88:	300c      	adds	r0, #12
 800ac8a:	f000 fb25 	bl	800b2d8 <memcpy>
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4629      	mov	r1, r5
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fd40 	bl	800b718 <__lshift>
 800ac98:	9b00      	ldr	r3, [sp, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	9b00      	ldr	r3, [sp, #0]
 800aca0:	444b      	add	r3, r9
 800aca2:	9307      	str	r3, [sp, #28]
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	46b8      	mov	r8, r7
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	4607      	mov	r7, r0
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	4631      	mov	r1, r6
 800acb4:	3b01      	subs	r3, #1
 800acb6:	4658      	mov	r0, fp
 800acb8:	9302      	str	r3, [sp, #8]
 800acba:	f7ff fa69 	bl	800a190 <quorem>
 800acbe:	4603      	mov	r3, r0
 800acc0:	3330      	adds	r3, #48	; 0x30
 800acc2:	9004      	str	r0, [sp, #16]
 800acc4:	4641      	mov	r1, r8
 800acc6:	4658      	mov	r0, fp
 800acc8:	9308      	str	r3, [sp, #32]
 800acca:	f000 fd91 	bl	800b7f0 <__mcmp>
 800acce:	463a      	mov	r2, r7
 800acd0:	4681      	mov	r9, r0
 800acd2:	4631      	mov	r1, r6
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fda7 	bl	800b828 <__mdiff>
 800acda:	68c2      	ldr	r2, [r0, #12]
 800acdc:	9b08      	ldr	r3, [sp, #32]
 800acde:	4605      	mov	r5, r0
 800ace0:	bb02      	cbnz	r2, 800ad24 <_dtoa_r+0xa7c>
 800ace2:	4601      	mov	r1, r0
 800ace4:	4658      	mov	r0, fp
 800ace6:	f000 fd83 	bl	800b7f0 <__mcmp>
 800acea:	9b08      	ldr	r3, [sp, #32]
 800acec:	4602      	mov	r2, r0
 800acee:	4629      	mov	r1, r5
 800acf0:	4620      	mov	r0, r4
 800acf2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800acf6:	f000 fb3d 	bl	800b374 <_Bfree>
 800acfa:	9b05      	ldr	r3, [sp, #20]
 800acfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acfe:	9d01      	ldr	r5, [sp, #4]
 800ad00:	ea43 0102 	orr.w	r1, r3, r2
 800ad04:	9b06      	ldr	r3, [sp, #24]
 800ad06:	430b      	orrs	r3, r1
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	d10d      	bne.n	800ad28 <_dtoa_r+0xa80>
 800ad0c:	2b39      	cmp	r3, #57	; 0x39
 800ad0e:	d029      	beq.n	800ad64 <_dtoa_r+0xabc>
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	dd01      	ble.n	800ad1a <_dtoa_r+0xa72>
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	3331      	adds	r3, #49	; 0x31
 800ad1a:	9a02      	ldr	r2, [sp, #8]
 800ad1c:	7013      	strb	r3, [r2, #0]
 800ad1e:	e774      	b.n	800ac0a <_dtoa_r+0x962>
 800ad20:	4638      	mov	r0, r7
 800ad22:	e7b9      	b.n	800ac98 <_dtoa_r+0x9f0>
 800ad24:	2201      	movs	r2, #1
 800ad26:	e7e2      	b.n	800acee <_dtoa_r+0xa46>
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	db06      	blt.n	800ad3c <_dtoa_r+0xa94>
 800ad2e:	9905      	ldr	r1, [sp, #20]
 800ad30:	ea41 0909 	orr.w	r9, r1, r9
 800ad34:	9906      	ldr	r1, [sp, #24]
 800ad36:	ea59 0101 	orrs.w	r1, r9, r1
 800ad3a:	d120      	bne.n	800ad7e <_dtoa_r+0xad6>
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	ddec      	ble.n	800ad1a <_dtoa_r+0xa72>
 800ad40:	4659      	mov	r1, fp
 800ad42:	2201      	movs	r2, #1
 800ad44:	4620      	mov	r0, r4
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	f000 fce6 	bl	800b718 <__lshift>
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4683      	mov	fp, r0
 800ad50:	f000 fd4e 	bl	800b7f0 <__mcmp>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	9b01      	ldr	r3, [sp, #4]
 800ad58:	dc02      	bgt.n	800ad60 <_dtoa_r+0xab8>
 800ad5a:	d1de      	bne.n	800ad1a <_dtoa_r+0xa72>
 800ad5c:	07da      	lsls	r2, r3, #31
 800ad5e:	d5dc      	bpl.n	800ad1a <_dtoa_r+0xa72>
 800ad60:	2b39      	cmp	r3, #57	; 0x39
 800ad62:	d1d8      	bne.n	800ad16 <_dtoa_r+0xa6e>
 800ad64:	9a02      	ldr	r2, [sp, #8]
 800ad66:	2339      	movs	r3, #57	; 0x39
 800ad68:	7013      	strb	r3, [r2, #0]
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	461d      	mov	r5, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad74:	2a39      	cmp	r2, #57	; 0x39
 800ad76:	d050      	beq.n	800ae1a <_dtoa_r+0xb72>
 800ad78:	3201      	adds	r2, #1
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e745      	b.n	800ac0a <_dtoa_r+0x962>
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	dd03      	ble.n	800ad8a <_dtoa_r+0xae2>
 800ad82:	2b39      	cmp	r3, #57	; 0x39
 800ad84:	d0ee      	beq.n	800ad64 <_dtoa_r+0xabc>
 800ad86:	3301      	adds	r3, #1
 800ad88:	e7c7      	b.n	800ad1a <_dtoa_r+0xa72>
 800ad8a:	9a01      	ldr	r2, [sp, #4]
 800ad8c:	9907      	ldr	r1, [sp, #28]
 800ad8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad92:	428a      	cmp	r2, r1
 800ad94:	d02a      	beq.n	800adec <_dtoa_r+0xb44>
 800ad96:	4659      	mov	r1, fp
 800ad98:	2300      	movs	r3, #0
 800ad9a:	220a      	movs	r2, #10
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 fb0b 	bl	800b3b8 <__multadd>
 800ada2:	45b8      	cmp	r8, r7
 800ada4:	4683      	mov	fp, r0
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	f04f 020a 	mov.w	r2, #10
 800adae:	4641      	mov	r1, r8
 800adb0:	4620      	mov	r0, r4
 800adb2:	d107      	bne.n	800adc4 <_dtoa_r+0xb1c>
 800adb4:	f000 fb00 	bl	800b3b8 <__multadd>
 800adb8:	4680      	mov	r8, r0
 800adba:	4607      	mov	r7, r0
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	e775      	b.n	800acb0 <_dtoa_r+0xa08>
 800adc4:	f000 faf8 	bl	800b3b8 <__multadd>
 800adc8:	4639      	mov	r1, r7
 800adca:	4680      	mov	r8, r0
 800adcc:	2300      	movs	r3, #0
 800adce:	220a      	movs	r2, #10
 800add0:	4620      	mov	r0, r4
 800add2:	f000 faf1 	bl	800b3b8 <__multadd>
 800add6:	4607      	mov	r7, r0
 800add8:	e7f0      	b.n	800adbc <_dtoa_r+0xb14>
 800adda:	f1b9 0f00 	cmp.w	r9, #0
 800adde:	9a00      	ldr	r2, [sp, #0]
 800ade0:	bfcc      	ite	gt
 800ade2:	464d      	movgt	r5, r9
 800ade4:	2501      	movle	r5, #1
 800ade6:	4415      	add	r5, r2
 800ade8:	f04f 0800 	mov.w	r8, #0
 800adec:	4659      	mov	r1, fp
 800adee:	2201      	movs	r2, #1
 800adf0:	4620      	mov	r0, r4
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	f000 fc90 	bl	800b718 <__lshift>
 800adf8:	4631      	mov	r1, r6
 800adfa:	4683      	mov	fp, r0
 800adfc:	f000 fcf8 	bl	800b7f0 <__mcmp>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dcb2      	bgt.n	800ad6a <_dtoa_r+0xac2>
 800ae04:	d102      	bne.n	800ae0c <_dtoa_r+0xb64>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	07db      	lsls	r3, r3, #31
 800ae0a:	d4ae      	bmi.n	800ad6a <_dtoa_r+0xac2>
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae14:	2a30      	cmp	r2, #48	; 0x30
 800ae16:	d0fa      	beq.n	800ae0e <_dtoa_r+0xb66>
 800ae18:	e6f7      	b.n	800ac0a <_dtoa_r+0x962>
 800ae1a:	9a00      	ldr	r2, [sp, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d1a5      	bne.n	800ad6c <_dtoa_r+0xac4>
 800ae20:	f10a 0a01 	add.w	sl, sl, #1
 800ae24:	2331      	movs	r3, #49	; 0x31
 800ae26:	e779      	b.n	800ad1c <_dtoa_r+0xa74>
 800ae28:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <_dtoa_r+0xbd0>)
 800ae2a:	f7ff baaf 	b.w	800a38c <_dtoa_r+0xe4>
 800ae2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f47f aa86 	bne.w	800a342 <_dtoa_r+0x9a>
 800ae36:	4b11      	ldr	r3, [pc, #68]	; (800ae7c <_dtoa_r+0xbd4>)
 800ae38:	f7ff baa8 	b.w	800a38c <_dtoa_r+0xe4>
 800ae3c:	f1b9 0f00 	cmp.w	r9, #0
 800ae40:	dc03      	bgt.n	800ae4a <_dtoa_r+0xba2>
 800ae42:	9b05      	ldr	r3, [sp, #20]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	f73f aec9 	bgt.w	800abdc <_dtoa_r+0x934>
 800ae4a:	9d00      	ldr	r5, [sp, #0]
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4658      	mov	r0, fp
 800ae50:	f7ff f99e 	bl	800a190 <quorem>
 800ae54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae58:	f805 3b01 	strb.w	r3, [r5], #1
 800ae5c:	9a00      	ldr	r2, [sp, #0]
 800ae5e:	1aaa      	subs	r2, r5, r2
 800ae60:	4591      	cmp	r9, r2
 800ae62:	ddba      	ble.n	800adda <_dtoa_r+0xb32>
 800ae64:	4659      	mov	r1, fp
 800ae66:	2300      	movs	r3, #0
 800ae68:	220a      	movs	r2, #10
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 faa4 	bl	800b3b8 <__multadd>
 800ae70:	4683      	mov	fp, r0
 800ae72:	e7eb      	b.n	800ae4c <_dtoa_r+0xba4>
 800ae74:	0800d437 	.word	0x0800d437
 800ae78:	0800d390 	.word	0x0800d390
 800ae7c:	0800d3b4 	.word	0x0800d3b4

0800ae80 <__sflush_r>:
 800ae80:	898a      	ldrh	r2, [r1, #12]
 800ae82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae86:	4605      	mov	r5, r0
 800ae88:	0710      	lsls	r0, r2, #28
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	d458      	bmi.n	800af40 <__sflush_r+0xc0>
 800ae8e:	684b      	ldr	r3, [r1, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dc05      	bgt.n	800aea0 <__sflush_r+0x20>
 800ae94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dc02      	bgt.n	800aea0 <__sflush_r+0x20>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aea2:	2e00      	cmp	r6, #0
 800aea4:	d0f9      	beq.n	800ae9a <__sflush_r+0x1a>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aeac:	682f      	ldr	r7, [r5, #0]
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	d032      	beq.n	800af18 <__sflush_r+0x98>
 800aeb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	075a      	lsls	r2, r3, #29
 800aeb8:	d505      	bpl.n	800aec6 <__sflush_r+0x46>
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	1ac0      	subs	r0, r0, r3
 800aebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aec0:	b10b      	cbz	r3, 800aec6 <__sflush_r+0x46>
 800aec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aec4:	1ac0      	subs	r0, r0, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	4602      	mov	r2, r0
 800aeca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aecc:	6a21      	ldr	r1, [r4, #32]
 800aece:	4628      	mov	r0, r5
 800aed0:	47b0      	blx	r6
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	d106      	bne.n	800aee6 <__sflush_r+0x66>
 800aed8:	6829      	ldr	r1, [r5, #0]
 800aeda:	291d      	cmp	r1, #29
 800aedc:	d82c      	bhi.n	800af38 <__sflush_r+0xb8>
 800aede:	4a2a      	ldr	r2, [pc, #168]	; (800af88 <__sflush_r+0x108>)
 800aee0:	40ca      	lsrs	r2, r1
 800aee2:	07d6      	lsls	r6, r2, #31
 800aee4:	d528      	bpl.n	800af38 <__sflush_r+0xb8>
 800aee6:	2200      	movs	r2, #0
 800aee8:	6062      	str	r2, [r4, #4]
 800aeea:	04d9      	lsls	r1, r3, #19
 800aeec:	6922      	ldr	r2, [r4, #16]
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	d504      	bpl.n	800aefc <__sflush_r+0x7c>
 800aef2:	1c42      	adds	r2, r0, #1
 800aef4:	d101      	bne.n	800aefa <__sflush_r+0x7a>
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	b903      	cbnz	r3, 800aefc <__sflush_r+0x7c>
 800aefa:	6560      	str	r0, [r4, #84]	; 0x54
 800aefc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aefe:	602f      	str	r7, [r5, #0]
 800af00:	2900      	cmp	r1, #0
 800af02:	d0ca      	beq.n	800ae9a <__sflush_r+0x1a>
 800af04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af08:	4299      	cmp	r1, r3
 800af0a:	d002      	beq.n	800af12 <__sflush_r+0x92>
 800af0c:	4628      	mov	r0, r5
 800af0e:	f000 fd7f 	bl	800ba10 <_free_r>
 800af12:	2000      	movs	r0, #0
 800af14:	6360      	str	r0, [r4, #52]	; 0x34
 800af16:	e7c1      	b.n	800ae9c <__sflush_r+0x1c>
 800af18:	6a21      	ldr	r1, [r4, #32]
 800af1a:	2301      	movs	r3, #1
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b0      	blx	r6
 800af20:	1c41      	adds	r1, r0, #1
 800af22:	d1c7      	bne.n	800aeb4 <__sflush_r+0x34>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0c4      	beq.n	800aeb4 <__sflush_r+0x34>
 800af2a:	2b1d      	cmp	r3, #29
 800af2c:	d001      	beq.n	800af32 <__sflush_r+0xb2>
 800af2e:	2b16      	cmp	r3, #22
 800af30:	d101      	bne.n	800af36 <__sflush_r+0xb6>
 800af32:	602f      	str	r7, [r5, #0]
 800af34:	e7b1      	b.n	800ae9a <__sflush_r+0x1a>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	e7ad      	b.n	800ae9c <__sflush_r+0x1c>
 800af40:	690f      	ldr	r7, [r1, #16]
 800af42:	2f00      	cmp	r7, #0
 800af44:	d0a9      	beq.n	800ae9a <__sflush_r+0x1a>
 800af46:	0793      	lsls	r3, r2, #30
 800af48:	680e      	ldr	r6, [r1, #0]
 800af4a:	bf08      	it	eq
 800af4c:	694b      	ldreq	r3, [r1, #20]
 800af4e:	600f      	str	r7, [r1, #0]
 800af50:	bf18      	it	ne
 800af52:	2300      	movne	r3, #0
 800af54:	eba6 0807 	sub.w	r8, r6, r7
 800af58:	608b      	str	r3, [r1, #8]
 800af5a:	f1b8 0f00 	cmp.w	r8, #0
 800af5e:	dd9c      	ble.n	800ae9a <__sflush_r+0x1a>
 800af60:	6a21      	ldr	r1, [r4, #32]
 800af62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af64:	4643      	mov	r3, r8
 800af66:	463a      	mov	r2, r7
 800af68:	4628      	mov	r0, r5
 800af6a:	47b0      	blx	r6
 800af6c:	2800      	cmp	r0, #0
 800af6e:	dc06      	bgt.n	800af7e <__sflush_r+0xfe>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	e78e      	b.n	800ae9c <__sflush_r+0x1c>
 800af7e:	4407      	add	r7, r0
 800af80:	eba8 0800 	sub.w	r8, r8, r0
 800af84:	e7e9      	b.n	800af5a <__sflush_r+0xda>
 800af86:	bf00      	nop
 800af88:	20400001 	.word	0x20400001

0800af8c <_fflush_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	690b      	ldr	r3, [r1, #16]
 800af90:	4605      	mov	r5, r0
 800af92:	460c      	mov	r4, r1
 800af94:	b913      	cbnz	r3, 800af9c <_fflush_r+0x10>
 800af96:	2500      	movs	r5, #0
 800af98:	4628      	mov	r0, r5
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	b118      	cbz	r0, 800afa6 <_fflush_r+0x1a>
 800af9e:	6983      	ldr	r3, [r0, #24]
 800afa0:	b90b      	cbnz	r3, 800afa6 <_fflush_r+0x1a>
 800afa2:	f000 f887 	bl	800b0b4 <__sinit>
 800afa6:	4b14      	ldr	r3, [pc, #80]	; (800aff8 <_fflush_r+0x6c>)
 800afa8:	429c      	cmp	r4, r3
 800afaa:	d11b      	bne.n	800afe4 <_fflush_r+0x58>
 800afac:	686c      	ldr	r4, [r5, #4]
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0ef      	beq.n	800af96 <_fflush_r+0xa>
 800afb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb8:	07d0      	lsls	r0, r2, #31
 800afba:	d404      	bmi.n	800afc6 <_fflush_r+0x3a>
 800afbc:	0599      	lsls	r1, r3, #22
 800afbe:	d402      	bmi.n	800afc6 <_fflush_r+0x3a>
 800afc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afc2:	f000 f91a 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800afc6:	4628      	mov	r0, r5
 800afc8:	4621      	mov	r1, r4
 800afca:	f7ff ff59 	bl	800ae80 <__sflush_r>
 800afce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd0:	07da      	lsls	r2, r3, #31
 800afd2:	4605      	mov	r5, r0
 800afd4:	d4e0      	bmi.n	800af98 <_fflush_r+0xc>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	059b      	lsls	r3, r3, #22
 800afda:	d4dd      	bmi.n	800af98 <_fflush_r+0xc>
 800afdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afde:	f000 f90d 	bl	800b1fc <__retarget_lock_release_recursive>
 800afe2:	e7d9      	b.n	800af98 <_fflush_r+0xc>
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <_fflush_r+0x70>)
 800afe6:	429c      	cmp	r4, r3
 800afe8:	d101      	bne.n	800afee <_fflush_r+0x62>
 800afea:	68ac      	ldr	r4, [r5, #8]
 800afec:	e7df      	b.n	800afae <_fflush_r+0x22>
 800afee:	4b04      	ldr	r3, [pc, #16]	; (800b000 <_fflush_r+0x74>)
 800aff0:	429c      	cmp	r4, r3
 800aff2:	bf08      	it	eq
 800aff4:	68ec      	ldreq	r4, [r5, #12]
 800aff6:	e7da      	b.n	800afae <_fflush_r+0x22>
 800aff8:	0800d468 	.word	0x0800d468
 800affc:	0800d488 	.word	0x0800d488
 800b000:	0800d448 	.word	0x0800d448

0800b004 <std>:
 800b004:	2300      	movs	r3, #0
 800b006:	b510      	push	{r4, lr}
 800b008:	4604      	mov	r4, r0
 800b00a:	e9c0 3300 	strd	r3, r3, [r0]
 800b00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b012:	6083      	str	r3, [r0, #8]
 800b014:	8181      	strh	r1, [r0, #12]
 800b016:	6643      	str	r3, [r0, #100]	; 0x64
 800b018:	81c2      	strh	r2, [r0, #14]
 800b01a:	6183      	str	r3, [r0, #24]
 800b01c:	4619      	mov	r1, r3
 800b01e:	2208      	movs	r2, #8
 800b020:	305c      	adds	r0, #92	; 0x5c
 800b022:	f7fe fb0d 	bl	8009640 <memset>
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <std+0x38>)
 800b028:	6263      	str	r3, [r4, #36]	; 0x24
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <std+0x3c>)
 800b02c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b02e:	4b05      	ldr	r3, [pc, #20]	; (800b044 <std+0x40>)
 800b030:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b032:	4b05      	ldr	r3, [pc, #20]	; (800b048 <std+0x44>)
 800b034:	6224      	str	r4, [r4, #32]
 800b036:	6323      	str	r3, [r4, #48]	; 0x30
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	bf00      	nop
 800b03c:	0800bb85 	.word	0x0800bb85
 800b040:	0800bba7 	.word	0x0800bba7
 800b044:	0800bbdf 	.word	0x0800bbdf
 800b048:	0800bc03 	.word	0x0800bc03

0800b04c <_cleanup_r>:
 800b04c:	4901      	ldr	r1, [pc, #4]	; (800b054 <_cleanup_r+0x8>)
 800b04e:	f000 b8af 	b.w	800b1b0 <_fwalk_reent>
 800b052:	bf00      	nop
 800b054:	0800af8d 	.word	0x0800af8d

0800b058 <__sfmoreglue>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	1e4a      	subs	r2, r1, #1
 800b05c:	2568      	movs	r5, #104	; 0x68
 800b05e:	4355      	muls	r5, r2
 800b060:	460e      	mov	r6, r1
 800b062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b066:	f000 fd23 	bl	800bab0 <_malloc_r>
 800b06a:	4604      	mov	r4, r0
 800b06c:	b140      	cbz	r0, 800b080 <__sfmoreglue+0x28>
 800b06e:	2100      	movs	r1, #0
 800b070:	e9c0 1600 	strd	r1, r6, [r0]
 800b074:	300c      	adds	r0, #12
 800b076:	60a0      	str	r0, [r4, #8]
 800b078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b07c:	f7fe fae0 	bl	8009640 <memset>
 800b080:	4620      	mov	r0, r4
 800b082:	bd70      	pop	{r4, r5, r6, pc}

0800b084 <__sfp_lock_acquire>:
 800b084:	4801      	ldr	r0, [pc, #4]	; (800b08c <__sfp_lock_acquire+0x8>)
 800b086:	f000 b8b8 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800b08a:	bf00      	nop
 800b08c:	20000420 	.word	0x20000420

0800b090 <__sfp_lock_release>:
 800b090:	4801      	ldr	r0, [pc, #4]	; (800b098 <__sfp_lock_release+0x8>)
 800b092:	f000 b8b3 	b.w	800b1fc <__retarget_lock_release_recursive>
 800b096:	bf00      	nop
 800b098:	20000420 	.word	0x20000420

0800b09c <__sinit_lock_acquire>:
 800b09c:	4801      	ldr	r0, [pc, #4]	; (800b0a4 <__sinit_lock_acquire+0x8>)
 800b09e:	f000 b8ac 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	2000041b 	.word	0x2000041b

0800b0a8 <__sinit_lock_release>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	; (800b0b0 <__sinit_lock_release+0x8>)
 800b0aa:	f000 b8a7 	b.w	800b1fc <__retarget_lock_release_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	2000041b 	.word	0x2000041b

0800b0b4 <__sinit>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	f7ff fff0 	bl	800b09c <__sinit_lock_acquire>
 800b0bc:	69a3      	ldr	r3, [r4, #24]
 800b0be:	b11b      	cbz	r3, 800b0c8 <__sinit+0x14>
 800b0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c4:	f7ff bff0 	b.w	800b0a8 <__sinit_lock_release>
 800b0c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b0ce:	4b13      	ldr	r3, [pc, #76]	; (800b11c <__sinit+0x68>)
 800b0d0:	4a13      	ldr	r2, [pc, #76]	; (800b120 <__sinit+0x6c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0d6:	42a3      	cmp	r3, r4
 800b0d8:	bf04      	itt	eq
 800b0da:	2301      	moveq	r3, #1
 800b0dc:	61a3      	streq	r3, [r4, #24]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f820 	bl	800b124 <__sfp>
 800b0e4:	6060      	str	r0, [r4, #4]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 f81c 	bl	800b124 <__sfp>
 800b0ec:	60a0      	str	r0, [r4, #8]
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f818 	bl	800b124 <__sfp>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	60e0      	str	r0, [r4, #12]
 800b0f8:	2104      	movs	r1, #4
 800b0fa:	6860      	ldr	r0, [r4, #4]
 800b0fc:	f7ff ff82 	bl	800b004 <std>
 800b100:	68a0      	ldr	r0, [r4, #8]
 800b102:	2201      	movs	r2, #1
 800b104:	2109      	movs	r1, #9
 800b106:	f7ff ff7d 	bl	800b004 <std>
 800b10a:	68e0      	ldr	r0, [r4, #12]
 800b10c:	2202      	movs	r2, #2
 800b10e:	2112      	movs	r1, #18
 800b110:	f7ff ff78 	bl	800b004 <std>
 800b114:	2301      	movs	r3, #1
 800b116:	61a3      	str	r3, [r4, #24]
 800b118:	e7d2      	b.n	800b0c0 <__sinit+0xc>
 800b11a:	bf00      	nop
 800b11c:	0800d37c 	.word	0x0800d37c
 800b120:	0800b04d 	.word	0x0800b04d

0800b124 <__sfp>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	4607      	mov	r7, r0
 800b128:	f7ff ffac 	bl	800b084 <__sfp_lock_acquire>
 800b12c:	4b1e      	ldr	r3, [pc, #120]	; (800b1a8 <__sfp+0x84>)
 800b12e:	681e      	ldr	r6, [r3, #0]
 800b130:	69b3      	ldr	r3, [r6, #24]
 800b132:	b913      	cbnz	r3, 800b13a <__sfp+0x16>
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff ffbd 	bl	800b0b4 <__sinit>
 800b13a:	3648      	adds	r6, #72	; 0x48
 800b13c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b140:	3b01      	subs	r3, #1
 800b142:	d503      	bpl.n	800b14c <__sfp+0x28>
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	b30b      	cbz	r3, 800b18c <__sfp+0x68>
 800b148:	6836      	ldr	r6, [r6, #0]
 800b14a:	e7f7      	b.n	800b13c <__sfp+0x18>
 800b14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b150:	b9d5      	cbnz	r5, 800b188 <__sfp+0x64>
 800b152:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <__sfp+0x88>)
 800b154:	60e3      	str	r3, [r4, #12]
 800b156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b15a:	6665      	str	r5, [r4, #100]	; 0x64
 800b15c:	f000 f84c 	bl	800b1f8 <__retarget_lock_init_recursive>
 800b160:	f7ff ff96 	bl	800b090 <__sfp_lock_release>
 800b164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b16c:	6025      	str	r5, [r4, #0]
 800b16e:	61a5      	str	r5, [r4, #24]
 800b170:	2208      	movs	r2, #8
 800b172:	4629      	mov	r1, r5
 800b174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b178:	f7fe fa62 	bl	8009640 <memset>
 800b17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b184:	4620      	mov	r0, r4
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b188:	3468      	adds	r4, #104	; 0x68
 800b18a:	e7d9      	b.n	800b140 <__sfp+0x1c>
 800b18c:	2104      	movs	r1, #4
 800b18e:	4638      	mov	r0, r7
 800b190:	f7ff ff62 	bl	800b058 <__sfmoreglue>
 800b194:	4604      	mov	r4, r0
 800b196:	6030      	str	r0, [r6, #0]
 800b198:	2800      	cmp	r0, #0
 800b19a:	d1d5      	bne.n	800b148 <__sfp+0x24>
 800b19c:	f7ff ff78 	bl	800b090 <__sfp_lock_release>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	e7ee      	b.n	800b184 <__sfp+0x60>
 800b1a6:	bf00      	nop
 800b1a8:	0800d37c 	.word	0x0800d37c
 800b1ac:	ffff0001 	.word	0xffff0001

0800b1b0 <_fwalk_reent>:
 800b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	4688      	mov	r8, r1
 800b1b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1bc:	2700      	movs	r7, #0
 800b1be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b1c6:	d505      	bpl.n	800b1d4 <_fwalk_reent+0x24>
 800b1c8:	6824      	ldr	r4, [r4, #0]
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	d1f7      	bne.n	800b1be <_fwalk_reent+0xe>
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d4:	89ab      	ldrh	r3, [r5, #12]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d907      	bls.n	800b1ea <_fwalk_reent+0x3a>
 800b1da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	d003      	beq.n	800b1ea <_fwalk_reent+0x3a>
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	47c0      	blx	r8
 800b1e8:	4307      	orrs	r7, r0
 800b1ea:	3568      	adds	r5, #104	; 0x68
 800b1ec:	e7e9      	b.n	800b1c2 <_fwalk_reent+0x12>
	...

0800b1f0 <_localeconv_r>:
 800b1f0:	4800      	ldr	r0, [pc, #0]	; (800b1f4 <_localeconv_r+0x4>)
 800b1f2:	4770      	bx	lr
 800b1f4:	20000170 	.word	0x20000170

0800b1f8 <__retarget_lock_init_recursive>:
 800b1f8:	4770      	bx	lr

0800b1fa <__retarget_lock_acquire_recursive>:
 800b1fa:	4770      	bx	lr

0800b1fc <__retarget_lock_release_recursive>:
 800b1fc:	4770      	bx	lr

0800b1fe <__swhatbuf_r>:
 800b1fe:	b570      	push	{r4, r5, r6, lr}
 800b200:	460e      	mov	r6, r1
 800b202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b206:	2900      	cmp	r1, #0
 800b208:	b096      	sub	sp, #88	; 0x58
 800b20a:	4614      	mov	r4, r2
 800b20c:	461d      	mov	r5, r3
 800b20e:	da07      	bge.n	800b220 <__swhatbuf_r+0x22>
 800b210:	2300      	movs	r3, #0
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	89b3      	ldrh	r3, [r6, #12]
 800b216:	061a      	lsls	r2, r3, #24
 800b218:	d410      	bmi.n	800b23c <__swhatbuf_r+0x3e>
 800b21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21e:	e00e      	b.n	800b23e <__swhatbuf_r+0x40>
 800b220:	466a      	mov	r2, sp
 800b222:	f000 fd45 	bl	800bcb0 <_fstat_r>
 800b226:	2800      	cmp	r0, #0
 800b228:	dbf2      	blt.n	800b210 <__swhatbuf_r+0x12>
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b234:	425a      	negs	r2, r3
 800b236:	415a      	adcs	r2, r3
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	e7ee      	b.n	800b21a <__swhatbuf_r+0x1c>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	2000      	movs	r0, #0
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	b016      	add	sp, #88	; 0x58
 800b244:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b002      	add	sp, #8
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	ab01      	add	r3, sp, #4
 800b266:	466a      	mov	r2, sp
 800b268:	f7ff ffc9 	bl	800b1fe <__swhatbuf_r>
 800b26c:	9900      	ldr	r1, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4630      	mov	r0, r6
 800b272:	f000 fc1d 	bl	800bab0 <_malloc_r>
 800b276:	b948      	cbnz	r0, 800b28c <__smakebuf_r+0x44>
 800b278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d4ef      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b280:	f023 0303 	bic.w	r3, r3, #3
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e7e3      	b.n	800b254 <__smakebuf_r+0xc>
 800b28c:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <__smakebuf_r+0x7c>)
 800b28e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	6020      	str	r0, [r4, #0]
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	9b00      	ldr	r3, [sp, #0]
 800b29c:	6163      	str	r3, [r4, #20]
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	6120      	str	r0, [r4, #16]
 800b2a2:	b15b      	cbz	r3, 800b2bc <__smakebuf_r+0x74>
 800b2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f000 fd13 	bl	800bcd4 <_isatty_r>
 800b2ae:	b128      	cbz	r0, 800b2bc <__smakebuf_r+0x74>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	89a0      	ldrh	r0, [r4, #12]
 800b2be:	4305      	orrs	r5, r0
 800b2c0:	81a5      	strh	r5, [r4, #12]
 800b2c2:	e7cd      	b.n	800b260 <__smakebuf_r+0x18>
 800b2c4:	0800b04d 	.word	0x0800b04d

0800b2c8 <malloc>:
 800b2c8:	4b02      	ldr	r3, [pc, #8]	; (800b2d4 <malloc+0xc>)
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	f000 bbef 	b.w	800bab0 <_malloc_r>
 800b2d2:	bf00      	nop
 800b2d4:	2000001c 	.word	0x2000001c

0800b2d8 <memcpy>:
 800b2d8:	440a      	add	r2, r1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e0:	d100      	bne.n	800b2e4 <memcpy+0xc>
 800b2e2:	4770      	bx	lr
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d1f9      	bne.n	800b2e6 <memcpy+0xe>
 800b2f2:	bd10      	pop	{r4, pc}

0800b2f4 <_Balloc>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Balloc+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7ff ffe2 	bl	800b2c8 <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	6260      	str	r0, [r4, #36]	; 0x24
 800b308:	b920      	cbnz	r0, 800b314 <_Balloc+0x20>
 800b30a:	4b18      	ldr	r3, [pc, #96]	; (800b36c <_Balloc+0x78>)
 800b30c:	4818      	ldr	r0, [pc, #96]	; (800b370 <_Balloc+0x7c>)
 800b30e:	2166      	movs	r1, #102	; 0x66
 800b310:	f000 fc8e 	bl	800bc30 <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b31e:	68f3      	ldr	r3, [r6, #12]
 800b320:	b183      	cbz	r3, 800b344 <_Balloc+0x50>
 800b322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b32a:	b9b8      	cbnz	r0, 800b35c <_Balloc+0x68>
 800b32c:	2101      	movs	r1, #1
 800b32e:	fa01 f605 	lsl.w	r6, r1, r5
 800b332:	1d72      	adds	r2, r6, #5
 800b334:	0092      	lsls	r2, r2, #2
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fb5a 	bl	800b9f0 <_calloc_r>
 800b33c:	b160      	cbz	r0, 800b358 <_Balloc+0x64>
 800b33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b342:	e00e      	b.n	800b362 <_Balloc+0x6e>
 800b344:	2221      	movs	r2, #33	; 0x21
 800b346:	2104      	movs	r1, #4
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fb51 	bl	800b9f0 <_calloc_r>
 800b34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b350:	60f0      	str	r0, [r6, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e4      	bne.n	800b322 <_Balloc+0x2e>
 800b358:	2000      	movs	r0, #0
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	6802      	ldr	r2, [r0, #0]
 800b35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b362:	2300      	movs	r3, #0
 800b364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b368:	e7f7      	b.n	800b35a <_Balloc+0x66>
 800b36a:	bf00      	nop
 800b36c:	0800d3c1 	.word	0x0800d3c1
 800b370:	0800d4a8 	.word	0x0800d4a8

0800b374 <_Bfree>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	b976      	cbnz	r6, 800b39c <_Bfree+0x28>
 800b37e:	2010      	movs	r0, #16
 800b380:	f7ff ffa2 	bl	800b2c8 <malloc>
 800b384:	4602      	mov	r2, r0
 800b386:	6268      	str	r0, [r5, #36]	; 0x24
 800b388:	b920      	cbnz	r0, 800b394 <_Bfree+0x20>
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <_Bfree+0x3c>)
 800b38c:	4809      	ldr	r0, [pc, #36]	; (800b3b4 <_Bfree+0x40>)
 800b38e:	218a      	movs	r1, #138	; 0x8a
 800b390:	f000 fc4e 	bl	800bc30 <__assert_func>
 800b394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b398:	6006      	str	r6, [r0, #0]
 800b39a:	60c6      	str	r6, [r0, #12]
 800b39c:	b13c      	cbz	r4, 800b3ae <_Bfree+0x3a>
 800b39e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3a8:	6021      	str	r1, [r4, #0]
 800b3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0800d3c1 	.word	0x0800d3c1
 800b3b4:	0800d4a8 	.word	0x0800d4a8

0800b3b8 <__multadd>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	690e      	ldr	r6, [r1, #16]
 800b3be:	4607      	mov	r7, r0
 800b3c0:	4698      	mov	r8, r3
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	f101 0014 	add.w	r0, r1, #20
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	6805      	ldr	r5, [r0, #0]
 800b3cc:	b2a9      	uxth	r1, r5
 800b3ce:	fb02 8101 	mla	r1, r2, r1, r8
 800b3d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b3d6:	0c2d      	lsrs	r5, r5, #16
 800b3d8:	fb02 c505 	mla	r5, r2, r5, ip
 800b3dc:	b289      	uxth	r1, r1
 800b3de:	3301      	adds	r3, #1
 800b3e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b3e4:	429e      	cmp	r6, r3
 800b3e6:	f840 1b04 	str.w	r1, [r0], #4
 800b3ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b3ee:	dcec      	bgt.n	800b3ca <__multadd+0x12>
 800b3f0:	f1b8 0f00 	cmp.w	r8, #0
 800b3f4:	d022      	beq.n	800b43c <__multadd+0x84>
 800b3f6:	68a3      	ldr	r3, [r4, #8]
 800b3f8:	42b3      	cmp	r3, r6
 800b3fa:	dc19      	bgt.n	800b430 <__multadd+0x78>
 800b3fc:	6861      	ldr	r1, [r4, #4]
 800b3fe:	4638      	mov	r0, r7
 800b400:	3101      	adds	r1, #1
 800b402:	f7ff ff77 	bl	800b2f4 <_Balloc>
 800b406:	4605      	mov	r5, r0
 800b408:	b928      	cbnz	r0, 800b416 <__multadd+0x5e>
 800b40a:	4602      	mov	r2, r0
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <__multadd+0x8c>)
 800b40e:	480e      	ldr	r0, [pc, #56]	; (800b448 <__multadd+0x90>)
 800b410:	21b5      	movs	r1, #181	; 0xb5
 800b412:	f000 fc0d 	bl	800bc30 <__assert_func>
 800b416:	6922      	ldr	r2, [r4, #16]
 800b418:	3202      	adds	r2, #2
 800b41a:	f104 010c 	add.w	r1, r4, #12
 800b41e:	0092      	lsls	r2, r2, #2
 800b420:	300c      	adds	r0, #12
 800b422:	f7ff ff59 	bl	800b2d8 <memcpy>
 800b426:	4621      	mov	r1, r4
 800b428:	4638      	mov	r0, r7
 800b42a:	f7ff ffa3 	bl	800b374 <_Bfree>
 800b42e:	462c      	mov	r4, r5
 800b430:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b434:	3601      	adds	r6, #1
 800b436:	f8c3 8014 	str.w	r8, [r3, #20]
 800b43a:	6126      	str	r6, [r4, #16]
 800b43c:	4620      	mov	r0, r4
 800b43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b442:	bf00      	nop
 800b444:	0800d437 	.word	0x0800d437
 800b448:	0800d4a8 	.word	0x0800d4a8

0800b44c <__hi0bits>:
 800b44c:	0c03      	lsrs	r3, r0, #16
 800b44e:	041b      	lsls	r3, r3, #16
 800b450:	b9d3      	cbnz	r3, 800b488 <__hi0bits+0x3c>
 800b452:	0400      	lsls	r0, r0, #16
 800b454:	2310      	movs	r3, #16
 800b456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b45a:	bf04      	itt	eq
 800b45c:	0200      	lsleq	r0, r0, #8
 800b45e:	3308      	addeq	r3, #8
 800b460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b464:	bf04      	itt	eq
 800b466:	0100      	lsleq	r0, r0, #4
 800b468:	3304      	addeq	r3, #4
 800b46a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b46e:	bf04      	itt	eq
 800b470:	0080      	lsleq	r0, r0, #2
 800b472:	3302      	addeq	r3, #2
 800b474:	2800      	cmp	r0, #0
 800b476:	db05      	blt.n	800b484 <__hi0bits+0x38>
 800b478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b47c:	f103 0301 	add.w	r3, r3, #1
 800b480:	bf08      	it	eq
 800b482:	2320      	moveq	r3, #32
 800b484:	4618      	mov	r0, r3
 800b486:	4770      	bx	lr
 800b488:	2300      	movs	r3, #0
 800b48a:	e7e4      	b.n	800b456 <__hi0bits+0xa>

0800b48c <__lo0bits>:
 800b48c:	6803      	ldr	r3, [r0, #0]
 800b48e:	f013 0207 	ands.w	r2, r3, #7
 800b492:	4601      	mov	r1, r0
 800b494:	d00b      	beq.n	800b4ae <__lo0bits+0x22>
 800b496:	07da      	lsls	r2, r3, #31
 800b498:	d424      	bmi.n	800b4e4 <__lo0bits+0x58>
 800b49a:	0798      	lsls	r0, r3, #30
 800b49c:	bf49      	itett	mi
 800b49e:	085b      	lsrmi	r3, r3, #1
 800b4a0:	089b      	lsrpl	r3, r3, #2
 800b4a2:	2001      	movmi	r0, #1
 800b4a4:	600b      	strmi	r3, [r1, #0]
 800b4a6:	bf5c      	itt	pl
 800b4a8:	600b      	strpl	r3, [r1, #0]
 800b4aa:	2002      	movpl	r0, #2
 800b4ac:	4770      	bx	lr
 800b4ae:	b298      	uxth	r0, r3
 800b4b0:	b9b0      	cbnz	r0, 800b4e0 <__lo0bits+0x54>
 800b4b2:	0c1b      	lsrs	r3, r3, #16
 800b4b4:	2010      	movs	r0, #16
 800b4b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b4ba:	bf04      	itt	eq
 800b4bc:	0a1b      	lsreq	r3, r3, #8
 800b4be:	3008      	addeq	r0, #8
 800b4c0:	071a      	lsls	r2, r3, #28
 800b4c2:	bf04      	itt	eq
 800b4c4:	091b      	lsreq	r3, r3, #4
 800b4c6:	3004      	addeq	r0, #4
 800b4c8:	079a      	lsls	r2, r3, #30
 800b4ca:	bf04      	itt	eq
 800b4cc:	089b      	lsreq	r3, r3, #2
 800b4ce:	3002      	addeq	r0, #2
 800b4d0:	07da      	lsls	r2, r3, #31
 800b4d2:	d403      	bmi.n	800b4dc <__lo0bits+0x50>
 800b4d4:	085b      	lsrs	r3, r3, #1
 800b4d6:	f100 0001 	add.w	r0, r0, #1
 800b4da:	d005      	beq.n	800b4e8 <__lo0bits+0x5c>
 800b4dc:	600b      	str	r3, [r1, #0]
 800b4de:	4770      	bx	lr
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	e7e8      	b.n	800b4b6 <__lo0bits+0x2a>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	4770      	bx	lr
 800b4e8:	2020      	movs	r0, #32
 800b4ea:	4770      	bx	lr

0800b4ec <__i2b>:
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	f7ff feff 	bl	800b2f4 <_Balloc>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	b928      	cbnz	r0, 800b506 <__i2b+0x1a>
 800b4fa:	4b05      	ldr	r3, [pc, #20]	; (800b510 <__i2b+0x24>)
 800b4fc:	4805      	ldr	r0, [pc, #20]	; (800b514 <__i2b+0x28>)
 800b4fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b502:	f000 fb95 	bl	800bc30 <__assert_func>
 800b506:	2301      	movs	r3, #1
 800b508:	6144      	str	r4, [r0, #20]
 800b50a:	6103      	str	r3, [r0, #16]
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	bf00      	nop
 800b510:	0800d437 	.word	0x0800d437
 800b514:	0800d4a8 	.word	0x0800d4a8

0800b518 <__multiply>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4614      	mov	r4, r2
 800b51e:	690a      	ldr	r2, [r1, #16]
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	429a      	cmp	r2, r3
 800b524:	bfb8      	it	lt
 800b526:	460b      	movlt	r3, r1
 800b528:	460d      	mov	r5, r1
 800b52a:	bfbc      	itt	lt
 800b52c:	4625      	movlt	r5, r4
 800b52e:	461c      	movlt	r4, r3
 800b530:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b534:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b538:	68ab      	ldr	r3, [r5, #8]
 800b53a:	6869      	ldr	r1, [r5, #4]
 800b53c:	eb0a 0709 	add.w	r7, sl, r9
 800b540:	42bb      	cmp	r3, r7
 800b542:	b085      	sub	sp, #20
 800b544:	bfb8      	it	lt
 800b546:	3101      	addlt	r1, #1
 800b548:	f7ff fed4 	bl	800b2f4 <_Balloc>
 800b54c:	b930      	cbnz	r0, 800b55c <__multiply+0x44>
 800b54e:	4602      	mov	r2, r0
 800b550:	4b42      	ldr	r3, [pc, #264]	; (800b65c <__multiply+0x144>)
 800b552:	4843      	ldr	r0, [pc, #268]	; (800b660 <__multiply+0x148>)
 800b554:	f240 115d 	movw	r1, #349	; 0x15d
 800b558:	f000 fb6a 	bl	800bc30 <__assert_func>
 800b55c:	f100 0614 	add.w	r6, r0, #20
 800b560:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b564:	4633      	mov	r3, r6
 800b566:	2200      	movs	r2, #0
 800b568:	4543      	cmp	r3, r8
 800b56a:	d31e      	bcc.n	800b5aa <__multiply+0x92>
 800b56c:	f105 0c14 	add.w	ip, r5, #20
 800b570:	f104 0314 	add.w	r3, r4, #20
 800b574:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b578:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b57c:	9202      	str	r2, [sp, #8]
 800b57e:	ebac 0205 	sub.w	r2, ip, r5
 800b582:	3a15      	subs	r2, #21
 800b584:	f022 0203 	bic.w	r2, r2, #3
 800b588:	3204      	adds	r2, #4
 800b58a:	f105 0115 	add.w	r1, r5, #21
 800b58e:	458c      	cmp	ip, r1
 800b590:	bf38      	it	cc
 800b592:	2204      	movcc	r2, #4
 800b594:	9201      	str	r2, [sp, #4]
 800b596:	9a02      	ldr	r2, [sp, #8]
 800b598:	9303      	str	r3, [sp, #12]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d808      	bhi.n	800b5b0 <__multiply+0x98>
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	dc55      	bgt.n	800b64e <__multiply+0x136>
 800b5a2:	6107      	str	r7, [r0, #16]
 800b5a4:	b005      	add	sp, #20
 800b5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5aa:	f843 2b04 	str.w	r2, [r3], #4
 800b5ae:	e7db      	b.n	800b568 <__multiply+0x50>
 800b5b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5b4:	f1ba 0f00 	cmp.w	sl, #0
 800b5b8:	d020      	beq.n	800b5fc <__multiply+0xe4>
 800b5ba:	f105 0e14 	add.w	lr, r5, #20
 800b5be:	46b1      	mov	r9, r6
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b5c6:	f8d9 b000 	ldr.w	fp, [r9]
 800b5ca:	b2a1      	uxth	r1, r4
 800b5cc:	fa1f fb8b 	uxth.w	fp, fp
 800b5d0:	fb0a b101 	mla	r1, sl, r1, fp
 800b5d4:	4411      	add	r1, r2
 800b5d6:	f8d9 2000 	ldr.w	r2, [r9]
 800b5da:	0c24      	lsrs	r4, r4, #16
 800b5dc:	0c12      	lsrs	r2, r2, #16
 800b5de:	fb0a 2404 	mla	r4, sl, r4, r2
 800b5e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b5e6:	b289      	uxth	r1, r1
 800b5e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b5ec:	45f4      	cmp	ip, lr
 800b5ee:	f849 1b04 	str.w	r1, [r9], #4
 800b5f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b5f6:	d8e4      	bhi.n	800b5c2 <__multiply+0xaa>
 800b5f8:	9901      	ldr	r1, [sp, #4]
 800b5fa:	5072      	str	r2, [r6, r1]
 800b5fc:	9a03      	ldr	r2, [sp, #12]
 800b5fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b602:	3304      	adds	r3, #4
 800b604:	f1b9 0f00 	cmp.w	r9, #0
 800b608:	d01f      	beq.n	800b64a <__multiply+0x132>
 800b60a:	6834      	ldr	r4, [r6, #0]
 800b60c:	f105 0114 	add.w	r1, r5, #20
 800b610:	46b6      	mov	lr, r6
 800b612:	f04f 0a00 	mov.w	sl, #0
 800b616:	880a      	ldrh	r2, [r1, #0]
 800b618:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b61c:	fb09 b202 	mla	r2, r9, r2, fp
 800b620:	4492      	add	sl, r2
 800b622:	b2a4      	uxth	r4, r4
 800b624:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b628:	f84e 4b04 	str.w	r4, [lr], #4
 800b62c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b630:	f8be 2000 	ldrh.w	r2, [lr]
 800b634:	0c24      	lsrs	r4, r4, #16
 800b636:	fb09 2404 	mla	r4, r9, r4, r2
 800b63a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b63e:	458c      	cmp	ip, r1
 800b640:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b644:	d8e7      	bhi.n	800b616 <__multiply+0xfe>
 800b646:	9a01      	ldr	r2, [sp, #4]
 800b648:	50b4      	str	r4, [r6, r2]
 800b64a:	3604      	adds	r6, #4
 800b64c:	e7a3      	b.n	800b596 <__multiply+0x7e>
 800b64e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1a5      	bne.n	800b5a2 <__multiply+0x8a>
 800b656:	3f01      	subs	r7, #1
 800b658:	e7a1      	b.n	800b59e <__multiply+0x86>
 800b65a:	bf00      	nop
 800b65c:	0800d437 	.word	0x0800d437
 800b660:	0800d4a8 	.word	0x0800d4a8

0800b664 <__pow5mult>:
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	4615      	mov	r5, r2
 800b66a:	f012 0203 	ands.w	r2, r2, #3
 800b66e:	4606      	mov	r6, r0
 800b670:	460f      	mov	r7, r1
 800b672:	d007      	beq.n	800b684 <__pow5mult+0x20>
 800b674:	4c25      	ldr	r4, [pc, #148]	; (800b70c <__pow5mult+0xa8>)
 800b676:	3a01      	subs	r2, #1
 800b678:	2300      	movs	r3, #0
 800b67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b67e:	f7ff fe9b 	bl	800b3b8 <__multadd>
 800b682:	4607      	mov	r7, r0
 800b684:	10ad      	asrs	r5, r5, #2
 800b686:	d03d      	beq.n	800b704 <__pow5mult+0xa0>
 800b688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b68a:	b97c      	cbnz	r4, 800b6ac <__pow5mult+0x48>
 800b68c:	2010      	movs	r0, #16
 800b68e:	f7ff fe1b 	bl	800b2c8 <malloc>
 800b692:	4602      	mov	r2, r0
 800b694:	6270      	str	r0, [r6, #36]	; 0x24
 800b696:	b928      	cbnz	r0, 800b6a4 <__pow5mult+0x40>
 800b698:	4b1d      	ldr	r3, [pc, #116]	; (800b710 <__pow5mult+0xac>)
 800b69a:	481e      	ldr	r0, [pc, #120]	; (800b714 <__pow5mult+0xb0>)
 800b69c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6a0:	f000 fac6 	bl	800bc30 <__assert_func>
 800b6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6a8:	6004      	str	r4, [r0, #0]
 800b6aa:	60c4      	str	r4, [r0, #12]
 800b6ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6b4:	b94c      	cbnz	r4, 800b6ca <__pow5mult+0x66>
 800b6b6:	f240 2171 	movw	r1, #625	; 0x271
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ff16 	bl	800b4ec <__i2b>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	f04f 0900 	mov.w	r9, #0
 800b6ce:	07eb      	lsls	r3, r5, #31
 800b6d0:	d50a      	bpl.n	800b6e8 <__pow5mult+0x84>
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ff1e 	bl	800b518 <__multiply>
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff fe47 	bl	800b374 <_Bfree>
 800b6e6:	4647      	mov	r7, r8
 800b6e8:	106d      	asrs	r5, r5, #1
 800b6ea:	d00b      	beq.n	800b704 <__pow5mult+0xa0>
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	b938      	cbnz	r0, 800b700 <__pow5mult+0x9c>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff ff0f 	bl	800b518 <__multiply>
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	f8c0 9000 	str.w	r9, [r0]
 800b700:	4604      	mov	r4, r0
 800b702:	e7e4      	b.n	800b6ce <__pow5mult+0x6a>
 800b704:	4638      	mov	r0, r7
 800b706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70a:	bf00      	nop
 800b70c:	0800d5f8 	.word	0x0800d5f8
 800b710:	0800d3c1 	.word	0x0800d3c1
 800b714:	0800d4a8 	.word	0x0800d4a8

0800b718 <__lshift>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	460c      	mov	r4, r1
 800b71e:	6849      	ldr	r1, [r1, #4]
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	4607      	mov	r7, r0
 800b72a:	4691      	mov	r9, r2
 800b72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b730:	f108 0601 	add.w	r6, r8, #1
 800b734:	42b3      	cmp	r3, r6
 800b736:	db0b      	blt.n	800b750 <__lshift+0x38>
 800b738:	4638      	mov	r0, r7
 800b73a:	f7ff fddb 	bl	800b2f4 <_Balloc>
 800b73e:	4605      	mov	r5, r0
 800b740:	b948      	cbnz	r0, 800b756 <__lshift+0x3e>
 800b742:	4602      	mov	r2, r0
 800b744:	4b28      	ldr	r3, [pc, #160]	; (800b7e8 <__lshift+0xd0>)
 800b746:	4829      	ldr	r0, [pc, #164]	; (800b7ec <__lshift+0xd4>)
 800b748:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b74c:	f000 fa70 	bl	800bc30 <__assert_func>
 800b750:	3101      	adds	r1, #1
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	e7ee      	b.n	800b734 <__lshift+0x1c>
 800b756:	2300      	movs	r3, #0
 800b758:	f100 0114 	add.w	r1, r0, #20
 800b75c:	f100 0210 	add.w	r2, r0, #16
 800b760:	4618      	mov	r0, r3
 800b762:	4553      	cmp	r3, sl
 800b764:	db33      	blt.n	800b7ce <__lshift+0xb6>
 800b766:	6920      	ldr	r0, [r4, #16]
 800b768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b76c:	f104 0314 	add.w	r3, r4, #20
 800b770:	f019 091f 	ands.w	r9, r9, #31
 800b774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b77c:	d02b      	beq.n	800b7d6 <__lshift+0xbe>
 800b77e:	f1c9 0e20 	rsb	lr, r9, #32
 800b782:	468a      	mov	sl, r1
 800b784:	2200      	movs	r2, #0
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	fa00 f009 	lsl.w	r0, r0, r9
 800b78c:	4302      	orrs	r2, r0
 800b78e:	f84a 2b04 	str.w	r2, [sl], #4
 800b792:	f853 2b04 	ldr.w	r2, [r3], #4
 800b796:	459c      	cmp	ip, r3
 800b798:	fa22 f20e 	lsr.w	r2, r2, lr
 800b79c:	d8f3      	bhi.n	800b786 <__lshift+0x6e>
 800b79e:	ebac 0304 	sub.w	r3, ip, r4
 800b7a2:	3b15      	subs	r3, #21
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	f104 0015 	add.w	r0, r4, #21
 800b7ae:	4584      	cmp	ip, r0
 800b7b0:	bf38      	it	cc
 800b7b2:	2304      	movcc	r3, #4
 800b7b4:	50ca      	str	r2, [r1, r3]
 800b7b6:	b10a      	cbz	r2, 800b7bc <__lshift+0xa4>
 800b7b8:	f108 0602 	add.w	r6, r8, #2
 800b7bc:	3e01      	subs	r6, #1
 800b7be:	4638      	mov	r0, r7
 800b7c0:	612e      	str	r6, [r5, #16]
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	f7ff fdd6 	bl	800b374 <_Bfree>
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	e7c5      	b.n	800b762 <__lshift+0x4a>
 800b7d6:	3904      	subs	r1, #4
 800b7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7e0:	459c      	cmp	ip, r3
 800b7e2:	d8f9      	bhi.n	800b7d8 <__lshift+0xc0>
 800b7e4:	e7ea      	b.n	800b7bc <__lshift+0xa4>
 800b7e6:	bf00      	nop
 800b7e8:	0800d437 	.word	0x0800d437
 800b7ec:	0800d4a8 	.word	0x0800d4a8

0800b7f0 <__mcmp>:
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	6902      	ldr	r2, [r0, #16]
 800b7f4:	690c      	ldr	r4, [r1, #16]
 800b7f6:	1b12      	subs	r2, r2, r4
 800b7f8:	d10e      	bne.n	800b818 <__mcmp+0x28>
 800b7fa:	f100 0314 	add.w	r3, r0, #20
 800b7fe:	3114      	adds	r1, #20
 800b800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b80c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b810:	42a5      	cmp	r5, r4
 800b812:	d003      	beq.n	800b81c <__mcmp+0x2c>
 800b814:	d305      	bcc.n	800b822 <__mcmp+0x32>
 800b816:	2201      	movs	r2, #1
 800b818:	4610      	mov	r0, r2
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	4283      	cmp	r3, r0
 800b81e:	d3f3      	bcc.n	800b808 <__mcmp+0x18>
 800b820:	e7fa      	b.n	800b818 <__mcmp+0x28>
 800b822:	f04f 32ff 	mov.w	r2, #4294967295
 800b826:	e7f7      	b.n	800b818 <__mcmp+0x28>

0800b828 <__mdiff>:
 800b828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	4606      	mov	r6, r0
 800b830:	4611      	mov	r1, r2
 800b832:	4620      	mov	r0, r4
 800b834:	4617      	mov	r7, r2
 800b836:	f7ff ffdb 	bl	800b7f0 <__mcmp>
 800b83a:	1e05      	subs	r5, r0, #0
 800b83c:	d110      	bne.n	800b860 <__mdiff+0x38>
 800b83e:	4629      	mov	r1, r5
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff fd57 	bl	800b2f4 <_Balloc>
 800b846:	b930      	cbnz	r0, 800b856 <__mdiff+0x2e>
 800b848:	4b39      	ldr	r3, [pc, #228]	; (800b930 <__mdiff+0x108>)
 800b84a:	4602      	mov	r2, r0
 800b84c:	f240 2132 	movw	r1, #562	; 0x232
 800b850:	4838      	ldr	r0, [pc, #224]	; (800b934 <__mdiff+0x10c>)
 800b852:	f000 f9ed 	bl	800bc30 <__assert_func>
 800b856:	2301      	movs	r3, #1
 800b858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b860:	bfa4      	itt	ge
 800b862:	463b      	movge	r3, r7
 800b864:	4627      	movge	r7, r4
 800b866:	4630      	mov	r0, r6
 800b868:	6879      	ldr	r1, [r7, #4]
 800b86a:	bfa6      	itte	ge
 800b86c:	461c      	movge	r4, r3
 800b86e:	2500      	movge	r5, #0
 800b870:	2501      	movlt	r5, #1
 800b872:	f7ff fd3f 	bl	800b2f4 <_Balloc>
 800b876:	b920      	cbnz	r0, 800b882 <__mdiff+0x5a>
 800b878:	4b2d      	ldr	r3, [pc, #180]	; (800b930 <__mdiff+0x108>)
 800b87a:	4602      	mov	r2, r0
 800b87c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b880:	e7e6      	b.n	800b850 <__mdiff+0x28>
 800b882:	693e      	ldr	r6, [r7, #16]
 800b884:	60c5      	str	r5, [r0, #12]
 800b886:	6925      	ldr	r5, [r4, #16]
 800b888:	f107 0114 	add.w	r1, r7, #20
 800b88c:	f104 0914 	add.w	r9, r4, #20
 800b890:	f100 0e14 	add.w	lr, r0, #20
 800b894:	f107 0210 	add.w	r2, r7, #16
 800b898:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b89c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b8a0:	46f2      	mov	sl, lr
 800b8a2:	2700      	movs	r7, #0
 800b8a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8ac:	fa1f f883 	uxth.w	r8, r3
 800b8b0:	fa17 f78b 	uxtah	r7, r7, fp
 800b8b4:	0c1b      	lsrs	r3, r3, #16
 800b8b6:	eba7 0808 	sub.w	r8, r7, r8
 800b8ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8c2:	fa1f f888 	uxth.w	r8, r8
 800b8c6:	141f      	asrs	r7, r3, #16
 800b8c8:	454d      	cmp	r5, r9
 800b8ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b8d2:	d8e7      	bhi.n	800b8a4 <__mdiff+0x7c>
 800b8d4:	1b2b      	subs	r3, r5, r4
 800b8d6:	3b15      	subs	r3, #21
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	3304      	adds	r3, #4
 800b8de:	3415      	adds	r4, #21
 800b8e0:	42a5      	cmp	r5, r4
 800b8e2:	bf38      	it	cc
 800b8e4:	2304      	movcc	r3, #4
 800b8e6:	4419      	add	r1, r3
 800b8e8:	4473      	add	r3, lr
 800b8ea:	469e      	mov	lr, r3
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	4565      	cmp	r5, ip
 800b8f0:	d30e      	bcc.n	800b910 <__mdiff+0xe8>
 800b8f2:	f10c 0203 	add.w	r2, ip, #3
 800b8f6:	1a52      	subs	r2, r2, r1
 800b8f8:	f022 0203 	bic.w	r2, r2, #3
 800b8fc:	3903      	subs	r1, #3
 800b8fe:	458c      	cmp	ip, r1
 800b900:	bf38      	it	cc
 800b902:	2200      	movcc	r2, #0
 800b904:	441a      	add	r2, r3
 800b906:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b90a:	b17b      	cbz	r3, 800b92c <__mdiff+0x104>
 800b90c:	6106      	str	r6, [r0, #16]
 800b90e:	e7a5      	b.n	800b85c <__mdiff+0x34>
 800b910:	f855 8b04 	ldr.w	r8, [r5], #4
 800b914:	fa17 f488 	uxtah	r4, r7, r8
 800b918:	1422      	asrs	r2, r4, #16
 800b91a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b91e:	b2a4      	uxth	r4, r4
 800b920:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b924:	f84e 4b04 	str.w	r4, [lr], #4
 800b928:	1417      	asrs	r7, r2, #16
 800b92a:	e7e0      	b.n	800b8ee <__mdiff+0xc6>
 800b92c:	3e01      	subs	r6, #1
 800b92e:	e7ea      	b.n	800b906 <__mdiff+0xde>
 800b930:	0800d437 	.word	0x0800d437
 800b934:	0800d4a8 	.word	0x0800d4a8

0800b938 <__d2b>:
 800b938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b93c:	4689      	mov	r9, r1
 800b93e:	2101      	movs	r1, #1
 800b940:	ec57 6b10 	vmov	r6, r7, d0
 800b944:	4690      	mov	r8, r2
 800b946:	f7ff fcd5 	bl	800b2f4 <_Balloc>
 800b94a:	4604      	mov	r4, r0
 800b94c:	b930      	cbnz	r0, 800b95c <__d2b+0x24>
 800b94e:	4602      	mov	r2, r0
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <__d2b+0xb0>)
 800b952:	4826      	ldr	r0, [pc, #152]	; (800b9ec <__d2b+0xb4>)
 800b954:	f240 310a 	movw	r1, #778	; 0x30a
 800b958:	f000 f96a 	bl	800bc30 <__assert_func>
 800b95c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b964:	bb35      	cbnz	r5, 800b9b4 <__d2b+0x7c>
 800b966:	2e00      	cmp	r6, #0
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	d028      	beq.n	800b9be <__d2b+0x86>
 800b96c:	4668      	mov	r0, sp
 800b96e:	9600      	str	r6, [sp, #0]
 800b970:	f7ff fd8c 	bl	800b48c <__lo0bits>
 800b974:	9900      	ldr	r1, [sp, #0]
 800b976:	b300      	cbz	r0, 800b9ba <__d2b+0x82>
 800b978:	9a01      	ldr	r2, [sp, #4]
 800b97a:	f1c0 0320 	rsb	r3, r0, #32
 800b97e:	fa02 f303 	lsl.w	r3, r2, r3
 800b982:	430b      	orrs	r3, r1
 800b984:	40c2      	lsrs	r2, r0
 800b986:	6163      	str	r3, [r4, #20]
 800b988:	9201      	str	r2, [sp, #4]
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	61a3      	str	r3, [r4, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bf14      	ite	ne
 800b992:	2202      	movne	r2, #2
 800b994:	2201      	moveq	r2, #1
 800b996:	6122      	str	r2, [r4, #16]
 800b998:	b1d5      	cbz	r5, 800b9d0 <__d2b+0x98>
 800b99a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b99e:	4405      	add	r5, r0
 800b9a0:	f8c9 5000 	str.w	r5, [r9]
 800b9a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9a8:	f8c8 0000 	str.w	r0, [r8]
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	b003      	add	sp, #12
 800b9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9b8:	e7d5      	b.n	800b966 <__d2b+0x2e>
 800b9ba:	6161      	str	r1, [r4, #20]
 800b9bc:	e7e5      	b.n	800b98a <__d2b+0x52>
 800b9be:	a801      	add	r0, sp, #4
 800b9c0:	f7ff fd64 	bl	800b48c <__lo0bits>
 800b9c4:	9b01      	ldr	r3, [sp, #4]
 800b9c6:	6163      	str	r3, [r4, #20]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	6122      	str	r2, [r4, #16]
 800b9cc:	3020      	adds	r0, #32
 800b9ce:	e7e3      	b.n	800b998 <__d2b+0x60>
 800b9d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9d8:	f8c9 0000 	str.w	r0, [r9]
 800b9dc:	6918      	ldr	r0, [r3, #16]
 800b9de:	f7ff fd35 	bl	800b44c <__hi0bits>
 800b9e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9e6:	e7df      	b.n	800b9a8 <__d2b+0x70>
 800b9e8:	0800d437 	.word	0x0800d437
 800b9ec:	0800d4a8 	.word	0x0800d4a8

0800b9f0 <_calloc_r>:
 800b9f0:	b513      	push	{r0, r1, r4, lr}
 800b9f2:	434a      	muls	r2, r1
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	9201      	str	r2, [sp, #4]
 800b9f8:	f000 f85a 	bl	800bab0 <_malloc_r>
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	b118      	cbz	r0, 800ba08 <_calloc_r+0x18>
 800ba00:	9a01      	ldr	r2, [sp, #4]
 800ba02:	2100      	movs	r1, #0
 800ba04:	f7fd fe1c 	bl	8009640 <memset>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	b002      	add	sp, #8
 800ba0c:	bd10      	pop	{r4, pc}
	...

0800ba10 <_free_r>:
 800ba10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba12:	2900      	cmp	r1, #0
 800ba14:	d048      	beq.n	800baa8 <_free_r+0x98>
 800ba16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1a:	9001      	str	r0, [sp, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba22:	bfb8      	it	lt
 800ba24:	18e4      	addlt	r4, r4, r3
 800ba26:	f000 f989 	bl	800bd3c <__malloc_lock>
 800ba2a:	4a20      	ldr	r2, [pc, #128]	; (800baac <_free_r+0x9c>)
 800ba2c:	9801      	ldr	r0, [sp, #4]
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	4615      	mov	r5, r2
 800ba32:	b933      	cbnz	r3, 800ba42 <_free_r+0x32>
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	6014      	str	r4, [r2, #0]
 800ba38:	b003      	add	sp, #12
 800ba3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba3e:	f000 b983 	b.w	800bd48 <__malloc_unlock>
 800ba42:	42a3      	cmp	r3, r4
 800ba44:	d90b      	bls.n	800ba5e <_free_r+0x4e>
 800ba46:	6821      	ldr	r1, [r4, #0]
 800ba48:	1862      	adds	r2, r4, r1
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bf04      	itt	eq
 800ba4e:	681a      	ldreq	r2, [r3, #0]
 800ba50:	685b      	ldreq	r3, [r3, #4]
 800ba52:	6063      	str	r3, [r4, #4]
 800ba54:	bf04      	itt	eq
 800ba56:	1852      	addeq	r2, r2, r1
 800ba58:	6022      	streq	r2, [r4, #0]
 800ba5a:	602c      	str	r4, [r5, #0]
 800ba5c:	e7ec      	b.n	800ba38 <_free_r+0x28>
 800ba5e:	461a      	mov	r2, r3
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	b10b      	cbz	r3, 800ba68 <_free_r+0x58>
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	d9fa      	bls.n	800ba5e <_free_r+0x4e>
 800ba68:	6811      	ldr	r1, [r2, #0]
 800ba6a:	1855      	adds	r5, r2, r1
 800ba6c:	42a5      	cmp	r5, r4
 800ba6e:	d10b      	bne.n	800ba88 <_free_r+0x78>
 800ba70:	6824      	ldr	r4, [r4, #0]
 800ba72:	4421      	add	r1, r4
 800ba74:	1854      	adds	r4, r2, r1
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	6011      	str	r1, [r2, #0]
 800ba7a:	d1dd      	bne.n	800ba38 <_free_r+0x28>
 800ba7c:	681c      	ldr	r4, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	6053      	str	r3, [r2, #4]
 800ba82:	4421      	add	r1, r4
 800ba84:	6011      	str	r1, [r2, #0]
 800ba86:	e7d7      	b.n	800ba38 <_free_r+0x28>
 800ba88:	d902      	bls.n	800ba90 <_free_r+0x80>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	6003      	str	r3, [r0, #0]
 800ba8e:	e7d3      	b.n	800ba38 <_free_r+0x28>
 800ba90:	6825      	ldr	r5, [r4, #0]
 800ba92:	1961      	adds	r1, r4, r5
 800ba94:	428b      	cmp	r3, r1
 800ba96:	bf04      	itt	eq
 800ba98:	6819      	ldreq	r1, [r3, #0]
 800ba9a:	685b      	ldreq	r3, [r3, #4]
 800ba9c:	6063      	str	r3, [r4, #4]
 800ba9e:	bf04      	itt	eq
 800baa0:	1949      	addeq	r1, r1, r5
 800baa2:	6021      	streq	r1, [r4, #0]
 800baa4:	6054      	str	r4, [r2, #4]
 800baa6:	e7c7      	b.n	800ba38 <_free_r+0x28>
 800baa8:	b003      	add	sp, #12
 800baaa:	bd30      	pop	{r4, r5, pc}
 800baac:	20000218 	.word	0x20000218

0800bab0 <_malloc_r>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	1ccd      	adds	r5, r1, #3
 800bab4:	f025 0503 	bic.w	r5, r5, #3
 800bab8:	3508      	adds	r5, #8
 800baba:	2d0c      	cmp	r5, #12
 800babc:	bf38      	it	cc
 800babe:	250c      	movcc	r5, #12
 800bac0:	2d00      	cmp	r5, #0
 800bac2:	4606      	mov	r6, r0
 800bac4:	db01      	blt.n	800baca <_malloc_r+0x1a>
 800bac6:	42a9      	cmp	r1, r5
 800bac8:	d903      	bls.n	800bad2 <_malloc_r+0x22>
 800baca:	230c      	movs	r3, #12
 800bacc:	6033      	str	r3, [r6, #0]
 800bace:	2000      	movs	r0, #0
 800bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad2:	f000 f933 	bl	800bd3c <__malloc_lock>
 800bad6:	4921      	ldr	r1, [pc, #132]	; (800bb5c <_malloc_r+0xac>)
 800bad8:	680a      	ldr	r2, [r1, #0]
 800bada:	4614      	mov	r4, r2
 800badc:	b99c      	cbnz	r4, 800bb06 <_malloc_r+0x56>
 800bade:	4f20      	ldr	r7, [pc, #128]	; (800bb60 <_malloc_r+0xb0>)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	b923      	cbnz	r3, 800baee <_malloc_r+0x3e>
 800bae4:	4621      	mov	r1, r4
 800bae6:	4630      	mov	r0, r6
 800bae8:	f000 f83c 	bl	800bb64 <_sbrk_r>
 800baec:	6038      	str	r0, [r7, #0]
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 f837 	bl	800bb64 <_sbrk_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d123      	bne.n	800bb42 <_malloc_r+0x92>
 800bafa:	230c      	movs	r3, #12
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f922 	bl	800bd48 <__malloc_unlock>
 800bb04:	e7e3      	b.n	800bace <_malloc_r+0x1e>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	1b5b      	subs	r3, r3, r5
 800bb0a:	d417      	bmi.n	800bb3c <_malloc_r+0x8c>
 800bb0c:	2b0b      	cmp	r3, #11
 800bb0e:	d903      	bls.n	800bb18 <_malloc_r+0x68>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	441c      	add	r4, r3
 800bb14:	6025      	str	r5, [r4, #0]
 800bb16:	e004      	b.n	800bb22 <_malloc_r+0x72>
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	42a2      	cmp	r2, r4
 800bb1c:	bf0c      	ite	eq
 800bb1e:	600b      	streq	r3, [r1, #0]
 800bb20:	6053      	strne	r3, [r2, #4]
 800bb22:	4630      	mov	r0, r6
 800bb24:	f000 f910 	bl	800bd48 <__malloc_unlock>
 800bb28:	f104 000b 	add.w	r0, r4, #11
 800bb2c:	1d23      	adds	r3, r4, #4
 800bb2e:	f020 0007 	bic.w	r0, r0, #7
 800bb32:	1ac2      	subs	r2, r0, r3
 800bb34:	d0cc      	beq.n	800bad0 <_malloc_r+0x20>
 800bb36:	1a1b      	subs	r3, r3, r0
 800bb38:	50a3      	str	r3, [r4, r2]
 800bb3a:	e7c9      	b.n	800bad0 <_malloc_r+0x20>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	6864      	ldr	r4, [r4, #4]
 800bb40:	e7cc      	b.n	800badc <_malloc_r+0x2c>
 800bb42:	1cc4      	adds	r4, r0, #3
 800bb44:	f024 0403 	bic.w	r4, r4, #3
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d0e3      	beq.n	800bb14 <_malloc_r+0x64>
 800bb4c:	1a21      	subs	r1, r4, r0
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f000 f808 	bl	800bb64 <_sbrk_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d1dd      	bne.n	800bb14 <_malloc_r+0x64>
 800bb58:	e7cf      	b.n	800bafa <_malloc_r+0x4a>
 800bb5a:	bf00      	nop
 800bb5c:	20000218 	.word	0x20000218
 800bb60:	2000021c 	.word	0x2000021c

0800bb64 <_sbrk_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d06      	ldr	r5, [pc, #24]	; (800bb80 <_sbrk_r+0x1c>)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	602b      	str	r3, [r5, #0]
 800bb70:	f7f6 fb48 	bl	8002204 <_sbrk>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_sbrk_r+0x1a>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_sbrk_r+0x1a>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	20000424 	.word	0x20000424

0800bb84 <__sread>:
 800bb84:	b510      	push	{r4, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8c:	f000 fa3c 	bl	800c008 <_read_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	bfab      	itete	ge
 800bb94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb96:	89a3      	ldrhlt	r3, [r4, #12]
 800bb98:	181b      	addge	r3, r3, r0
 800bb9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb9e:	bfac      	ite	ge
 800bba0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bba2:	81a3      	strhlt	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__swrite>:
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	461f      	mov	r7, r3
 800bbac:	898b      	ldrh	r3, [r1, #12]
 800bbae:	05db      	lsls	r3, r3, #23
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	d505      	bpl.n	800bbc4 <__swrite+0x1e>
 800bbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f000 f898 	bl	800bcf4 <_lseek_r>
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbce:	81a3      	strh	r3, [r4, #12]
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	f000 b817 	b.w	800bc0c <_write_r>

0800bbde <__sseek>:
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe6:	f000 f885 	bl	800bcf4 <_lseek_r>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	bf15      	itete	ne
 800bbf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbfa:	81a3      	strheq	r3, [r4, #12]
 800bbfc:	bf18      	it	ne
 800bbfe:	81a3      	strhne	r3, [r4, #12]
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <__sclose>:
 800bc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc06:	f000 b831 	b.w	800bc6c <_close_r>
	...

0800bc0c <_write_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4d07      	ldr	r5, [pc, #28]	; (800bc2c <_write_r+0x20>)
 800bc10:	4604      	mov	r4, r0
 800bc12:	4608      	mov	r0, r1
 800bc14:	4611      	mov	r1, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	602a      	str	r2, [r5, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f7f6 faa1 	bl	8002162 <_write>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d102      	bne.n	800bc2a <_write_r+0x1e>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	b103      	cbz	r3, 800bc2a <_write_r+0x1e>
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	20000424 	.word	0x20000424

0800bc30 <__assert_func>:
 800bc30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc32:	4614      	mov	r4, r2
 800bc34:	461a      	mov	r2, r3
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <__assert_func+0x2c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	68d8      	ldr	r0, [r3, #12]
 800bc3e:	b14c      	cbz	r4, 800bc54 <__assert_func+0x24>
 800bc40:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <__assert_func+0x30>)
 800bc42:	9100      	str	r1, [sp, #0]
 800bc44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc48:	4906      	ldr	r1, [pc, #24]	; (800bc64 <__assert_func+0x34>)
 800bc4a:	462b      	mov	r3, r5
 800bc4c:	f000 f81e 	bl	800bc8c <fiprintf>
 800bc50:	f000 f9f9 	bl	800c046 <abort>
 800bc54:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <__assert_func+0x38>)
 800bc56:	461c      	mov	r4, r3
 800bc58:	e7f3      	b.n	800bc42 <__assert_func+0x12>
 800bc5a:	bf00      	nop
 800bc5c:	2000001c 	.word	0x2000001c
 800bc60:	0800d604 	.word	0x0800d604
 800bc64:	0800d611 	.word	0x0800d611
 800bc68:	0800d63f 	.word	0x0800d63f

0800bc6c <_close_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d06      	ldr	r5, [pc, #24]	; (800bc88 <_close_r+0x1c>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	f7f6 fa8f 	bl	800219a <_close>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_close_r+0x1a>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_close_r+0x1a>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	20000424 	.word	0x20000424

0800bc8c <fiprintf>:
 800bc8c:	b40e      	push	{r1, r2, r3}
 800bc8e:	b503      	push	{r0, r1, lr}
 800bc90:	4601      	mov	r1, r0
 800bc92:	ab03      	add	r3, sp, #12
 800bc94:	4805      	ldr	r0, [pc, #20]	; (800bcac <fiprintf+0x20>)
 800bc96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	f000 f883 	bl	800bda8 <_vfiprintf_r>
 800bca2:	b002      	add	sp, #8
 800bca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca8:	b003      	add	sp, #12
 800bcaa:	4770      	bx	lr
 800bcac:	2000001c 	.word	0x2000001c

0800bcb0 <_fstat_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	; (800bcd0 <_fstat_r+0x20>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	4611      	mov	r1, r2
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	f7f6 fa78 	bl	80021b2 <_fstat>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	d102      	bne.n	800bccc <_fstat_r+0x1c>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	b103      	cbz	r3, 800bccc <_fstat_r+0x1c>
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000424 	.word	0x20000424

0800bcd4 <_isatty_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d06      	ldr	r5, [pc, #24]	; (800bcf0 <_isatty_r+0x1c>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	f7f6 fa77 	bl	80021d2 <_isatty>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_isatty_r+0x1a>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_isatty_r+0x1a>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	20000424 	.word	0x20000424

0800bcf4 <_lseek_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_lseek_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f6 fa70 	bl	80021e8 <_lseek>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_lseek_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_lseek_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	20000424 	.word	0x20000424

0800bd18 <__ascii_mbtowc>:
 800bd18:	b082      	sub	sp, #8
 800bd1a:	b901      	cbnz	r1, 800bd1e <__ascii_mbtowc+0x6>
 800bd1c:	a901      	add	r1, sp, #4
 800bd1e:	b142      	cbz	r2, 800bd32 <__ascii_mbtowc+0x1a>
 800bd20:	b14b      	cbz	r3, 800bd36 <__ascii_mbtowc+0x1e>
 800bd22:	7813      	ldrb	r3, [r2, #0]
 800bd24:	600b      	str	r3, [r1, #0]
 800bd26:	7812      	ldrb	r2, [r2, #0]
 800bd28:	1e10      	subs	r0, r2, #0
 800bd2a:	bf18      	it	ne
 800bd2c:	2001      	movne	r0, #1
 800bd2e:	b002      	add	sp, #8
 800bd30:	4770      	bx	lr
 800bd32:	4610      	mov	r0, r2
 800bd34:	e7fb      	b.n	800bd2e <__ascii_mbtowc+0x16>
 800bd36:	f06f 0001 	mvn.w	r0, #1
 800bd3a:	e7f8      	b.n	800bd2e <__ascii_mbtowc+0x16>

0800bd3c <__malloc_lock>:
 800bd3c:	4801      	ldr	r0, [pc, #4]	; (800bd44 <__malloc_lock+0x8>)
 800bd3e:	f7ff ba5c 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800bd42:	bf00      	nop
 800bd44:	2000041c 	.word	0x2000041c

0800bd48 <__malloc_unlock>:
 800bd48:	4801      	ldr	r0, [pc, #4]	; (800bd50 <__malloc_unlock+0x8>)
 800bd4a:	f7ff ba57 	b.w	800b1fc <__retarget_lock_release_recursive>
 800bd4e:	bf00      	nop
 800bd50:	2000041c 	.word	0x2000041c

0800bd54 <__sfputc_r>:
 800bd54:	6893      	ldr	r3, [r2, #8]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	b410      	push	{r4}
 800bd5c:	6093      	str	r3, [r2, #8]
 800bd5e:	da08      	bge.n	800bd72 <__sfputc_r+0x1e>
 800bd60:	6994      	ldr	r4, [r2, #24]
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	db01      	blt.n	800bd6a <__sfputc_r+0x16>
 800bd66:	290a      	cmp	r1, #10
 800bd68:	d103      	bne.n	800bd72 <__sfputc_r+0x1e>
 800bd6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd6e:	f7fe b94f 	b.w	800a010 <__swbuf_r>
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	1c58      	adds	r0, r3, #1
 800bd76:	6010      	str	r0, [r2, #0]
 800bd78:	7019      	strb	r1, [r3, #0]
 800bd7a:	4608      	mov	r0, r1
 800bd7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <__sfputs_r>:
 800bd82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd84:	4606      	mov	r6, r0
 800bd86:	460f      	mov	r7, r1
 800bd88:	4614      	mov	r4, r2
 800bd8a:	18d5      	adds	r5, r2, r3
 800bd8c:	42ac      	cmp	r4, r5
 800bd8e:	d101      	bne.n	800bd94 <__sfputs_r+0x12>
 800bd90:	2000      	movs	r0, #0
 800bd92:	e007      	b.n	800bda4 <__sfputs_r+0x22>
 800bd94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd98:	463a      	mov	r2, r7
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7ff ffda 	bl	800bd54 <__sfputc_r>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d1f3      	bne.n	800bd8c <__sfputs_r+0xa>
 800bda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bda8 <_vfiprintf_r>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	460d      	mov	r5, r1
 800bdae:	b09d      	sub	sp, #116	; 0x74
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	4698      	mov	r8, r3
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	b118      	cbz	r0, 800bdc0 <_vfiprintf_r+0x18>
 800bdb8:	6983      	ldr	r3, [r0, #24]
 800bdba:	b90b      	cbnz	r3, 800bdc0 <_vfiprintf_r+0x18>
 800bdbc:	f7ff f97a 	bl	800b0b4 <__sinit>
 800bdc0:	4b89      	ldr	r3, [pc, #548]	; (800bfe8 <_vfiprintf_r+0x240>)
 800bdc2:	429d      	cmp	r5, r3
 800bdc4:	d11b      	bne.n	800bdfe <_vfiprintf_r+0x56>
 800bdc6:	6875      	ldr	r5, [r6, #4]
 800bdc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdca:	07d9      	lsls	r1, r3, #31
 800bdcc:	d405      	bmi.n	800bdda <_vfiprintf_r+0x32>
 800bdce:	89ab      	ldrh	r3, [r5, #12]
 800bdd0:	059a      	lsls	r2, r3, #22
 800bdd2:	d402      	bmi.n	800bdda <_vfiprintf_r+0x32>
 800bdd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdd6:	f7ff fa10 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800bdda:	89ab      	ldrh	r3, [r5, #12]
 800bddc:	071b      	lsls	r3, r3, #28
 800bdde:	d501      	bpl.n	800bde4 <_vfiprintf_r+0x3c>
 800bde0:	692b      	ldr	r3, [r5, #16]
 800bde2:	b9eb      	cbnz	r3, 800be20 <_vfiprintf_r+0x78>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7fe f964 	bl	800a0b4 <__swsetup_r>
 800bdec:	b1c0      	cbz	r0, 800be20 <_vfiprintf_r+0x78>
 800bdee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf0:	07dc      	lsls	r4, r3, #31
 800bdf2:	d50e      	bpl.n	800be12 <_vfiprintf_r+0x6a>
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf8:	b01d      	add	sp, #116	; 0x74
 800bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	4b7b      	ldr	r3, [pc, #492]	; (800bfec <_vfiprintf_r+0x244>)
 800be00:	429d      	cmp	r5, r3
 800be02:	d101      	bne.n	800be08 <_vfiprintf_r+0x60>
 800be04:	68b5      	ldr	r5, [r6, #8]
 800be06:	e7df      	b.n	800bdc8 <_vfiprintf_r+0x20>
 800be08:	4b79      	ldr	r3, [pc, #484]	; (800bff0 <_vfiprintf_r+0x248>)
 800be0a:	429d      	cmp	r5, r3
 800be0c:	bf08      	it	eq
 800be0e:	68f5      	ldreq	r5, [r6, #12]
 800be10:	e7da      	b.n	800bdc8 <_vfiprintf_r+0x20>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	0598      	lsls	r0, r3, #22
 800be16:	d4ed      	bmi.n	800bdf4 <_vfiprintf_r+0x4c>
 800be18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be1a:	f7ff f9ef 	bl	800b1fc <__retarget_lock_release_recursive>
 800be1e:	e7e9      	b.n	800bdf4 <_vfiprintf_r+0x4c>
 800be20:	2300      	movs	r3, #0
 800be22:	9309      	str	r3, [sp, #36]	; 0x24
 800be24:	2320      	movs	r3, #32
 800be26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be2e:	2330      	movs	r3, #48	; 0x30
 800be30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bff4 <_vfiprintf_r+0x24c>
 800be34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be38:	f04f 0901 	mov.w	r9, #1
 800be3c:	4623      	mov	r3, r4
 800be3e:	469a      	mov	sl, r3
 800be40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be44:	b10a      	cbz	r2, 800be4a <_vfiprintf_r+0xa2>
 800be46:	2a25      	cmp	r2, #37	; 0x25
 800be48:	d1f9      	bne.n	800be3e <_vfiprintf_r+0x96>
 800be4a:	ebba 0b04 	subs.w	fp, sl, r4
 800be4e:	d00b      	beq.n	800be68 <_vfiprintf_r+0xc0>
 800be50:	465b      	mov	r3, fp
 800be52:	4622      	mov	r2, r4
 800be54:	4629      	mov	r1, r5
 800be56:	4630      	mov	r0, r6
 800be58:	f7ff ff93 	bl	800bd82 <__sfputs_r>
 800be5c:	3001      	adds	r0, #1
 800be5e:	f000 80aa 	beq.w	800bfb6 <_vfiprintf_r+0x20e>
 800be62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be64:	445a      	add	r2, fp
 800be66:	9209      	str	r2, [sp, #36]	; 0x24
 800be68:	f89a 3000 	ldrb.w	r3, [sl]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 80a2 	beq.w	800bfb6 <_vfiprintf_r+0x20e>
 800be72:	2300      	movs	r3, #0
 800be74:	f04f 32ff 	mov.w	r2, #4294967295
 800be78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be7c:	f10a 0a01 	add.w	sl, sl, #1
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	9307      	str	r3, [sp, #28]
 800be84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be88:	931a      	str	r3, [sp, #104]	; 0x68
 800be8a:	4654      	mov	r4, sl
 800be8c:	2205      	movs	r2, #5
 800be8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be92:	4858      	ldr	r0, [pc, #352]	; (800bff4 <_vfiprintf_r+0x24c>)
 800be94:	f7f4 f9c4 	bl	8000220 <memchr>
 800be98:	9a04      	ldr	r2, [sp, #16]
 800be9a:	b9d8      	cbnz	r0, 800bed4 <_vfiprintf_r+0x12c>
 800be9c:	06d1      	lsls	r1, r2, #27
 800be9e:	bf44      	itt	mi
 800bea0:	2320      	movmi	r3, #32
 800bea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea6:	0713      	lsls	r3, r2, #28
 800bea8:	bf44      	itt	mi
 800beaa:	232b      	movmi	r3, #43	; 0x2b
 800beac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb0:	f89a 3000 	ldrb.w	r3, [sl]
 800beb4:	2b2a      	cmp	r3, #42	; 0x2a
 800beb6:	d015      	beq.n	800bee4 <_vfiprintf_r+0x13c>
 800beb8:	9a07      	ldr	r2, [sp, #28]
 800beba:	4654      	mov	r4, sl
 800bebc:	2000      	movs	r0, #0
 800bebe:	f04f 0c0a 	mov.w	ip, #10
 800bec2:	4621      	mov	r1, r4
 800bec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec8:	3b30      	subs	r3, #48	; 0x30
 800beca:	2b09      	cmp	r3, #9
 800becc:	d94e      	bls.n	800bf6c <_vfiprintf_r+0x1c4>
 800bece:	b1b0      	cbz	r0, 800befe <_vfiprintf_r+0x156>
 800bed0:	9207      	str	r2, [sp, #28]
 800bed2:	e014      	b.n	800befe <_vfiprintf_r+0x156>
 800bed4:	eba0 0308 	sub.w	r3, r0, r8
 800bed8:	fa09 f303 	lsl.w	r3, r9, r3
 800bedc:	4313      	orrs	r3, r2
 800bede:	9304      	str	r3, [sp, #16]
 800bee0:	46a2      	mov	sl, r4
 800bee2:	e7d2      	b.n	800be8a <_vfiprintf_r+0xe2>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	1d19      	adds	r1, r3, #4
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	9103      	str	r1, [sp, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	bfbb      	ittet	lt
 800bef0:	425b      	neglt	r3, r3
 800bef2:	f042 0202 	orrlt.w	r2, r2, #2
 800bef6:	9307      	strge	r3, [sp, #28]
 800bef8:	9307      	strlt	r3, [sp, #28]
 800befa:	bfb8      	it	lt
 800befc:	9204      	strlt	r2, [sp, #16]
 800befe:	7823      	ldrb	r3, [r4, #0]
 800bf00:	2b2e      	cmp	r3, #46	; 0x2e
 800bf02:	d10c      	bne.n	800bf1e <_vfiprintf_r+0x176>
 800bf04:	7863      	ldrb	r3, [r4, #1]
 800bf06:	2b2a      	cmp	r3, #42	; 0x2a
 800bf08:	d135      	bne.n	800bf76 <_vfiprintf_r+0x1ce>
 800bf0a:	9b03      	ldr	r3, [sp, #12]
 800bf0c:	1d1a      	adds	r2, r3, #4
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	9203      	str	r2, [sp, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bfb8      	it	lt
 800bf16:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf1a:	3402      	adds	r4, #2
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c004 <_vfiprintf_r+0x25c>
 800bf22:	7821      	ldrb	r1, [r4, #0]
 800bf24:	2203      	movs	r2, #3
 800bf26:	4650      	mov	r0, sl
 800bf28:	f7f4 f97a 	bl	8000220 <memchr>
 800bf2c:	b140      	cbz	r0, 800bf40 <_vfiprintf_r+0x198>
 800bf2e:	2340      	movs	r3, #64	; 0x40
 800bf30:	eba0 000a 	sub.w	r0, r0, sl
 800bf34:	fa03 f000 	lsl.w	r0, r3, r0
 800bf38:	9b04      	ldr	r3, [sp, #16]
 800bf3a:	4303      	orrs	r3, r0
 800bf3c:	3401      	adds	r4, #1
 800bf3e:	9304      	str	r3, [sp, #16]
 800bf40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf44:	482c      	ldr	r0, [pc, #176]	; (800bff8 <_vfiprintf_r+0x250>)
 800bf46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf4a:	2206      	movs	r2, #6
 800bf4c:	f7f4 f968 	bl	8000220 <memchr>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d03f      	beq.n	800bfd4 <_vfiprintf_r+0x22c>
 800bf54:	4b29      	ldr	r3, [pc, #164]	; (800bffc <_vfiprintf_r+0x254>)
 800bf56:	bb1b      	cbnz	r3, 800bfa0 <_vfiprintf_r+0x1f8>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	3307      	adds	r3, #7
 800bf5c:	f023 0307 	bic.w	r3, r3, #7
 800bf60:	3308      	adds	r3, #8
 800bf62:	9303      	str	r3, [sp, #12]
 800bf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf66:	443b      	add	r3, r7
 800bf68:	9309      	str	r3, [sp, #36]	; 0x24
 800bf6a:	e767      	b.n	800be3c <_vfiprintf_r+0x94>
 800bf6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf70:	460c      	mov	r4, r1
 800bf72:	2001      	movs	r0, #1
 800bf74:	e7a5      	b.n	800bec2 <_vfiprintf_r+0x11a>
 800bf76:	2300      	movs	r3, #0
 800bf78:	3401      	adds	r4, #1
 800bf7a:	9305      	str	r3, [sp, #20]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f04f 0c0a 	mov.w	ip, #10
 800bf82:	4620      	mov	r0, r4
 800bf84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf88:	3a30      	subs	r2, #48	; 0x30
 800bf8a:	2a09      	cmp	r2, #9
 800bf8c:	d903      	bls.n	800bf96 <_vfiprintf_r+0x1ee>
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0c5      	beq.n	800bf1e <_vfiprintf_r+0x176>
 800bf92:	9105      	str	r1, [sp, #20]
 800bf94:	e7c3      	b.n	800bf1e <_vfiprintf_r+0x176>
 800bf96:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e7f0      	b.n	800bf82 <_vfiprintf_r+0x1da>
 800bfa0:	ab03      	add	r3, sp, #12
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	462a      	mov	r2, r5
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <_vfiprintf_r+0x258>)
 800bfa8:	a904      	add	r1, sp, #16
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f7fd fbf0 	bl	8009790 <_printf_float>
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	1c78      	adds	r0, r7, #1
 800bfb4:	d1d6      	bne.n	800bf64 <_vfiprintf_r+0x1bc>
 800bfb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfb8:	07d9      	lsls	r1, r3, #31
 800bfba:	d405      	bmi.n	800bfc8 <_vfiprintf_r+0x220>
 800bfbc:	89ab      	ldrh	r3, [r5, #12]
 800bfbe:	059a      	lsls	r2, r3, #22
 800bfc0:	d402      	bmi.n	800bfc8 <_vfiprintf_r+0x220>
 800bfc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfc4:	f7ff f91a 	bl	800b1fc <__retarget_lock_release_recursive>
 800bfc8:	89ab      	ldrh	r3, [r5, #12]
 800bfca:	065b      	lsls	r3, r3, #25
 800bfcc:	f53f af12 	bmi.w	800bdf4 <_vfiprintf_r+0x4c>
 800bfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfd2:	e711      	b.n	800bdf8 <_vfiprintf_r+0x50>
 800bfd4:	ab03      	add	r3, sp, #12
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	462a      	mov	r2, r5
 800bfda:	4b09      	ldr	r3, [pc, #36]	; (800c000 <_vfiprintf_r+0x258>)
 800bfdc:	a904      	add	r1, sp, #16
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f7fd fe7a 	bl	8009cd8 <_printf_i>
 800bfe4:	e7e4      	b.n	800bfb0 <_vfiprintf_r+0x208>
 800bfe6:	bf00      	nop
 800bfe8:	0800d468 	.word	0x0800d468
 800bfec:	0800d488 	.word	0x0800d488
 800bff0:	0800d448 	.word	0x0800d448
 800bff4:	0800d64a 	.word	0x0800d64a
 800bff8:	0800d654 	.word	0x0800d654
 800bffc:	08009791 	.word	0x08009791
 800c000:	0800bd83 	.word	0x0800bd83
 800c004:	0800d650 	.word	0x0800d650

0800c008 <_read_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_read_r+0x20>)
 800c00c:	4604      	mov	r4, r0
 800c00e:	4608      	mov	r0, r1
 800c010:	4611      	mov	r1, r2
 800c012:	2200      	movs	r2, #0
 800c014:	602a      	str	r2, [r5, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f7f6 f886 	bl	8002128 <_read>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_read_r+0x1e>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	b103      	cbz	r3, 800c026 <_read_r+0x1e>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	20000424 	.word	0x20000424

0800c02c <__ascii_wctomb>:
 800c02c:	b149      	cbz	r1, 800c042 <__ascii_wctomb+0x16>
 800c02e:	2aff      	cmp	r2, #255	; 0xff
 800c030:	bf85      	ittet	hi
 800c032:	238a      	movhi	r3, #138	; 0x8a
 800c034:	6003      	strhi	r3, [r0, #0]
 800c036:	700a      	strbls	r2, [r1, #0]
 800c038:	f04f 30ff 	movhi.w	r0, #4294967295
 800c03c:	bf98      	it	ls
 800c03e:	2001      	movls	r0, #1
 800c040:	4770      	bx	lr
 800c042:	4608      	mov	r0, r1
 800c044:	4770      	bx	lr

0800c046 <abort>:
 800c046:	b508      	push	{r3, lr}
 800c048:	2006      	movs	r0, #6
 800c04a:	f000 f82b 	bl	800c0a4 <raise>
 800c04e:	2001      	movs	r0, #1
 800c050:	f7f6 f860 	bl	8002114 <_exit>

0800c054 <_raise_r>:
 800c054:	291f      	cmp	r1, #31
 800c056:	b538      	push	{r3, r4, r5, lr}
 800c058:	4604      	mov	r4, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	d904      	bls.n	800c068 <_raise_r+0x14>
 800c05e:	2316      	movs	r3, #22
 800c060:	6003      	str	r3, [r0, #0]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c06a:	b112      	cbz	r2, 800c072 <_raise_r+0x1e>
 800c06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c070:	b94b      	cbnz	r3, 800c086 <_raise_r+0x32>
 800c072:	4620      	mov	r0, r4
 800c074:	f000 f830 	bl	800c0d8 <_getpid_r>
 800c078:	462a      	mov	r2, r5
 800c07a:	4601      	mov	r1, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c082:	f000 b817 	b.w	800c0b4 <_kill_r>
 800c086:	2b01      	cmp	r3, #1
 800c088:	d00a      	beq.n	800c0a0 <_raise_r+0x4c>
 800c08a:	1c59      	adds	r1, r3, #1
 800c08c:	d103      	bne.n	800c096 <_raise_r+0x42>
 800c08e:	2316      	movs	r3, #22
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	2001      	movs	r0, #1
 800c094:	e7e7      	b.n	800c066 <_raise_r+0x12>
 800c096:	2400      	movs	r4, #0
 800c098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c09c:	4628      	mov	r0, r5
 800c09e:	4798      	blx	r3
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7e0      	b.n	800c066 <_raise_r+0x12>

0800c0a4 <raise>:
 800c0a4:	4b02      	ldr	r3, [pc, #8]	; (800c0b0 <raise+0xc>)
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	f7ff bfd3 	b.w	800c054 <_raise_r>
 800c0ae:	bf00      	nop
 800c0b0:	2000001c 	.word	0x2000001c

0800c0b4 <_kill_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	; (800c0d4 <_kill_r+0x20>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	4611      	mov	r1, r2
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	f7f6 f817 	bl	80020f4 <_kill>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d102      	bne.n	800c0d0 <_kill_r+0x1c>
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	b103      	cbz	r3, 800c0d0 <_kill_r+0x1c>
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	bd38      	pop	{r3, r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000424 	.word	0x20000424

0800c0d8 <_getpid_r>:
 800c0d8:	f7f6 b804 	b.w	80020e4 <_getpid>

0800c0dc <atan2>:
 800c0dc:	f000 b834 	b.w	800c148 <__ieee754_atan2>

0800c0e0 <sqrt>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	ed2d 8b02 	vpush	{d8}
 800c0e6:	ec55 4b10 	vmov	r4, r5, d0
 800c0ea:	f000 f8f7 	bl	800c2dc <__ieee754_sqrt>
 800c0ee:	4b15      	ldr	r3, [pc, #84]	; (800c144 <sqrt+0x64>)
 800c0f0:	eeb0 8a40 	vmov.f32	s16, s0
 800c0f4:	eef0 8a60 	vmov.f32	s17, s1
 800c0f8:	f993 3000 	ldrsb.w	r3, [r3]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	d019      	beq.n	800c134 <sqrt+0x54>
 800c100:	4622      	mov	r2, r4
 800c102:	462b      	mov	r3, r5
 800c104:	4620      	mov	r0, r4
 800c106:	4629      	mov	r1, r5
 800c108:	f7f4 fd30 	bl	8000b6c <__aeabi_dcmpun>
 800c10c:	b990      	cbnz	r0, 800c134 <sqrt+0x54>
 800c10e:	2200      	movs	r2, #0
 800c110:	2300      	movs	r3, #0
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 fd01 	bl	8000b1c <__aeabi_dcmplt>
 800c11a:	b158      	cbz	r0, 800c134 <sqrt+0x54>
 800c11c:	f7fd fa66 	bl	80095ec <__errno>
 800c120:	2321      	movs	r3, #33	; 0x21
 800c122:	6003      	str	r3, [r0, #0]
 800c124:	2200      	movs	r2, #0
 800c126:	2300      	movs	r3, #0
 800c128:	4610      	mov	r0, r2
 800c12a:	4619      	mov	r1, r3
 800c12c:	f7f4 fbae 	bl	800088c <__aeabi_ddiv>
 800c130:	ec41 0b18 	vmov	d8, r0, r1
 800c134:	eeb0 0a48 	vmov.f32	s0, s16
 800c138:	eef0 0a68 	vmov.f32	s1, s17
 800c13c:	ecbd 8b02 	vpop	{d8}
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	200001ec 	.word	0x200001ec

0800c148 <__ieee754_atan2>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	ec57 6b11 	vmov	r6, r7, d1
 800c150:	4273      	negs	r3, r6
 800c152:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c2d8 <__ieee754_atan2+0x190>
 800c156:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c15a:	4333      	orrs	r3, r6
 800c15c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c160:	4573      	cmp	r3, lr
 800c162:	ec51 0b10 	vmov	r0, r1, d0
 800c166:	ee11 8a10 	vmov	r8, s2
 800c16a:	d80a      	bhi.n	800c182 <__ieee754_atan2+0x3a>
 800c16c:	4244      	negs	r4, r0
 800c16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c172:	4304      	orrs	r4, r0
 800c174:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c178:	4574      	cmp	r4, lr
 800c17a:	ee10 9a10 	vmov	r9, s0
 800c17e:	468c      	mov	ip, r1
 800c180:	d907      	bls.n	800c192 <__ieee754_atan2+0x4a>
 800c182:	4632      	mov	r2, r6
 800c184:	463b      	mov	r3, r7
 800c186:	f7f4 f8a1 	bl	80002cc <__adddf3>
 800c18a:	ec41 0b10 	vmov	d0, r0, r1
 800c18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c192:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c19a:	4334      	orrs	r4, r6
 800c19c:	d103      	bne.n	800c1a6 <__ieee754_atan2+0x5e>
 800c19e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a2:	f000 b951 	b.w	800c448 <atan>
 800c1a6:	17bc      	asrs	r4, r7, #30
 800c1a8:	f004 0402 	and.w	r4, r4, #2
 800c1ac:	ea53 0909 	orrs.w	r9, r3, r9
 800c1b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c1b4:	d107      	bne.n	800c1c6 <__ieee754_atan2+0x7e>
 800c1b6:	2c02      	cmp	r4, #2
 800c1b8:	d060      	beq.n	800c27c <__ieee754_atan2+0x134>
 800c1ba:	2c03      	cmp	r4, #3
 800c1bc:	d1e5      	bne.n	800c18a <__ieee754_atan2+0x42>
 800c1be:	a142      	add	r1, pc, #264	; (adr r1, 800c2c8 <__ieee754_atan2+0x180>)
 800c1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1c4:	e7e1      	b.n	800c18a <__ieee754_atan2+0x42>
 800c1c6:	ea52 0808 	orrs.w	r8, r2, r8
 800c1ca:	d106      	bne.n	800c1da <__ieee754_atan2+0x92>
 800c1cc:	f1bc 0f00 	cmp.w	ip, #0
 800c1d0:	da5f      	bge.n	800c292 <__ieee754_atan2+0x14a>
 800c1d2:	a13f      	add	r1, pc, #252	; (adr r1, 800c2d0 <__ieee754_atan2+0x188>)
 800c1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1d8:	e7d7      	b.n	800c18a <__ieee754_atan2+0x42>
 800c1da:	4572      	cmp	r2, lr
 800c1dc:	d10f      	bne.n	800c1fe <__ieee754_atan2+0xb6>
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	f104 34ff 	add.w	r4, r4, #4294967295
 800c1e4:	d107      	bne.n	800c1f6 <__ieee754_atan2+0xae>
 800c1e6:	2c02      	cmp	r4, #2
 800c1e8:	d84c      	bhi.n	800c284 <__ieee754_atan2+0x13c>
 800c1ea:	4b35      	ldr	r3, [pc, #212]	; (800c2c0 <__ieee754_atan2+0x178>)
 800c1ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c1f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c1f4:	e7c9      	b.n	800c18a <__ieee754_atan2+0x42>
 800c1f6:	2c02      	cmp	r4, #2
 800c1f8:	d848      	bhi.n	800c28c <__ieee754_atan2+0x144>
 800c1fa:	4b32      	ldr	r3, [pc, #200]	; (800c2c4 <__ieee754_atan2+0x17c>)
 800c1fc:	e7f6      	b.n	800c1ec <__ieee754_atan2+0xa4>
 800c1fe:	4573      	cmp	r3, lr
 800c200:	d0e4      	beq.n	800c1cc <__ieee754_atan2+0x84>
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c208:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c20c:	da1e      	bge.n	800c24c <__ieee754_atan2+0x104>
 800c20e:	2f00      	cmp	r7, #0
 800c210:	da01      	bge.n	800c216 <__ieee754_atan2+0xce>
 800c212:	323c      	adds	r2, #60	; 0x3c
 800c214:	db1e      	blt.n	800c254 <__ieee754_atan2+0x10c>
 800c216:	4632      	mov	r2, r6
 800c218:	463b      	mov	r3, r7
 800c21a:	f7f4 fb37 	bl	800088c <__aeabi_ddiv>
 800c21e:	ec41 0b10 	vmov	d0, r0, r1
 800c222:	f000 fab1 	bl	800c788 <fabs>
 800c226:	f000 f90f 	bl	800c448 <atan>
 800c22a:	ec51 0b10 	vmov	r0, r1, d0
 800c22e:	2c01      	cmp	r4, #1
 800c230:	d013      	beq.n	800c25a <__ieee754_atan2+0x112>
 800c232:	2c02      	cmp	r4, #2
 800c234:	d015      	beq.n	800c262 <__ieee754_atan2+0x11a>
 800c236:	2c00      	cmp	r4, #0
 800c238:	d0a7      	beq.n	800c18a <__ieee754_atan2+0x42>
 800c23a:	a319      	add	r3, pc, #100	; (adr r3, 800c2a0 <__ieee754_atan2+0x158>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 f842 	bl	80002c8 <__aeabi_dsub>
 800c244:	a318      	add	r3, pc, #96	; (adr r3, 800c2a8 <__ieee754_atan2+0x160>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	e014      	b.n	800c276 <__ieee754_atan2+0x12e>
 800c24c:	a118      	add	r1, pc, #96	; (adr r1, 800c2b0 <__ieee754_atan2+0x168>)
 800c24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c252:	e7ec      	b.n	800c22e <__ieee754_atan2+0xe6>
 800c254:	2000      	movs	r0, #0
 800c256:	2100      	movs	r1, #0
 800c258:	e7e9      	b.n	800c22e <__ieee754_atan2+0xe6>
 800c25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c25e:	4619      	mov	r1, r3
 800c260:	e793      	b.n	800c18a <__ieee754_atan2+0x42>
 800c262:	a30f      	add	r3, pc, #60	; (adr r3, 800c2a0 <__ieee754_atan2+0x158>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f82e 	bl	80002c8 <__aeabi_dsub>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	a10d      	add	r1, pc, #52	; (adr r1, 800c2a8 <__ieee754_atan2+0x160>)
 800c272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c276:	f7f4 f827 	bl	80002c8 <__aeabi_dsub>
 800c27a:	e786      	b.n	800c18a <__ieee754_atan2+0x42>
 800c27c:	a10a      	add	r1, pc, #40	; (adr r1, 800c2a8 <__ieee754_atan2+0x160>)
 800c27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c282:	e782      	b.n	800c18a <__ieee754_atan2+0x42>
 800c284:	a10c      	add	r1, pc, #48	; (adr r1, 800c2b8 <__ieee754_atan2+0x170>)
 800c286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28a:	e77e      	b.n	800c18a <__ieee754_atan2+0x42>
 800c28c:	2000      	movs	r0, #0
 800c28e:	2100      	movs	r1, #0
 800c290:	e77b      	b.n	800c18a <__ieee754_atan2+0x42>
 800c292:	a107      	add	r1, pc, #28	; (adr r1, 800c2b0 <__ieee754_atan2+0x168>)
 800c294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c298:	e777      	b.n	800c18a <__ieee754_atan2+0x42>
 800c29a:	bf00      	nop
 800c29c:	f3af 8000 	nop.w
 800c2a0:	33145c07 	.word	0x33145c07
 800c2a4:	3ca1a626 	.word	0x3ca1a626
 800c2a8:	54442d18 	.word	0x54442d18
 800c2ac:	400921fb 	.word	0x400921fb
 800c2b0:	54442d18 	.word	0x54442d18
 800c2b4:	3ff921fb 	.word	0x3ff921fb
 800c2b8:	54442d18 	.word	0x54442d18
 800c2bc:	3fe921fb 	.word	0x3fe921fb
 800c2c0:	0800d760 	.word	0x0800d760
 800c2c4:	0800d778 	.word	0x0800d778
 800c2c8:	54442d18 	.word	0x54442d18
 800c2cc:	c00921fb 	.word	0xc00921fb
 800c2d0:	54442d18 	.word	0x54442d18
 800c2d4:	bff921fb 	.word	0xbff921fb
 800c2d8:	7ff00000 	.word	0x7ff00000

0800c2dc <__ieee754_sqrt>:
 800c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e0:	ec55 4b10 	vmov	r4, r5, d0
 800c2e4:	4e56      	ldr	r6, [pc, #344]	; (800c440 <__ieee754_sqrt+0x164>)
 800c2e6:	43ae      	bics	r6, r5
 800c2e8:	ee10 0a10 	vmov	r0, s0
 800c2ec:	ee10 3a10 	vmov	r3, s0
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	d110      	bne.n	800c318 <__ieee754_sqrt+0x3c>
 800c2f6:	ee10 2a10 	vmov	r2, s0
 800c2fa:	462b      	mov	r3, r5
 800c2fc:	f7f4 f99c 	bl	8000638 <__aeabi_dmul>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	f7f3 ffe0 	bl	80002cc <__adddf3>
 800c30c:	4604      	mov	r4, r0
 800c30e:	460d      	mov	r5, r1
 800c310:	ec45 4b10 	vmov	d0, r4, r5
 800c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c318:	2d00      	cmp	r5, #0
 800c31a:	dc10      	bgt.n	800c33e <__ieee754_sqrt+0x62>
 800c31c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c320:	4330      	orrs	r0, r6
 800c322:	d0f5      	beq.n	800c310 <__ieee754_sqrt+0x34>
 800c324:	b15d      	cbz	r5, 800c33e <__ieee754_sqrt+0x62>
 800c326:	ee10 2a10 	vmov	r2, s0
 800c32a:	462b      	mov	r3, r5
 800c32c:	ee10 0a10 	vmov	r0, s0
 800c330:	f7f3 ffca 	bl	80002c8 <__aeabi_dsub>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	f7f4 faa8 	bl	800088c <__aeabi_ddiv>
 800c33c:	e7e6      	b.n	800c30c <__ieee754_sqrt+0x30>
 800c33e:	1509      	asrs	r1, r1, #20
 800c340:	d076      	beq.n	800c430 <__ieee754_sqrt+0x154>
 800c342:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c346:	07ce      	lsls	r6, r1, #31
 800c348:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c34c:	bf5e      	ittt	pl
 800c34e:	0fda      	lsrpl	r2, r3, #31
 800c350:	005b      	lslpl	r3, r3, #1
 800c352:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c356:	0fda      	lsrs	r2, r3, #31
 800c358:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c35c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c360:	2000      	movs	r0, #0
 800c362:	106d      	asrs	r5, r5, #1
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	f04f 0e16 	mov.w	lr, #22
 800c36a:	4684      	mov	ip, r0
 800c36c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c370:	eb0c 0401 	add.w	r4, ip, r1
 800c374:	4294      	cmp	r4, r2
 800c376:	bfde      	ittt	le
 800c378:	1b12      	suble	r2, r2, r4
 800c37a:	eb04 0c01 	addle.w	ip, r4, r1
 800c37e:	1840      	addle	r0, r0, r1
 800c380:	0052      	lsls	r2, r2, #1
 800c382:	f1be 0e01 	subs.w	lr, lr, #1
 800c386:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c38a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c38e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c392:	d1ed      	bne.n	800c370 <__ieee754_sqrt+0x94>
 800c394:	4671      	mov	r1, lr
 800c396:	2720      	movs	r7, #32
 800c398:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c39c:	4562      	cmp	r2, ip
 800c39e:	eb04 060e 	add.w	r6, r4, lr
 800c3a2:	dc02      	bgt.n	800c3aa <__ieee754_sqrt+0xce>
 800c3a4:	d113      	bne.n	800c3ce <__ieee754_sqrt+0xf2>
 800c3a6:	429e      	cmp	r6, r3
 800c3a8:	d811      	bhi.n	800c3ce <__ieee754_sqrt+0xf2>
 800c3aa:	2e00      	cmp	r6, #0
 800c3ac:	eb06 0e04 	add.w	lr, r6, r4
 800c3b0:	da43      	bge.n	800c43a <__ieee754_sqrt+0x15e>
 800c3b2:	f1be 0f00 	cmp.w	lr, #0
 800c3b6:	db40      	blt.n	800c43a <__ieee754_sqrt+0x15e>
 800c3b8:	f10c 0801 	add.w	r8, ip, #1
 800c3bc:	eba2 020c 	sub.w	r2, r2, ip
 800c3c0:	429e      	cmp	r6, r3
 800c3c2:	bf88      	it	hi
 800c3c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c3c8:	1b9b      	subs	r3, r3, r6
 800c3ca:	4421      	add	r1, r4
 800c3cc:	46c4      	mov	ip, r8
 800c3ce:	0052      	lsls	r2, r2, #1
 800c3d0:	3f01      	subs	r7, #1
 800c3d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c3d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c3da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3de:	d1dd      	bne.n	800c39c <__ieee754_sqrt+0xc0>
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	d006      	beq.n	800c3f2 <__ieee754_sqrt+0x116>
 800c3e4:	1c4c      	adds	r4, r1, #1
 800c3e6:	bf13      	iteet	ne
 800c3e8:	3101      	addne	r1, #1
 800c3ea:	3001      	addeq	r0, #1
 800c3ec:	4639      	moveq	r1, r7
 800c3ee:	f021 0101 	bicne.w	r1, r1, #1
 800c3f2:	1043      	asrs	r3, r0, #1
 800c3f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c3f8:	0849      	lsrs	r1, r1, #1
 800c3fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c3fe:	07c2      	lsls	r2, r0, #31
 800c400:	bf48      	it	mi
 800c402:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c406:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c40a:	460c      	mov	r4, r1
 800c40c:	463d      	mov	r5, r7
 800c40e:	e77f      	b.n	800c310 <__ieee754_sqrt+0x34>
 800c410:	0ada      	lsrs	r2, r3, #11
 800c412:	3815      	subs	r0, #21
 800c414:	055b      	lsls	r3, r3, #21
 800c416:	2a00      	cmp	r2, #0
 800c418:	d0fa      	beq.n	800c410 <__ieee754_sqrt+0x134>
 800c41a:	02d7      	lsls	r7, r2, #11
 800c41c:	d50a      	bpl.n	800c434 <__ieee754_sqrt+0x158>
 800c41e:	f1c1 0420 	rsb	r4, r1, #32
 800c422:	fa23 f404 	lsr.w	r4, r3, r4
 800c426:	1e4d      	subs	r5, r1, #1
 800c428:	408b      	lsls	r3, r1
 800c42a:	4322      	orrs	r2, r4
 800c42c:	1b41      	subs	r1, r0, r5
 800c42e:	e788      	b.n	800c342 <__ieee754_sqrt+0x66>
 800c430:	4608      	mov	r0, r1
 800c432:	e7f0      	b.n	800c416 <__ieee754_sqrt+0x13a>
 800c434:	0052      	lsls	r2, r2, #1
 800c436:	3101      	adds	r1, #1
 800c438:	e7ef      	b.n	800c41a <__ieee754_sqrt+0x13e>
 800c43a:	46e0      	mov	r8, ip
 800c43c:	e7be      	b.n	800c3bc <__ieee754_sqrt+0xe0>
 800c43e:	bf00      	nop
 800c440:	7ff00000 	.word	0x7ff00000
 800c444:	00000000 	.word	0x00000000

0800c448 <atan>:
 800c448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	ec55 4b10 	vmov	r4, r5, d0
 800c450:	4bc3      	ldr	r3, [pc, #780]	; (800c760 <atan+0x318>)
 800c452:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c456:	429e      	cmp	r6, r3
 800c458:	46ab      	mov	fp, r5
 800c45a:	dd18      	ble.n	800c48e <atan+0x46>
 800c45c:	4bc1      	ldr	r3, [pc, #772]	; (800c764 <atan+0x31c>)
 800c45e:	429e      	cmp	r6, r3
 800c460:	dc01      	bgt.n	800c466 <atan+0x1e>
 800c462:	d109      	bne.n	800c478 <atan+0x30>
 800c464:	b144      	cbz	r4, 800c478 <atan+0x30>
 800c466:	4622      	mov	r2, r4
 800c468:	462b      	mov	r3, r5
 800c46a:	4620      	mov	r0, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f3 ff2d 	bl	80002cc <__adddf3>
 800c472:	4604      	mov	r4, r0
 800c474:	460d      	mov	r5, r1
 800c476:	e006      	b.n	800c486 <atan+0x3e>
 800c478:	f1bb 0f00 	cmp.w	fp, #0
 800c47c:	f300 8131 	bgt.w	800c6e2 <atan+0x29a>
 800c480:	a59b      	add	r5, pc, #620	; (adr r5, 800c6f0 <atan+0x2a8>)
 800c482:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c486:	ec45 4b10 	vmov	d0, r4, r5
 800c48a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48e:	4bb6      	ldr	r3, [pc, #728]	; (800c768 <atan+0x320>)
 800c490:	429e      	cmp	r6, r3
 800c492:	dc14      	bgt.n	800c4be <atan+0x76>
 800c494:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c498:	429e      	cmp	r6, r3
 800c49a:	dc0d      	bgt.n	800c4b8 <atan+0x70>
 800c49c:	a396      	add	r3, pc, #600	; (adr r3, 800c6f8 <atan+0x2b0>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	ee10 0a10 	vmov	r0, s0
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f3 ff10 	bl	80002cc <__adddf3>
 800c4ac:	4baf      	ldr	r3, [pc, #700]	; (800c76c <atan+0x324>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f7f4 fb52 	bl	8000b58 <__aeabi_dcmpgt>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d1e6      	bne.n	800c486 <atan+0x3e>
 800c4b8:	f04f 3aff 	mov.w	sl, #4294967295
 800c4bc:	e02b      	b.n	800c516 <atan+0xce>
 800c4be:	f000 f963 	bl	800c788 <fabs>
 800c4c2:	4bab      	ldr	r3, [pc, #684]	; (800c770 <atan+0x328>)
 800c4c4:	429e      	cmp	r6, r3
 800c4c6:	ec55 4b10 	vmov	r4, r5, d0
 800c4ca:	f300 80bf 	bgt.w	800c64c <atan+0x204>
 800c4ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c4d2:	429e      	cmp	r6, r3
 800c4d4:	f300 80a0 	bgt.w	800c618 <atan+0x1d0>
 800c4d8:	ee10 2a10 	vmov	r2, s0
 800c4dc:	ee10 0a10 	vmov	r0, s0
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	f7f3 fef2 	bl	80002cc <__adddf3>
 800c4e8:	4ba0      	ldr	r3, [pc, #640]	; (800c76c <atan+0x324>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f7f3 feec 	bl	80002c8 <__aeabi_dsub>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f7f3 fee5 	bl	80002cc <__adddf3>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 f9bf 	bl	800088c <__aeabi_ddiv>
 800c50e:	f04f 0a00 	mov.w	sl, #0
 800c512:	4604      	mov	r4, r0
 800c514:	460d      	mov	r5, r1
 800c516:	4622      	mov	r2, r4
 800c518:	462b      	mov	r3, r5
 800c51a:	4620      	mov	r0, r4
 800c51c:	4629      	mov	r1, r5
 800c51e:	f7f4 f88b 	bl	8000638 <__aeabi_dmul>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4680      	mov	r8, r0
 800c528:	4689      	mov	r9, r1
 800c52a:	f7f4 f885 	bl	8000638 <__aeabi_dmul>
 800c52e:	a374      	add	r3, pc, #464	; (adr r3, 800c700 <atan+0x2b8>)
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	4606      	mov	r6, r0
 800c536:	460f      	mov	r7, r1
 800c538:	f7f4 f87e 	bl	8000638 <__aeabi_dmul>
 800c53c:	a372      	add	r3, pc, #456	; (adr r3, 800c708 <atan+0x2c0>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f7f3 fec3 	bl	80002cc <__adddf3>
 800c546:	4632      	mov	r2, r6
 800c548:	463b      	mov	r3, r7
 800c54a:	f7f4 f875 	bl	8000638 <__aeabi_dmul>
 800c54e:	a370      	add	r3, pc, #448	; (adr r3, 800c710 <atan+0x2c8>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f7f3 feba 	bl	80002cc <__adddf3>
 800c558:	4632      	mov	r2, r6
 800c55a:	463b      	mov	r3, r7
 800c55c:	f7f4 f86c 	bl	8000638 <__aeabi_dmul>
 800c560:	a36d      	add	r3, pc, #436	; (adr r3, 800c718 <atan+0x2d0>)
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	f7f3 feb1 	bl	80002cc <__adddf3>
 800c56a:	4632      	mov	r2, r6
 800c56c:	463b      	mov	r3, r7
 800c56e:	f7f4 f863 	bl	8000638 <__aeabi_dmul>
 800c572:	a36b      	add	r3, pc, #428	; (adr r3, 800c720 <atan+0x2d8>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	f7f3 fea8 	bl	80002cc <__adddf3>
 800c57c:	4632      	mov	r2, r6
 800c57e:	463b      	mov	r3, r7
 800c580:	f7f4 f85a 	bl	8000638 <__aeabi_dmul>
 800c584:	a368      	add	r3, pc, #416	; (adr r3, 800c728 <atan+0x2e0>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	f7f3 fe9f 	bl	80002cc <__adddf3>
 800c58e:	4642      	mov	r2, r8
 800c590:	464b      	mov	r3, r9
 800c592:	f7f4 f851 	bl	8000638 <__aeabi_dmul>
 800c596:	a366      	add	r3, pc, #408	; (adr r3, 800c730 <atan+0x2e8>)
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	4680      	mov	r8, r0
 800c59e:	4689      	mov	r9, r1
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	4639      	mov	r1, r7
 800c5a4:	f7f4 f848 	bl	8000638 <__aeabi_dmul>
 800c5a8:	a363      	add	r3, pc, #396	; (adr r3, 800c738 <atan+0x2f0>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	f7f3 fe8b 	bl	80002c8 <__aeabi_dsub>
 800c5b2:	4632      	mov	r2, r6
 800c5b4:	463b      	mov	r3, r7
 800c5b6:	f7f4 f83f 	bl	8000638 <__aeabi_dmul>
 800c5ba:	a361      	add	r3, pc, #388	; (adr r3, 800c740 <atan+0x2f8>)
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	f7f3 fe82 	bl	80002c8 <__aeabi_dsub>
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	f7f4 f836 	bl	8000638 <__aeabi_dmul>
 800c5cc:	a35e      	add	r3, pc, #376	; (adr r3, 800c748 <atan+0x300>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f7f3 fe79 	bl	80002c8 <__aeabi_dsub>
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	463b      	mov	r3, r7
 800c5da:	f7f4 f82d 	bl	8000638 <__aeabi_dmul>
 800c5de:	a35c      	add	r3, pc, #368	; (adr r3, 800c750 <atan+0x308>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f7f3 fe70 	bl	80002c8 <__aeabi_dsub>
 800c5e8:	4632      	mov	r2, r6
 800c5ea:	463b      	mov	r3, r7
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	f7f3 fe68 	bl	80002cc <__adddf3>
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	462b      	mov	r3, r5
 800c600:	f7f4 f81a 	bl	8000638 <__aeabi_dmul>
 800c604:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	d14b      	bne.n	800c6a6 <atan+0x25e>
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f3 fe59 	bl	80002c8 <__aeabi_dsub>
 800c616:	e72c      	b.n	800c472 <atan+0x2a>
 800c618:	ee10 0a10 	vmov	r0, s0
 800c61c:	4b53      	ldr	r3, [pc, #332]	; (800c76c <atan+0x324>)
 800c61e:	2200      	movs	r2, #0
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 fe51 	bl	80002c8 <__aeabi_dsub>
 800c626:	4b51      	ldr	r3, [pc, #324]	; (800c76c <atan+0x324>)
 800c628:	4606      	mov	r6, r0
 800c62a:	460f      	mov	r7, r1
 800c62c:	2200      	movs	r2, #0
 800c62e:	4620      	mov	r0, r4
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 fe4b 	bl	80002cc <__adddf3>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f4 f925 	bl	800088c <__aeabi_ddiv>
 800c642:	f04f 0a01 	mov.w	sl, #1
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	e764      	b.n	800c516 <atan+0xce>
 800c64c:	4b49      	ldr	r3, [pc, #292]	; (800c774 <atan+0x32c>)
 800c64e:	429e      	cmp	r6, r3
 800c650:	da1d      	bge.n	800c68e <atan+0x246>
 800c652:	ee10 0a10 	vmov	r0, s0
 800c656:	4b48      	ldr	r3, [pc, #288]	; (800c778 <atan+0x330>)
 800c658:	2200      	movs	r2, #0
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7f3 fe34 	bl	80002c8 <__aeabi_dsub>
 800c660:	4b45      	ldr	r3, [pc, #276]	; (800c778 <atan+0x330>)
 800c662:	4606      	mov	r6, r0
 800c664:	460f      	mov	r7, r1
 800c666:	2200      	movs	r2, #0
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 ffe4 	bl	8000638 <__aeabi_dmul>
 800c670:	4b3e      	ldr	r3, [pc, #248]	; (800c76c <atan+0x324>)
 800c672:	2200      	movs	r2, #0
 800c674:	f7f3 fe2a 	bl	80002cc <__adddf3>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f4 f904 	bl	800088c <__aeabi_ddiv>
 800c684:	f04f 0a02 	mov.w	sl, #2
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	e743      	b.n	800c516 <atan+0xce>
 800c68e:	462b      	mov	r3, r5
 800c690:	ee10 2a10 	vmov	r2, s0
 800c694:	4939      	ldr	r1, [pc, #228]	; (800c77c <atan+0x334>)
 800c696:	2000      	movs	r0, #0
 800c698:	f7f4 f8f8 	bl	800088c <__aeabi_ddiv>
 800c69c:	f04f 0a03 	mov.w	sl, #3
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	e737      	b.n	800c516 <atan+0xce>
 800c6a6:	4b36      	ldr	r3, [pc, #216]	; (800c780 <atan+0x338>)
 800c6a8:	4e36      	ldr	r6, [pc, #216]	; (800c784 <atan+0x33c>)
 800c6aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c6ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c6b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c6b6:	f7f3 fe07 	bl	80002c8 <__aeabi_dsub>
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	462b      	mov	r3, r5
 800c6be:	f7f3 fe03 	bl	80002c8 <__aeabi_dsub>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c6ca:	f7f3 fdfd 	bl	80002c8 <__aeabi_dsub>
 800c6ce:	f1bb 0f00 	cmp.w	fp, #0
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	f6bf aed6 	bge.w	800c486 <atan+0x3e>
 800c6da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6de:	461d      	mov	r5, r3
 800c6e0:	e6d1      	b.n	800c486 <atan+0x3e>
 800c6e2:	a51d      	add	r5, pc, #116	; (adr r5, 800c758 <atan+0x310>)
 800c6e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6e8:	e6cd      	b.n	800c486 <atan+0x3e>
 800c6ea:	bf00      	nop
 800c6ec:	f3af 8000 	nop.w
 800c6f0:	54442d18 	.word	0x54442d18
 800c6f4:	bff921fb 	.word	0xbff921fb
 800c6f8:	8800759c 	.word	0x8800759c
 800c6fc:	7e37e43c 	.word	0x7e37e43c
 800c700:	e322da11 	.word	0xe322da11
 800c704:	3f90ad3a 	.word	0x3f90ad3a
 800c708:	24760deb 	.word	0x24760deb
 800c70c:	3fa97b4b 	.word	0x3fa97b4b
 800c710:	a0d03d51 	.word	0xa0d03d51
 800c714:	3fb10d66 	.word	0x3fb10d66
 800c718:	c54c206e 	.word	0xc54c206e
 800c71c:	3fb745cd 	.word	0x3fb745cd
 800c720:	920083ff 	.word	0x920083ff
 800c724:	3fc24924 	.word	0x3fc24924
 800c728:	5555550d 	.word	0x5555550d
 800c72c:	3fd55555 	.word	0x3fd55555
 800c730:	2c6a6c2f 	.word	0x2c6a6c2f
 800c734:	bfa2b444 	.word	0xbfa2b444
 800c738:	52defd9a 	.word	0x52defd9a
 800c73c:	3fadde2d 	.word	0x3fadde2d
 800c740:	af749a6d 	.word	0xaf749a6d
 800c744:	3fb3b0f2 	.word	0x3fb3b0f2
 800c748:	fe231671 	.word	0xfe231671
 800c74c:	3fbc71c6 	.word	0x3fbc71c6
 800c750:	9998ebc4 	.word	0x9998ebc4
 800c754:	3fc99999 	.word	0x3fc99999
 800c758:	54442d18 	.word	0x54442d18
 800c75c:	3ff921fb 	.word	0x3ff921fb
 800c760:	440fffff 	.word	0x440fffff
 800c764:	7ff00000 	.word	0x7ff00000
 800c768:	3fdbffff 	.word	0x3fdbffff
 800c76c:	3ff00000 	.word	0x3ff00000
 800c770:	3ff2ffff 	.word	0x3ff2ffff
 800c774:	40038000 	.word	0x40038000
 800c778:	3ff80000 	.word	0x3ff80000
 800c77c:	bff00000 	.word	0xbff00000
 800c780:	0800d7b0 	.word	0x0800d7b0
 800c784:	0800d790 	.word	0x0800d790

0800c788 <fabs>:
 800c788:	ec51 0b10 	vmov	r0, r1, d0
 800c78c:	ee10 2a10 	vmov	r2, s0
 800c790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c794:	ec43 2b10 	vmov	d0, r2, r3
 800c798:	4770      	bx	lr
	...

0800c79c <_init>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr

0800c7a8 <_fini>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	bf00      	nop
 800c7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ae:	bc08      	pop	{r3}
 800c7b0:	469e      	mov	lr, r3
 800c7b2:	4770      	bx	lr
